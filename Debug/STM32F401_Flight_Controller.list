
STM32F401_Flight_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006100  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080062a0  080062a0  000162a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006384  08006384  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006384  08006384  00016384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800638c  0800638c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800638c  0800638c  0001638c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006390  08006390  00016390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ae0  20000074  08006408  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b54  08006408  00024b54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017042  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b95  00000000  00000000  000370e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d0  00000000  00000000  00039c80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000010a8  00000000  00000000  0003ae50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002cc9  00000000  00000000  0003bef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db50  00000000  00000000  0003ebc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000942ea  00000000  00000000  0004c711  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e09fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cb4  00000000  00000000  000e0a78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006288 	.word	0x08006288

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006288 	.word	0x08006288

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fbca 	bl	8000c7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f82c 	bl	8000544 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Innit_System();
 80004ec:	f000 fa30 	bl	8000950 <Innit_System>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f928 	bl	8000744 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004f4:	f000 f890 	bl	8000618 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f8:	f002 fb72 	bl	8002be0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreButton */
  SemaphoreButtonHandle = osSemaphoreNew(1, 1, &SemaphoreButton_attributes);
 80004fc:	4a0c      	ldr	r2, [pc, #48]	; (8000530 <main+0x50>)
 80004fe:	2101      	movs	r1, #1
 8000500:	2001      	movs	r0, #1
 8000502:	f002 fc64 	bl	8002dce <osSemaphoreNew>
 8000506:	4602      	mov	r2, r0
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <main+0x54>)
 800050a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  osSemaphoreAcquire(SemaphoreButtonHandle, osWaitForever);
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <main+0x54>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f04f 31ff 	mov.w	r1, #4294967295
 8000514:	4618      	mov	r0, r3
 8000516:	f002 fce5 	bl	8002ee4 <osSemaphoreAcquire>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of handleButton */
  handleButtonHandle = osThreadNew(HandleButton, NULL, &handleButton_attributes);
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <main+0x58>)
 800051c:	2100      	movs	r1, #0
 800051e:	4807      	ldr	r0, [pc, #28]	; (800053c <main+0x5c>)
 8000520:	f002 fba8 	bl	8002c74 <osThreadNew>
 8000524:	4602      	mov	r2, r0
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <main+0x60>)
 8000528:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800052a:	f002 fb7d 	bl	8002c28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052e:	e7fe      	b.n	800052e <main+0x4e>
 8000530:	080062fc 	.word	0x080062fc
 8000534:	20004ac4 	.word	0x20004ac4
 8000538:	080062d8 	.word	0x080062d8
 800053c:	08000991 	.word	0x08000991
 8000540:	20004a78 	.word	0x20004a78

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2230      	movs	r2, #48	; 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f005 fdd7 	bl	8006106 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	4b28      	ldr	r3, [pc, #160]	; (8000610 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a27      	ldr	r2, [pc, #156]	; (8000610 <SystemClock_Config+0xcc>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b25      	ldr	r3, [pc, #148]	; (8000610 <SystemClock_Config+0xcc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <SystemClock_Config+0xd0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000590:	4a20      	ldr	r2, [pc, #128]	; (8000614 <SystemClock_Config+0xd0>)
 8000592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a4:	2302      	movs	r3, #2
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ac:	2310      	movs	r3, #16
 80005ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b4:	2300      	movs	r3, #0
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b8:	2308      	movs	r3, #8
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80005bc:	2340      	movs	r3, #64	; 0x40
 80005be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fe45 	bl	800125c <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005d8:	f000 fa0c 	bl	80009f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2102      	movs	r1, #2
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 f8a7 	bl	800174c <HAL_RCC_ClockConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000604:	f000 f9f6 	bl	80009f4 <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3750      	adds	r7, #80	; 0x50
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08e      	sub	sp, #56	; 0x38
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
 8000644:	615a      	str	r2, [r3, #20]
 8000646:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000648:	4b3d      	ldr	r3, [pc, #244]	; (8000740 <MX_TIM2_Init+0x128>)
 800064a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800064e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000650:	4b3b      	ldr	r3, [pc, #236]	; (8000740 <MX_TIM2_Init+0x128>)
 8000652:	2247      	movs	r2, #71	; 0x47
 8000654:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000656:	4b3a      	ldr	r3, [pc, #232]	; (8000740 <MX_TIM2_Init+0x128>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800065c:	4b38      	ldr	r3, [pc, #224]	; (8000740 <MX_TIM2_Init+0x128>)
 800065e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000662:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000664:	4b36      	ldr	r3, [pc, #216]	; (8000740 <MX_TIM2_Init+0x128>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066a:	4b35      	ldr	r3, [pc, #212]	; (8000740 <MX_TIM2_Init+0x128>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000670:	4833      	ldr	r0, [pc, #204]	; (8000740 <MX_TIM2_Init+0x128>)
 8000672:	f001 fa55 	bl	8001b20 <HAL_TIM_Base_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800067c:	f000 f9ba 	bl	80009f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800068a:	4619      	mov	r1, r3
 800068c:	482c      	ldr	r0, [pc, #176]	; (8000740 <MX_TIM2_Init+0x128>)
 800068e:	f001 fe31 	bl	80022f4 <HAL_TIM_ConfigClockSource>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000698:	f000 f9ac 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800069c:	4828      	ldr	r0, [pc, #160]	; (8000740 <MX_TIM2_Init+0x128>)
 800069e:	f001 faf1 	bl	8001c84 <HAL_TIM_PWM_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80006a8:	f000 f9a4 	bl	80009f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4619      	mov	r1, r3
 80006ba:	4821      	ldr	r0, [pc, #132]	; (8000740 <MX_TIM2_Init+0x128>)
 80006bc:	f002 f9ca 	bl	8002a54 <HAL_TIMEx_MasterConfigSynchronization>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80006c6:	f000 f995 	bl	80009f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ca:	2360      	movs	r3, #96	; 0x60
 80006cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	4619      	mov	r1, r3
 80006e0:	4817      	ldr	r0, [pc, #92]	; (8000740 <MX_TIM2_Init+0x128>)
 80006e2:	f001 fd45 	bl	8002170 <HAL_TIM_PWM_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80006ec:	f000 f982 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2204      	movs	r2, #4
 80006f4:	4619      	mov	r1, r3
 80006f6:	4812      	ldr	r0, [pc, #72]	; (8000740 <MX_TIM2_Init+0x128>)
 80006f8:	f001 fd3a 	bl	8002170 <HAL_TIM_PWM_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000702:	f000 f977 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2208      	movs	r2, #8
 800070a:	4619      	mov	r1, r3
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <MX_TIM2_Init+0x128>)
 800070e:	f001 fd2f 	bl	8002170 <HAL_TIM_PWM_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000718:	f000 f96c 	bl	80009f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	220c      	movs	r2, #12
 8000720:	4619      	mov	r1, r3
 8000722:	4807      	ldr	r0, [pc, #28]	; (8000740 <MX_TIM2_Init+0x128>)
 8000724:	f001 fd24 	bl	8002170 <HAL_TIM_PWM_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800072e:	f000 f961 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000732:	4803      	ldr	r0, [pc, #12]	; (8000740 <MX_TIM2_Init+0x128>)
 8000734:	f000 f9ae 	bl	8000a94 <HAL_TIM_MspPostInit>

}
 8000738:	bf00      	nop
 800073a:	3738      	adds	r7, #56	; 0x38
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20004a7c 	.word	0x20004a7c

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_GPIO_Init+0xa8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a22      	ldr	r2, [pc, #136]	; (80007ec <MX_GPIO_Init+0xa8>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <MX_GPIO_Init+0xa8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_GPIO_Init+0xa8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <MX_GPIO_Init+0xa8>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <MX_GPIO_Init+0xa8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2101      	movs	r1, #1
 8000796:	4816      	ldr	r0, [pc, #88]	; (80007f0 <MX_GPIO_Init+0xac>)
 8000798:	f000 fd2e 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800079c:	2310      	movs	r3, #16
 800079e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007a6:	2302      	movs	r3, #2
 80007a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	4810      	ldr	r0, [pc, #64]	; (80007f4 <MX_GPIO_Init+0xb0>)
 80007b2:	f000 fb87 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b6:	2301      	movs	r3, #1
 80007b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4619      	mov	r1, r3
 80007cc:	4808      	ldr	r0, [pc, #32]	; (80007f0 <MX_GPIO_Init+0xac>)
 80007ce:	f000 fb79 	bl	8000ec4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2105      	movs	r1, #5
 80007d6:	200a      	movs	r0, #10
 80007d8:	f000 fb4a 	bl	8000e70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007dc:	200a      	movs	r0, #10
 80007de:	f000 fb63 	bl	8000ea8 <HAL_NVIC_EnableIRQ>

}
 80007e2:	bf00      	nop
 80007e4:	3720      	adds	r7, #32
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020400 	.word	0x40020400
 80007f4:	40020000 	.word	0x40020000

080007f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BUTTON_INPUT_PIN)
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	2b10      	cmp	r3, #16
 8000806:	d104      	bne.n	8000812 <HAL_GPIO_EXTI_Callback+0x1a>
  {
	osSemaphoreRelease(SemaphoreButtonHandle);
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <HAL_GPIO_EXTI_Callback+0x24>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f002 fbbb 	bl	8002f88 <osSemaphoreRelease>
  }
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20004ac4 	.word	0x20004ac4

08000820 <ArmMotor>:

void ArmMotor(void *argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  uint32_t channel = *(uint32_t *) argument;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	60bb      	str	r3, [r7, #8]
  uint8_t motorArmed = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  for(;;)
  {
	if (0 == motorArmed)
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d1fc      	bne.n	8000832 <ArmMotor+0x12>
	{
	  Set_PWM(1915, channel);
 8000838:	68b9      	ldr	r1, [r7, #8]
 800083a:	f240 707b 	movw	r0, #1915	; 0x77b
 800083e:	f000 f811 	bl	8000864 <Set_PWM>
	  osDelay(pdMS_TO_TICKS(1000));
 8000842:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000846:	f002 faa7 	bl	8002d98 <osDelay>
	  Set_PWM(1000, channel);
 800084a:	68b9      	ldr	r1, [r7, #8]
 800084c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000850:	f000 f808 	bl	8000864 <Set_PWM>
	  osDelay(pdMS_TO_TICKS( 6000 ));
 8000854:	f241 7070 	movw	r0, #6000	; 0x1770
 8000858:	f002 fa9e 	bl	8002d98 <osDelay>

	  //Start_Motor(channel);

	  motorArmed = 1;
 800085c:	2301      	movs	r3, #1
 800085e:	73fb      	strb	r3, [r7, #15]
	if (0 == motorArmed)
 8000860:	e7e7      	b.n	8000832 <ArmMotor+0x12>
	...

08000864 <Set_PWM>:
  osThreadTerminate(NULL);
  /* USER CODE END 5 */
}

void Set_PWM(uint16_t pulse, uint32_t channel)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	80fb      	strh	r3, [r7, #6]
  HAL_TIM_PWM_Stop(&htim2, channel);
 8000870:	6839      	ldr	r1, [r7, #0]
 8000872:	480e      	ldr	r0, [pc, #56]	; (80008ac <Set_PWM+0x48>)
 8000874:	f001 fb10 	bl	8001e98 <HAL_TIM_PWM_Stop>
  TIM_OC_InitTypeDef sConfigOC;
  HAL_TIM_PWM_Init(&htim2);
 8000878:	480c      	ldr	r0, [pc, #48]	; (80008ac <Set_PWM+0x48>)
 800087a:	f001 fa03 	bl	8001c84 <HAL_TIM_PWM_Init>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087e:	2360      	movs	r3, #96	; 0x60
 8000880:	60fb      	str	r3, [r7, #12]

  sConfigOC.Pulse = pulse;
 8000882:	88fb      	ldrh	r3, [r7, #6]
 8000884:	613b      	str	r3, [r7, #16]

  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, channel);
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <Set_PWM+0x48>)
 8000898:	f001 fc6a 	bl	8002170 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_Start(&htim2, channel);
 800089c:	6839      	ldr	r1, [r7, #0]
 800089e:	4803      	ldr	r0, [pc, #12]	; (80008ac <Set_PWM+0x48>)
 80008a0:	f001 fa4a 	bl	8001d38 <HAL_TIM_PWM_Start>
}
 80008a4:	bf00      	nop
 80008a6:	3728      	adds	r7, #40	; 0x28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20004a7c 	.word	0x20004a7c

080008b0 <Run_Motors>:

void Run_Motors()
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  if (0 == motorsArmed)
 80008b4:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <Run_Motors+0x40>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d116      	bne.n	80008ea <Run_Motors+0x3a>
	{
	  osThreadNew(ArmMotor, &motor1, NULL);
 80008bc:	2200      	movs	r2, #0
 80008be:	490d      	ldr	r1, [pc, #52]	; (80008f4 <Run_Motors+0x44>)
 80008c0:	480d      	ldr	r0, [pc, #52]	; (80008f8 <Run_Motors+0x48>)
 80008c2:	f002 f9d7 	bl	8002c74 <osThreadNew>
	  osThreadNew(ArmMotor, &motor2, NULL);
 80008c6:	2200      	movs	r2, #0
 80008c8:	490c      	ldr	r1, [pc, #48]	; (80008fc <Run_Motors+0x4c>)
 80008ca:	480b      	ldr	r0, [pc, #44]	; (80008f8 <Run_Motors+0x48>)
 80008cc:	f002 f9d2 	bl	8002c74 <osThreadNew>
	  osThreadNew(ArmMotor, &motor3, NULL);
 80008d0:	2200      	movs	r2, #0
 80008d2:	490b      	ldr	r1, [pc, #44]	; (8000900 <Run_Motors+0x50>)
 80008d4:	4808      	ldr	r0, [pc, #32]	; (80008f8 <Run_Motors+0x48>)
 80008d6:	f002 f9cd 	bl	8002c74 <osThreadNew>
	  osThreadNew(ArmMotor, &motor4, NULL);
 80008da:	2200      	movs	r2, #0
 80008dc:	4909      	ldr	r1, [pc, #36]	; (8000904 <Run_Motors+0x54>)
 80008de:	4806      	ldr	r0, [pc, #24]	; (80008f8 <Run_Motors+0x48>)
 80008e0:	f002 f9c8 	bl	8002c74 <osThreadNew>

	  motorsArmed = 1;
 80008e4:	4b02      	ldr	r3, [pc, #8]	; (80008f0 <Run_Motors+0x40>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]

    //Start_Motor(motor1);
    //Start_Motor(motor2);
    //Start_Motor(motor3);
    //Start_Motor(motor4);
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000090 	.word	0x20000090
 80008f4:	20000094 	.word	0x20000094
 80008f8:	08000821 	.word	0x08000821
 80008fc:	20000098 	.word	0x20000098
 8000900:	2000009c 	.word	0x2000009c
 8000904:	200000a0 	.word	0x200000a0

08000908 <Stop_Motors>:
{
	Set_PWM(MOTOR_MIN_PULSE, channel);
}

void Stop_Motors()
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	Set_PWM(0, motor1);
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <Stop_Motors+0x38>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff ffa6 	bl	8000864 <Set_PWM>
	Set_PWM(0, motor2);
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <Stop_Motors+0x3c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff ffa0 	bl	8000864 <Set_PWM>
	Set_PWM(0, motor3);
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <Stop_Motors+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4619      	mov	r1, r3
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff ff9a 	bl	8000864 <Set_PWM>
	Set_PWM(0, motor4);
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <Stop_Motors+0x44>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4619      	mov	r1, r3
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff ff94 	bl	8000864 <Set_PWM>
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000094 	.word	0x20000094
 8000944:	20000098 	.word	0x20000098
 8000948:	2000009c 	.word	0x2000009c
 800094c:	200000a0 	.word	0x200000a0

08000950 <Innit_System>:

void Innit_System(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
	motorsArmed = 0;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <Innit_System+0x2c>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]

	motor1 = MOTOR1;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <Innit_System+0x30>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
    motor2 = MOTOR2;
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <Innit_System+0x34>)
 8000962:	2204      	movs	r2, #4
 8000964:	601a      	str	r2, [r3, #0]
    motor3 = MOTOR3;
 8000966:	4b08      	ldr	r3, [pc, #32]	; (8000988 <Innit_System+0x38>)
 8000968:	2208      	movs	r2, #8
 800096a:	601a      	str	r2, [r3, #0]
    motor4 = MOTOR4;
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <Innit_System+0x3c>)
 800096e:	220c      	movs	r2, #12
 8000970:	601a      	str	r2, [r3, #0]
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr
 800097c:	20000090 	.word	0x20000090
 8000980:	20000094 	.word	0x20000094
 8000984:	20000098 	.word	0x20000098
 8000988:	2000009c 	.word	0x2000009c
 800098c:	200000a0 	.word	0x200000a0

08000990 <HandleButton>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_HandleButton */
void HandleButton(void *argument)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

/* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(SemaphoreButtonHandle, osWaitForever);
 8000998:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HandleButton+0x38>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f04f 31ff 	mov.w	r1, #4294967295
 80009a0:	4618      	mov	r0, r3
 80009a2:	f002 fa9f 	bl	8002ee4 <osSemaphoreAcquire>

	osDelay(pdMS_TO_TICKS(70)); //debounce and voltage spike handler
 80009a6:	2046      	movs	r0, #70	; 0x46
 80009a8:	f002 f9f6 	bl	8002d98 <osDelay>

	if (HAL_GPIO_ReadPin(BUTTON_INPUT_PORT, BUTTON_INPUT_PIN))
 80009ac:	2110      	movs	r1, #16
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <HandleButton+0x3c>)
 80009b0:	f000 fc0a 	bl	80011c8 <HAL_GPIO_ReadPin>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d002      	beq.n	80009c0 <HandleButton+0x30>
	{
	  Run_Motors();
 80009ba:	f7ff ff79 	bl	80008b0 <Run_Motors>
 80009be:	e7eb      	b.n	8000998 <HandleButton+0x8>
	}
	else
	{
      Stop_Motors();
 80009c0:	f7ff ffa2 	bl	8000908 <Stop_Motors>
	osSemaphoreAcquire(SemaphoreButtonHandle, osWaitForever);
 80009c4:	e7e8      	b.n	8000998 <HandleButton+0x8>
 80009c6:	bf00      	nop
 80009c8:	20004ac4 	.word	0x20004ac4
 80009cc:	40020000 	.word	0x40020000

080009d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d101      	bne.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e2:	f000 f96d 	bl	8000cc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40014400 	.word	0x40014400

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fa:	e7fe      	b.n	80009fa <Error_Handler+0x6>

080009fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_MspInit+0x54>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	4a11      	ldr	r2, [pc, #68]	; (8000a50 <HAL_MspInit+0x54>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	; 0x44
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x54>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_MspInit+0x54>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_MspInit+0x54>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_MspInit+0x54>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	210f      	movs	r1, #15
 8000a3e:	f06f 0001 	mvn.w	r0, #1
 8000a42:	f000 fa15 	bl	8000e70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a64:	d10d      	bne.n	8000a82 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_TIM_Base_MspInit+0x3c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_TIM_Base_MspInit+0x3c>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_TIM_Base_MspInit+0x3c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a82:	bf00      	nop
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800

08000a94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ab4:	d11d      	bne.n	8000af2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <HAL_TIM_MspPostInit+0x68>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a0f      	ldr	r2, [pc, #60]	; (8000afc <HAL_TIM_MspPostInit+0x68>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <HAL_TIM_MspPostInit+0x68>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae6:	f107 030c 	add.w	r3, r7, #12
 8000aea:	4619      	mov	r1, r3
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <HAL_TIM_MspPostInit+0x6c>)
 8000aee:	f000 f9e9 	bl	8000ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000af2:	bf00      	nop
 8000af4:	3720      	adds	r7, #32
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020000 	.word	0x40020000

08000b04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08c      	sub	sp, #48	; 0x30
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	6879      	ldr	r1, [r7, #4]
 8000b18:	2019      	movs	r0, #25
 8000b1a:	f000 f9a9 	bl	8000e70 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b1e:	2019      	movs	r0, #25
 8000b20:	f000 f9c2 	bl	8000ea8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <HAL_InitTick+0xa0>)
 8000b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <HAL_InitTick+0xa0>)
 8000b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b32:	6453      	str	r3, [r2, #68]	; 0x44
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <HAL_InitTick+0xa0>)
 8000b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b40:	f107 0210 	add.w	r2, r7, #16
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 ffb6 	bl	8001abc <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b50:	f000 ffa0 	bl	8001a94 <HAL_RCC_GetPCLK2Freq>
 8000b54:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b58:	4a13      	ldr	r2, [pc, #76]	; (8000ba8 <HAL_InitTick+0xa4>)
 8000b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5e:	0c9b      	lsrs	r3, r3, #18
 8000b60:	3b01      	subs	r3, #1
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_InitTick+0xa8>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <HAL_InitTick+0xac>)
 8000b68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <HAL_InitTick+0xa8>)
 8000b6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b70:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000b72:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <HAL_InitTick+0xa8>)
 8000b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b76:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_InitTick+0xa8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_InitTick+0xa8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000b84:	4809      	ldr	r0, [pc, #36]	; (8000bac <HAL_InitTick+0xa8>)
 8000b86:	f000 ffcb 	bl	8001b20 <HAL_TIM_Base_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d104      	bne.n	8000b9a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000b90:	4806      	ldr	r0, [pc, #24]	; (8000bac <HAL_InitTick+0xa8>)
 8000b92:	f001 f815 	bl	8001bc0 <HAL_TIM_Base_Start_IT>
 8000b96:	4603      	mov	r3, r0
 8000b98:	e000      	b.n	8000b9c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3730      	adds	r7, #48	; 0x30
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	431bde83 	.word	0x431bde83
 8000bac:	20004ac8 	.word	0x20004ac8
 8000bb0:	40014400 	.word	0x40014400

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <NMI_Handler+0x4>

08000bba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <BusFault_Handler+0x4>

08000bcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <UsageFault_Handler+0x4>

08000bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000be4:	2010      	movs	r0, #16
 8000be6:	f000 fb21 	bl	800122c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bf6:	f001 f9b3 	bl	8001f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20004ac8 	.word	0x20004ac8

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c2e:	490e      	ldr	r1, [pc, #56]	; (8000c68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0b      	ldr	r2, [pc, #44]	; (8000c70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c44:	4c0b      	ldr	r4, [pc, #44]	; (8000c74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c52:	f7ff ffd7 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c56:	f005 fa27 	bl	80060a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5a:	f7ff fc41 	bl	80004e0 <main>
  bx  lr    
 8000c5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c60:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c68:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c6c:	08006394 	.word	0x08006394
  ldr r2, =_sbss
 8000c70:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c74:	20004b54 	.word	0x20004b54

08000c78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c78:	e7fe      	b.n	8000c78 <ADC_IRQHandler>
	...

08000c7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0d      	ldr	r2, [pc, #52]	; (8000cbc <HAL_Init+0x40>)
 8000c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_Init+0x40>)
 8000c92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_Init+0x40>)
 8000c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f8d8 	bl	8000e5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	2005      	movs	r0, #5
 8000cac:	f7ff ff2a 	bl	8000b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff fea4 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x20>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x24>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4413      	add	r3, r2
 8000cd0:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <HAL_IncTick+0x24>)
 8000cd2:	6013      	str	r3, [r2, #0]
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20004b10 	.word	0x20004b10

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b03      	ldr	r3, [pc, #12]	; (8000cfc <HAL_GetTick+0x14>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20004b10 	.word	0x20004b10

08000d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d32:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	60d3      	str	r3, [r2, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <__NVIC_GetPriorityGrouping+0x18>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	0a1b      	lsrs	r3, r3, #8
 8000d52:	f003 0307 	and.w	r3, r3, #7
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	db0b      	blt.n	8000d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	f003 021f 	and.w	r2, r3, #31
 8000d7c:	4907      	ldr	r1, [pc, #28]	; (8000d9c <__NVIC_EnableIRQ+0x38>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	095b      	lsrs	r3, r3, #5
 8000d84:	2001      	movs	r0, #1
 8000d86:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000e100 	.word	0xe000e100

08000da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	db0a      	blt.n	8000dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	490c      	ldr	r1, [pc, #48]	; (8000dec <__NVIC_SetPriority+0x4c>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	0112      	lsls	r2, r2, #4
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc8:	e00a      	b.n	8000de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4908      	ldr	r1, [pc, #32]	; (8000df0 <__NVIC_SetPriority+0x50>)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	3b04      	subs	r3, #4
 8000dd8:	0112      	lsls	r2, r2, #4
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	440b      	add	r3, r1
 8000dde:	761a      	strb	r2, [r3, #24]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000e100 	.word	0xe000e100
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f1c3 0307 	rsb	r3, r3, #7
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	bf28      	it	cs
 8000e12:	2304      	movcs	r3, #4
 8000e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	2b06      	cmp	r3, #6
 8000e1c:	d902      	bls.n	8000e24 <NVIC_EncodePriority+0x30>
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3b03      	subs	r3, #3
 8000e22:	e000      	b.n	8000e26 <NVIC_EncodePriority+0x32>
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43da      	mvns	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	401a      	ands	r2, r3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	43d9      	mvns	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	4313      	orrs	r3, r2
         );
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3724      	adds	r7, #36	; 0x24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ff4c 	bl	8000d00 <__NVIC_SetPriorityGrouping>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
 8000e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e82:	f7ff ff61 	bl	8000d48 <__NVIC_GetPriorityGrouping>
 8000e86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	68b9      	ldr	r1, [r7, #8]
 8000e8c:	6978      	ldr	r0, [r7, #20]
 8000e8e:	f7ff ffb1 	bl	8000df4 <NVIC_EncodePriority>
 8000e92:	4602      	mov	r2, r0
 8000e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ff80 	bl	8000da0 <__NVIC_SetPriority>
}
 8000ea0:	bf00      	nop
 8000ea2:	3718      	adds	r7, #24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff54 	bl	8000d64 <__NVIC_EnableIRQ>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	e159      	b.n	8001194 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	f040 8148 	bne.w	800118e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d005      	beq.n	8000f16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d130      	bne.n	8000f78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	68da      	ldr	r2, [r3, #12]
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	091b      	lsrs	r3, r3, #4
 8000f62:	f003 0201 	and.w	r2, r3, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	d017      	beq.n	8000fb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d123      	bne.n	8001008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3208      	adds	r2, #8
 8000fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	08da      	lsrs	r2, r3, #3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3208      	adds	r2, #8
 8001002:	69b9      	ldr	r1, [r7, #24]
 8001004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 0203 	and.w	r2, r3, #3
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 80a2 	beq.w	800118e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b56      	ldr	r3, [pc, #344]	; (80011a8 <HAL_GPIO_Init+0x2e4>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a55      	ldr	r2, [pc, #340]	; (80011a8 <HAL_GPIO_Init+0x2e4>)
 8001054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b53      	ldr	r3, [pc, #332]	; (80011a8 <HAL_GPIO_Init+0x2e4>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001066:	4a51      	ldr	r2, [pc, #324]	; (80011ac <HAL_GPIO_Init+0x2e8>)
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a48      	ldr	r2, [pc, #288]	; (80011b0 <HAL_GPIO_Init+0x2ec>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d019      	beq.n	80010c6 <HAL_GPIO_Init+0x202>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a47      	ldr	r2, [pc, #284]	; (80011b4 <HAL_GPIO_Init+0x2f0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d013      	beq.n	80010c2 <HAL_GPIO_Init+0x1fe>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a46      	ldr	r2, [pc, #280]	; (80011b8 <HAL_GPIO_Init+0x2f4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d00d      	beq.n	80010be <HAL_GPIO_Init+0x1fa>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a45      	ldr	r2, [pc, #276]	; (80011bc <HAL_GPIO_Init+0x2f8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d007      	beq.n	80010ba <HAL_GPIO_Init+0x1f6>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a44      	ldr	r2, [pc, #272]	; (80011c0 <HAL_GPIO_Init+0x2fc>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d101      	bne.n	80010b6 <HAL_GPIO_Init+0x1f2>
 80010b2:	2304      	movs	r3, #4
 80010b4:	e008      	b.n	80010c8 <HAL_GPIO_Init+0x204>
 80010b6:	2307      	movs	r3, #7
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x204>
 80010ba:	2303      	movs	r3, #3
 80010bc:	e004      	b.n	80010c8 <HAL_GPIO_Init+0x204>
 80010be:	2302      	movs	r3, #2
 80010c0:	e002      	b.n	80010c8 <HAL_GPIO_Init+0x204>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <HAL_GPIO_Init+0x204>
 80010c6:	2300      	movs	r3, #0
 80010c8:	69fa      	ldr	r2, [r7, #28]
 80010ca:	f002 0203 	and.w	r2, r2, #3
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	4093      	lsls	r3, r2
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010d8:	4934      	ldr	r1, [pc, #208]	; (80011ac <HAL_GPIO_Init+0x2e8>)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	3302      	adds	r3, #2
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e6:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <HAL_GPIO_Init+0x300>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	43db      	mvns	r3, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4013      	ands	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800110a:	4a2e      	ldr	r2, [pc, #184]	; (80011c4 <HAL_GPIO_Init+0x300>)
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001110:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d003      	beq.n	8001134 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001134:	4a23      	ldr	r2, [pc, #140]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <HAL_GPIO_Init+0x300>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800115e:	4a19      	ldr	r2, [pc, #100]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_GPIO_Init+0x300>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001188:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <HAL_GPIO_Init+0x300>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3301      	adds	r3, #1
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	2b0f      	cmp	r3, #15
 8001198:	f67f aea2 	bls.w	8000ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800119c:	bf00      	nop
 800119e:	3724      	adds	r7, #36	; 0x24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40013800 	.word	0x40013800
 80011b0:	40020000 	.word	0x40020000
 80011b4:	40020400 	.word	0x40020400
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020c00 	.word	0x40020c00
 80011c0:	40021000 	.word	0x40021000
 80011c4:	40013c00 	.word	0x40013c00

080011c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	4013      	ands	r3, r2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d002      	beq.n	80011e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011e0:	2301      	movs	r3, #1
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e001      	b.n	80011ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]
 8001204:	4613      	mov	r3, r2
 8001206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001208:	787b      	ldrb	r3, [r7, #1]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001214:	e003      	b.n	800121e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	041a      	lsls	r2, r3, #16
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	619a      	str	r2, [r3, #24]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001238:	695a      	ldr	r2, [r3, #20]
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	4013      	ands	r3, r2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d006      	beq.n	8001250 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001244:	88fb      	ldrh	r3, [r7, #6]
 8001246:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fad4 	bl	80007f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40013c00 	.word	0x40013c00

0800125c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e264      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d075      	beq.n	8001366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800127a:	4ba3      	ldr	r3, [pc, #652]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
 8001282:	2b04      	cmp	r3, #4
 8001284:	d00c      	beq.n	80012a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001286:	4ba0      	ldr	r3, [pc, #640]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800128e:	2b08      	cmp	r3, #8
 8001290:	d112      	bne.n	80012b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001292:	4b9d      	ldr	r3, [pc, #628]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800129e:	d10b      	bne.n	80012b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a0:	4b99      	ldr	r3, [pc, #612]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d05b      	beq.n	8001364 <HAL_RCC_OscConfig+0x108>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d157      	bne.n	8001364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e23f      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c0:	d106      	bne.n	80012d0 <HAL_RCC_OscConfig+0x74>
 80012c2:	4b91      	ldr	r3, [pc, #580]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a90      	ldr	r2, [pc, #576]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e01d      	b.n	800130c <HAL_RCC_OscConfig+0xb0>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012d8:	d10c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x98>
 80012da:	4b8b      	ldr	r3, [pc, #556]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a8a      	ldr	r2, [pc, #552]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	4b88      	ldr	r3, [pc, #544]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a87      	ldr	r2, [pc, #540]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	e00b      	b.n	800130c <HAL_RCC_OscConfig+0xb0>
 80012f4:	4b84      	ldr	r3, [pc, #528]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a83      	ldr	r2, [pc, #524]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80012fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	4b81      	ldr	r3, [pc, #516]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a80      	ldr	r2, [pc, #512]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d013      	beq.n	800133c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fce8 	bl	8000ce8 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fce4 	bl	8000ce8 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e204      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132e:	4b76      	ldr	r3, [pc, #472]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f0      	beq.n	800131c <HAL_RCC_OscConfig+0xc0>
 800133a:	e014      	b.n	8001366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fcd4 	bl	8000ce8 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001344:	f7ff fcd0 	bl	8000ce8 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b64      	cmp	r3, #100	; 0x64
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e1f0      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001356:	4b6c      	ldr	r3, [pc, #432]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0xe8>
 8001362:	e000      	b.n	8001366 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d063      	beq.n	800143a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001372:	4b65      	ldr	r3, [pc, #404]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	2b00      	cmp	r3, #0
 800137c:	d00b      	beq.n	8001396 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137e:	4b62      	ldr	r3, [pc, #392]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001386:	2b08      	cmp	r3, #8
 8001388:	d11c      	bne.n	80013c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800138a:	4b5f      	ldr	r3, [pc, #380]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d116      	bne.n	80013c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001396:	4b5c      	ldr	r3, [pc, #368]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d005      	beq.n	80013ae <HAL_RCC_OscConfig+0x152>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d001      	beq.n	80013ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e1c4      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ae:	4b56      	ldr	r3, [pc, #344]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4952      	ldr	r1, [pc, #328]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c2:	e03a      	b.n	800143a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d020      	beq.n	800140e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013cc:	4b4f      	ldr	r3, [pc, #316]	; (800150c <HAL_RCC_OscConfig+0x2b0>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d2:	f7ff fc89 	bl	8000ce8 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013da:	f7ff fc85 	bl	8000ce8 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e1a5      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ec:	4b46      	ldr	r3, [pc, #280]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f8:	4b43      	ldr	r3, [pc, #268]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	4940      	ldr	r1, [pc, #256]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	4313      	orrs	r3, r2
 800140a:	600b      	str	r3, [r1, #0]
 800140c:	e015      	b.n	800143a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800140e:	4b3f      	ldr	r3, [pc, #252]	; (800150c <HAL_RCC_OscConfig+0x2b0>)
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001414:	f7ff fc68 	bl	8000ce8 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800141c:	f7ff fc64 	bl	8000ce8 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e184      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800142e:	4b36      	ldr	r3, [pc, #216]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b00      	cmp	r3, #0
 8001444:	d030      	beq.n	80014a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d016      	beq.n	800147c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800144e:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_RCC_OscConfig+0x2b4>)
 8001450:	2201      	movs	r2, #1
 8001452:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001454:	f7ff fc48 	bl	8000ce8 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800145c:	f7ff fc44 	bl	8000ce8 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e164      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146e:	4b26      	ldr	r3, [pc, #152]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0f0      	beq.n	800145c <HAL_RCC_OscConfig+0x200>
 800147a:	e015      	b.n	80014a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800147c:	4b24      	ldr	r3, [pc, #144]	; (8001510 <HAL_RCC_OscConfig+0x2b4>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001482:	f7ff fc31 	bl	8000ce8 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148a:	f7ff fc2d 	bl	8000ce8 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e14d      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 800149e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1f0      	bne.n	800148a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80a0 	beq.w	80015f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b6:	2300      	movs	r3, #0
 80014b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10f      	bne.n	80014e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_RCC_OscConfig+0x2ac>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e2:	2301      	movs	r3, #1
 80014e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_RCC_OscConfig+0x2b8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d121      	bne.n	8001536 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <HAL_RCC_OscConfig+0x2b8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a07      	ldr	r2, [pc, #28]	; (8001514 <HAL_RCC_OscConfig+0x2b8>)
 80014f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fbf3 	bl	8000ce8 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	e011      	b.n	800152a <HAL_RCC_OscConfig+0x2ce>
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	42470000 	.word	0x42470000
 8001510:	42470e80 	.word	0x42470e80
 8001514:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001518:	f7ff fbe6 	bl	8000ce8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e106      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152a:	4b85      	ldr	r3, [pc, #532]	; (8001740 <HAL_RCC_OscConfig+0x4e4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d106      	bne.n	800154c <HAL_RCC_OscConfig+0x2f0>
 800153e:	4b81      	ldr	r3, [pc, #516]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001542:	4a80      	ldr	r2, [pc, #512]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6713      	str	r3, [r2, #112]	; 0x70
 800154a:	e01c      	b.n	8001586 <HAL_RCC_OscConfig+0x32a>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b05      	cmp	r3, #5
 8001552:	d10c      	bne.n	800156e <HAL_RCC_OscConfig+0x312>
 8001554:	4b7b      	ldr	r3, [pc, #492]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001558:	4a7a      	ldr	r2, [pc, #488]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	6713      	str	r3, [r2, #112]	; 0x70
 8001560:	4b78      	ldr	r3, [pc, #480]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001564:	4a77      	ldr	r2, [pc, #476]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6713      	str	r3, [r2, #112]	; 0x70
 800156c:	e00b      	b.n	8001586 <HAL_RCC_OscConfig+0x32a>
 800156e:	4b75      	ldr	r3, [pc, #468]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001572:	4a74      	ldr	r2, [pc, #464]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	6713      	str	r3, [r2, #112]	; 0x70
 800157a:	4b72      	ldr	r3, [pc, #456]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	4a71      	ldr	r2, [pc, #452]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001580:	f023 0304 	bic.w	r3, r3, #4
 8001584:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d015      	beq.n	80015ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158e:	f7ff fbab 	bl	8000ce8 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001594:	e00a      	b.n	80015ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001596:	f7ff fba7 	bl	8000ce8 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e0c5      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ac:	4b65      	ldr	r3, [pc, #404]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0ee      	beq.n	8001596 <HAL_RCC_OscConfig+0x33a>
 80015b8:	e014      	b.n	80015e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ba:	f7ff fb95 	bl	8000ce8 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c0:	e00a      	b.n	80015d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c2:	f7ff fb91 	bl	8000ce8 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e0af      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d8:	4b5a      	ldr	r3, [pc, #360]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1ee      	bne.n	80015c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015e4:	7dfb      	ldrb	r3, [r7, #23]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d105      	bne.n	80015f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ea:	4b56      	ldr	r3, [pc, #344]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	4a55      	ldr	r2, [pc, #340]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 80015f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 809b 	beq.w	8001736 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001600:	4b50      	ldr	r3, [pc, #320]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b08      	cmp	r3, #8
 800160a:	d05c      	beq.n	80016c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d141      	bne.n	8001698 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001614:	4b4c      	ldr	r3, [pc, #304]	; (8001748 <HAL_RCC_OscConfig+0x4ec>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161a:	f7ff fb65 	bl	8000ce8 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001622:	f7ff fb61 	bl	8000ce8 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e081      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001634:	4b43      	ldr	r3, [pc, #268]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f0      	bne.n	8001622 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	69da      	ldr	r2, [r3, #28]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	019b      	lsls	r3, r3, #6
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	3b01      	subs	r3, #1
 800165a:	041b      	lsls	r3, r3, #16
 800165c:	431a      	orrs	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	061b      	lsls	r3, r3, #24
 8001664:	4937      	ldr	r1, [pc, #220]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 8001666:	4313      	orrs	r3, r2
 8001668:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800166a:	4b37      	ldr	r3, [pc, #220]	; (8001748 <HAL_RCC_OscConfig+0x4ec>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fb3a 	bl	8000ce8 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff fb36 	bl	8000ce8 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e056      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168a:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCC_OscConfig+0x41c>
 8001696:	e04e      	b.n	8001736 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001698:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <HAL_RCC_OscConfig+0x4ec>)
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff fb23 	bl	8000ce8 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a6:	f7ff fb1f 	bl	8000ce8 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e03f      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b8:	4b22      	ldr	r3, [pc, #136]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f0      	bne.n	80016a6 <HAL_RCC_OscConfig+0x44a>
 80016c4:	e037      	b.n	8001736 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e032      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <HAL_RCC_OscConfig+0x4e8>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d028      	beq.n	8001732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d121      	bne.n	8001732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d11a      	bne.n	8001732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001702:	4013      	ands	r3, r2
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001708:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800170a:	4293      	cmp	r3, r2
 800170c:	d111      	bne.n	8001732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	085b      	lsrs	r3, r3, #1
 800171a:	3b01      	subs	r3, #1
 800171c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800171e:	429a      	cmp	r2, r3
 8001720:	d107      	bne.n	8001732 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d001      	beq.n	8001736 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40007000 	.word	0x40007000
 8001744:	40023800 	.word	0x40023800
 8001748:	42470060 	.word	0x42470060

0800174c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d101      	bne.n	8001760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0cc      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001760:	4b68      	ldr	r3, [pc, #416]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d90c      	bls.n	8001788 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b65      	ldr	r3, [pc, #404]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b63      	ldr	r3, [pc, #396]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0b8      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d020      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017a0:	4b59      	ldr	r3, [pc, #356]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4a58      	ldr	r2, [pc, #352]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b8:	4b53      	ldr	r3, [pc, #332]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017c4:	4b50      	ldr	r3, [pc, #320]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	494d      	ldr	r1, [pc, #308]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d044      	beq.n	800186c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b47      	ldr	r3, [pc, #284]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d119      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e07f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d003      	beq.n	800180a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001806:	2b03      	cmp	r3, #3
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180a:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d109      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e06f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181a:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e067      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182a:	4b37      	ldr	r3, [pc, #220]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f023 0203 	bic.w	r2, r3, #3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4934      	ldr	r1, [pc, #208]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	4313      	orrs	r3, r2
 800183a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800183c:	f7ff fa54 	bl	8000ce8 <HAL_GetTick>
 8001840:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	e00a      	b.n	800185a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001844:	f7ff fa50 	bl	8000ce8 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001852:	4293      	cmp	r3, r2
 8001854:	d901      	bls.n	800185a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e04f      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 020c 	and.w	r2, r3, #12
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	429a      	cmp	r2, r3
 800186a:	d1eb      	bne.n	8001844 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800186c:	4b25      	ldr	r3, [pc, #148]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	429a      	cmp	r2, r3
 8001878:	d20c      	bcs.n	8001894 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187a:	4b22      	ldr	r3, [pc, #136]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <HAL_RCC_ClockConfig+0x1b8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e032      	b.n	80018fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4916      	ldr	r1, [pc, #88]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d009      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	490e      	ldr	r1, [pc, #56]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018d2:	f000 f821 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 80018d6:	4601      	mov	r1, r0
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	5cd3      	ldrb	r3, [r2, r3]
 80018e6:	fa21 f303 	lsr.w	r3, r1, r3
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <HAL_RCC_ClockConfig+0x1c4>)
 80018ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <HAL_RCC_ClockConfig+0x1c8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f906 	bl	8000b04 <HAL_InitTick>

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023c00 	.word	0x40023c00
 8001908:	40023800 	.word	0x40023800
 800190c:	0800630c 	.word	0x0800630c
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	2300      	movs	r3, #0
 8001928:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800192e:	4b50      	ldr	r3, [pc, #320]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x158>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b04      	cmp	r3, #4
 8001938:	d007      	beq.n	800194a <HAL_RCC_GetSysClockFreq+0x32>
 800193a:	2b08      	cmp	r3, #8
 800193c:	d008      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x38>
 800193e:	2b00      	cmp	r3, #0
 8001940:	f040 808d 	bne.w	8001a5e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001944:	4b4b      	ldr	r3, [pc, #300]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001946:	60bb      	str	r3, [r7, #8]
       break;
 8001948:	e08c      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800194a:	4b4b      	ldr	r3, [pc, #300]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x160>)
 800194c:	60bb      	str	r3, [r7, #8]
      break;
 800194e:	e089      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001950:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x158>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001958:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800195a:	4b45      	ldr	r3, [pc, #276]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x158>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d023      	beq.n	80019ae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001966:	4b42      	ldr	r3, [pc, #264]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x158>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	099b      	lsrs	r3, r3, #6
 800196c:	f04f 0400 	mov.w	r4, #0
 8001970:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	ea03 0501 	and.w	r5, r3, r1
 800197c:	ea04 0602 	and.w	r6, r4, r2
 8001980:	4a3d      	ldr	r2, [pc, #244]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x160>)
 8001982:	fb02 f106 	mul.w	r1, r2, r6
 8001986:	2200      	movs	r2, #0
 8001988:	fb02 f205 	mul.w	r2, r2, r5
 800198c:	440a      	add	r2, r1
 800198e:	493a      	ldr	r1, [pc, #232]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x160>)
 8001990:	fba5 0101 	umull	r0, r1, r5, r1
 8001994:	1853      	adds	r3, r2, r1
 8001996:	4619      	mov	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f04f 0400 	mov.w	r4, #0
 800199e:	461a      	mov	r2, r3
 80019a0:	4623      	mov	r3, r4
 80019a2:	f7fe fc1d 	bl	80001e0 <__aeabi_uldivmod>
 80019a6:	4603      	mov	r3, r0
 80019a8:	460c      	mov	r4, r1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e049      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ae:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x158>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	099b      	lsrs	r3, r3, #6
 80019b4:	f04f 0400 	mov.w	r4, #0
 80019b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	ea03 0501 	and.w	r5, r3, r1
 80019c4:	ea04 0602 	and.w	r6, r4, r2
 80019c8:	4629      	mov	r1, r5
 80019ca:	4632      	mov	r2, r6
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	f04f 0400 	mov.w	r4, #0
 80019d4:	0154      	lsls	r4, r2, #5
 80019d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019da:	014b      	lsls	r3, r1, #5
 80019dc:	4619      	mov	r1, r3
 80019de:	4622      	mov	r2, r4
 80019e0:	1b49      	subs	r1, r1, r5
 80019e2:	eb62 0206 	sbc.w	r2, r2, r6
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	f04f 0400 	mov.w	r4, #0
 80019ee:	0194      	lsls	r4, r2, #6
 80019f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019f4:	018b      	lsls	r3, r1, #6
 80019f6:	1a5b      	subs	r3, r3, r1
 80019f8:	eb64 0402 	sbc.w	r4, r4, r2
 80019fc:	f04f 0100 	mov.w	r1, #0
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	00e2      	lsls	r2, r4, #3
 8001a06:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a0a:	00d9      	lsls	r1, r3, #3
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4614      	mov	r4, r2
 8001a10:	195b      	adds	r3, r3, r5
 8001a12:	eb44 0406 	adc.w	r4, r4, r6
 8001a16:	f04f 0100 	mov.w	r1, #0
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	02a2      	lsls	r2, r4, #10
 8001a20:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a24:	0299      	lsls	r1, r3, #10
 8001a26:	460b      	mov	r3, r1
 8001a28:	4614      	mov	r4, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f04f 0400 	mov.w	r4, #0
 8001a34:	461a      	mov	r2, r3
 8001a36:	4623      	mov	r3, r4
 8001a38:	f7fe fbd2 	bl	80001e0 <__aeabi_uldivmod>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	460c      	mov	r4, r1
 8001a40:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a42:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	0c1b      	lsrs	r3, r3, #16
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5a:	60bb      	str	r3, [r7, #8]
      break;
 8001a5c:	e002      	b.n	8001a64 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a60:	60bb      	str	r3, [r7, #8]
      break;
 8001a62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a64:	68bb      	ldr	r3, [r7, #8]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	00f42400 	.word	0x00f42400
 8001a78:	017d7840 	.word	0x017d7840

08001a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000000 	.word	0x20000000

08001a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a98:	f7ff fff0 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001a9c:	4601      	mov	r1, r0
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	0b5b      	lsrs	r3, r3, #13
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	4a03      	ldr	r2, [pc, #12]	; (8001ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aaa:	5cd3      	ldrb	r3, [r2, r3]
 8001aac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	0800631c 	.word	0x0800631c

08001abc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	220f      	movs	r2, #15
 8001aca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 0203 	and.w	r2, r3, #3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_RCC_GetClockConfig+0x5c>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	08db      	lsrs	r3, r3, #3
 8001af6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <HAL_RCC_GetClockConfig+0x60>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0207 	and.w	r2, r3, #7
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	601a      	str	r2, [r3, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40023c00 	.word	0x40023c00

08001b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e041      	b.n	8001bb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7fe ff84 	bl	8000a54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4610      	mov	r0, r2
 8001b60:	f000 fcac 	bl	80024bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d001      	beq.n	8001bd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e044      	b.n	8001c62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0201 	orr.w	r2, r2, #1
 8001bee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a1e      	ldr	r2, [pc, #120]	; (8001c70 <HAL_TIM_Base_Start_IT+0xb0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d018      	beq.n	8001c2c <HAL_TIM_Base_Start_IT+0x6c>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c02:	d013      	beq.n	8001c2c <HAL_TIM_Base_Start_IT+0x6c>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a1a      	ldr	r2, [pc, #104]	; (8001c74 <HAL_TIM_Base_Start_IT+0xb4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00e      	beq.n	8001c2c <HAL_TIM_Base_Start_IT+0x6c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <HAL_TIM_Base_Start_IT+0xb8>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d009      	beq.n	8001c2c <HAL_TIM_Base_Start_IT+0x6c>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a17      	ldr	r2, [pc, #92]	; (8001c7c <HAL_TIM_Base_Start_IT+0xbc>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d004      	beq.n	8001c2c <HAL_TIM_Base_Start_IT+0x6c>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a16      	ldr	r2, [pc, #88]	; (8001c80 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d111      	bne.n	8001c50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	d010      	beq.n	8001c60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f042 0201 	orr.w	r2, r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c4e:	e007      	b.n	8001c60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40010000 	.word	0x40010000
 8001c74:	40000400 	.word	0x40000400
 8001c78:	40000800 	.word	0x40000800
 8001c7c:	40000c00 	.word	0x40000c00
 8001c80:	40014000 	.word	0x40014000

08001c84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e041      	b.n	8001d1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d106      	bne.n	8001cb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f839 	bl	8001d22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	f000 fbfa 	bl	80024bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d109      	bne.n	8001d5c <HAL_TIM_PWM_Start+0x24>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	bf14      	ite	ne
 8001d54:	2301      	movne	r3, #1
 8001d56:	2300      	moveq	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	e022      	b.n	8001da2 <HAL_TIM_PWM_Start+0x6a>
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d109      	bne.n	8001d76 <HAL_TIM_PWM_Start+0x3e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	bf14      	ite	ne
 8001d6e:	2301      	movne	r3, #1
 8001d70:	2300      	moveq	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	e015      	b.n	8001da2 <HAL_TIM_PWM_Start+0x6a>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d109      	bne.n	8001d90 <HAL_TIM_PWM_Start+0x58>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	bf14      	ite	ne
 8001d88:	2301      	movne	r3, #1
 8001d8a:	2300      	moveq	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	e008      	b.n	8001da2 <HAL_TIM_PWM_Start+0x6a>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	bf14      	ite	ne
 8001d9c:	2301      	movne	r3, #1
 8001d9e:	2300      	moveq	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e068      	b.n	8001e7c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d104      	bne.n	8001dba <HAL_TIM_PWM_Start+0x82>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001db8:	e013      	b.n	8001de2 <HAL_TIM_PWM_Start+0xaa>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d104      	bne.n	8001dca <HAL_TIM_PWM_Start+0x92>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dc8:	e00b      	b.n	8001de2 <HAL_TIM_PWM_Start+0xaa>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d104      	bne.n	8001dda <HAL_TIM_PWM_Start+0xa2>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dd8:	e003      	b.n	8001de2 <HAL_TIM_PWM_Start+0xaa>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2201      	movs	r2, #1
 8001de8:	6839      	ldr	r1, [r7, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 fe0c 	bl	8002a08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a23      	ldr	r2, [pc, #140]	; (8001e84 <HAL_TIM_PWM_Start+0x14c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d107      	bne.n	8001e0a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a1d      	ldr	r2, [pc, #116]	; (8001e84 <HAL_TIM_PWM_Start+0x14c>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d018      	beq.n	8001e46 <HAL_TIM_PWM_Start+0x10e>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e1c:	d013      	beq.n	8001e46 <HAL_TIM_PWM_Start+0x10e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a19      	ldr	r2, [pc, #100]	; (8001e88 <HAL_TIM_PWM_Start+0x150>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d00e      	beq.n	8001e46 <HAL_TIM_PWM_Start+0x10e>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a17      	ldr	r2, [pc, #92]	; (8001e8c <HAL_TIM_PWM_Start+0x154>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d009      	beq.n	8001e46 <HAL_TIM_PWM_Start+0x10e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a16      	ldr	r2, [pc, #88]	; (8001e90 <HAL_TIM_PWM_Start+0x158>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d004      	beq.n	8001e46 <HAL_TIM_PWM_Start+0x10e>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <HAL_TIM_PWM_Start+0x15c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d111      	bne.n	8001e6a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2b06      	cmp	r3, #6
 8001e56:	d010      	beq.n	8001e7a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e68:	e007      	b.n	8001e7a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40010000 	.word	0x40010000
 8001e88:	40000400 	.word	0x40000400
 8001e8c:	40000800 	.word	0x40000800
 8001e90:	40000c00 	.word	0x40000c00
 8001e94:	40014000 	.word	0x40014000

08001e98 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	6839      	ldr	r1, [r7, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 fdac 	bl	8002a08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a29      	ldr	r2, [pc, #164]	; (8001f5c <HAL_TIM_PWM_Stop+0xc4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d117      	bne.n	8001eea <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6a1a      	ldr	r2, [r3, #32]
 8001ec0:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10f      	bne.n	8001eea <HAL_TIM_PWM_Stop+0x52>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6a1a      	ldr	r2, [r3, #32]
 8001ed0:	f240 4344 	movw	r3, #1092	; 0x444
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d107      	bne.n	8001eea <HAL_TIM_PWM_Stop+0x52>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ee8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6a1a      	ldr	r2, [r3, #32]
 8001ef0:	f241 1311 	movw	r3, #4369	; 0x1111
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10f      	bne.n	8001f1a <HAL_TIM_PWM_Stop+0x82>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a1a      	ldr	r2, [r3, #32]
 8001f00:	f240 4344 	movw	r3, #1092	; 0x444
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d107      	bne.n	8001f1a <HAL_TIM_PWM_Stop+0x82>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0201 	bic.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d104      	bne.n	8001f2a <HAL_TIM_PWM_Stop+0x92>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f28:	e013      	b.n	8001f52 <HAL_TIM_PWM_Stop+0xba>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d104      	bne.n	8001f3a <HAL_TIM_PWM_Stop+0xa2>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f38:	e00b      	b.n	8001f52 <HAL_TIM_PWM_Stop+0xba>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d104      	bne.n	8001f4a <HAL_TIM_PWM_Stop+0xb2>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f48:	e003      	b.n	8001f52 <HAL_TIM_PWM_Stop+0xba>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40010000 	.word	0x40010000

08001f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d122      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d11b      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0202 	mvn.w	r2, #2
 8001f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fa6c 	bl	8002480 <HAL_TIM_IC_CaptureCallback>
 8001fa8:	e005      	b.n	8001fb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 fa5e 	bl	800246c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 fa6f 	bl	8002494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	d122      	bne.n	8002010 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d11b      	bne.n	8002010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0204 	mvn.w	r2, #4
 8001fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fa42 	bl	8002480 <HAL_TIM_IC_CaptureCallback>
 8001ffc:	e005      	b.n	800200a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fa34 	bl	800246c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 fa45 	bl	8002494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b08      	cmp	r3, #8
 800201c:	d122      	bne.n	8002064 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b08      	cmp	r3, #8
 800202a:	d11b      	bne.n	8002064 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0208 	mvn.w	r2, #8
 8002034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2204      	movs	r2, #4
 800203a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fa18 	bl	8002480 <HAL_TIM_IC_CaptureCallback>
 8002050:	e005      	b.n	800205e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fa0a 	bl	800246c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 fa1b 	bl	8002494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0310 	and.w	r3, r3, #16
 800206e:	2b10      	cmp	r3, #16
 8002070:	d122      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	2b10      	cmp	r3, #16
 800207e:	d11b      	bne.n	80020b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f06f 0210 	mvn.w	r2, #16
 8002088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2208      	movs	r2, #8
 800208e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f9ee 	bl	8002480 <HAL_TIM_IC_CaptureCallback>
 80020a4:	e005      	b.n	80020b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f9e0 	bl	800246c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f9f1 	bl	8002494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d10e      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d107      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0201 	mvn.w	r2, #1
 80020dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7fe fc76 	bl	80009d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	2b80      	cmp	r3, #128	; 0x80
 80020f0:	d10e      	bne.n	8002110 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020fc:	2b80      	cmp	r3, #128	; 0x80
 80020fe:	d107      	bne.n	8002110 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 fd1a 	bl	8002b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211a:	2b40      	cmp	r3, #64	; 0x40
 800211c:	d10e      	bne.n	800213c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002128:	2b40      	cmp	r3, #64	; 0x40
 800212a:	d107      	bne.n	800213c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f9b6 	bl	80024a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b20      	cmp	r3, #32
 8002148:	d10e      	bne.n	8002168 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b20      	cmp	r3, #32
 8002156:	d107      	bne.n	8002168 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0220 	mvn.w	r2, #32
 8002160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fce4 	bl	8002b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800218a:	2302      	movs	r3, #2
 800218c:	e0ae      	b.n	80022ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b0c      	cmp	r3, #12
 800219a:	f200 809f 	bhi.w	80022dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	080021d9 	.word	0x080021d9
 80021a8:	080022dd 	.word	0x080022dd
 80021ac:	080022dd 	.word	0x080022dd
 80021b0:	080022dd 	.word	0x080022dd
 80021b4:	08002219 	.word	0x08002219
 80021b8:	080022dd 	.word	0x080022dd
 80021bc:	080022dd 	.word	0x080022dd
 80021c0:	080022dd 	.word	0x080022dd
 80021c4:	0800225b 	.word	0x0800225b
 80021c8:	080022dd 	.word	0x080022dd
 80021cc:	080022dd 	.word	0x080022dd
 80021d0:	080022dd 	.word	0x080022dd
 80021d4:	0800229b 	.word	0x0800229b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f9ec 	bl	80025bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0208 	orr.w	r2, r2, #8
 80021f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0204 	bic.w	r2, r2, #4
 8002202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6999      	ldr	r1, [r3, #24]
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	619a      	str	r2, [r3, #24]
      break;
 8002216:	e064      	b.n	80022e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fa32 	bl	8002688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	699a      	ldr	r2, [r3, #24]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6999      	ldr	r1, [r3, #24]
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	021a      	lsls	r2, r3, #8
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	619a      	str	r2, [r3, #24]
      break;
 8002258:	e043      	b.n	80022e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68b9      	ldr	r1, [r7, #8]
 8002260:	4618      	mov	r0, r3
 8002262:	f000 fa7d 	bl	8002760 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	69da      	ldr	r2, [r3, #28]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0208 	orr.w	r2, r2, #8
 8002274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	69da      	ldr	r2, [r3, #28]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0204 	bic.w	r2, r2, #4
 8002284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	69d9      	ldr	r1, [r3, #28]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	61da      	str	r2, [r3, #28]
      break;
 8002298:	e023      	b.n	80022e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68b9      	ldr	r1, [r7, #8]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 fac7 	bl	8002834 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	69da      	ldr	r2, [r3, #28]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	69da      	ldr	r2, [r3, #28]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	69d9      	ldr	r1, [r3, #28]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	021a      	lsls	r2, r3, #8
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	61da      	str	r2, [r3, #28]
      break;
 80022da:	e002      	b.n	80022e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	75fb      	strb	r3, [r7, #23]
      break;
 80022e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_TIM_ConfigClockSource+0x1c>
 800230c:	2302      	movs	r3, #2
 800230e:	e0a9      	b.n	8002464 <HAL_TIM_ConfigClockSource+0x170>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800232e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b40      	cmp	r3, #64	; 0x40
 8002346:	d067      	beq.n	8002418 <HAL_TIM_ConfigClockSource+0x124>
 8002348:	2b40      	cmp	r3, #64	; 0x40
 800234a:	d80b      	bhi.n	8002364 <HAL_TIM_ConfigClockSource+0x70>
 800234c:	2b10      	cmp	r3, #16
 800234e:	d073      	beq.n	8002438 <HAL_TIM_ConfigClockSource+0x144>
 8002350:	2b10      	cmp	r3, #16
 8002352:	d802      	bhi.n	800235a <HAL_TIM_ConfigClockSource+0x66>
 8002354:	2b00      	cmp	r3, #0
 8002356:	d06f      	beq.n	8002438 <HAL_TIM_ConfigClockSource+0x144>
 8002358:	e077      	b.n	800244a <HAL_TIM_ConfigClockSource+0x156>
 800235a:	2b20      	cmp	r3, #32
 800235c:	d06c      	beq.n	8002438 <HAL_TIM_ConfigClockSource+0x144>
 800235e:	2b30      	cmp	r3, #48	; 0x30
 8002360:	d06a      	beq.n	8002438 <HAL_TIM_ConfigClockSource+0x144>
 8002362:	e072      	b.n	800244a <HAL_TIM_ConfigClockSource+0x156>
 8002364:	2b70      	cmp	r3, #112	; 0x70
 8002366:	d00d      	beq.n	8002384 <HAL_TIM_ConfigClockSource+0x90>
 8002368:	2b70      	cmp	r3, #112	; 0x70
 800236a:	d804      	bhi.n	8002376 <HAL_TIM_ConfigClockSource+0x82>
 800236c:	2b50      	cmp	r3, #80	; 0x50
 800236e:	d033      	beq.n	80023d8 <HAL_TIM_ConfigClockSource+0xe4>
 8002370:	2b60      	cmp	r3, #96	; 0x60
 8002372:	d041      	beq.n	80023f8 <HAL_TIM_ConfigClockSource+0x104>
 8002374:	e069      	b.n	800244a <HAL_TIM_ConfigClockSource+0x156>
 8002376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237a:	d069      	beq.n	8002450 <HAL_TIM_ConfigClockSource+0x15c>
 800237c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002380:	d017      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0xbe>
 8002382:	e062      	b.n	800244a <HAL_TIM_ConfigClockSource+0x156>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	6899      	ldr	r1, [r3, #8]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f000 fb18 	bl	80029c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023a6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	609a      	str	r2, [r3, #8]
      break;
 80023b0:	e04f      	b.n	8002452 <HAL_TIM_ConfigClockSource+0x15e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6899      	ldr	r1, [r3, #8]
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f000 fb01 	bl	80029c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023d4:	609a      	str	r2, [r3, #8]
      break;
 80023d6:	e03c      	b.n	8002452 <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	461a      	mov	r2, r3
 80023e6:	f000 fa75 	bl	80028d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2150      	movs	r1, #80	; 0x50
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 face 	bl	8002992 <TIM_ITRx_SetConfig>
      break;
 80023f6:	e02c      	b.n	8002452 <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	6859      	ldr	r1, [r3, #4]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	461a      	mov	r2, r3
 8002406:	f000 fa94 	bl	8002932 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2160      	movs	r1, #96	; 0x60
 8002410:	4618      	mov	r0, r3
 8002412:	f000 fabe 	bl	8002992 <TIM_ITRx_SetConfig>
      break;
 8002416:	e01c      	b.n	8002452 <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	461a      	mov	r2, r3
 8002426:	f000 fa55 	bl	80028d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2140      	movs	r1, #64	; 0x40
 8002430:	4618      	mov	r0, r3
 8002432:	f000 faae 	bl	8002992 <TIM_ITRx_SetConfig>
      break;
 8002436:	e00c      	b.n	8002452 <HAL_TIM_ConfigClockSource+0x15e>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4619      	mov	r1, r3
 8002442:	4610      	mov	r0, r2
 8002444:	f000 faa5 	bl	8002992 <TIM_ITRx_SetConfig>
      break;
 8002448:	e003      	b.n	8002452 <HAL_TIM_ConfigClockSource+0x15e>
    }

    default:
      status = HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
      break;
 800244e:	e000      	b.n	8002452 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002450:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002462:	7bfb      	ldrb	r3, [r7, #15]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a34      	ldr	r2, [pc, #208]	; (80025a0 <TIM_Base_SetConfig+0xe4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00f      	beq.n	80024f4 <TIM_Base_SetConfig+0x38>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024da:	d00b      	beq.n	80024f4 <TIM_Base_SetConfig+0x38>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a31      	ldr	r2, [pc, #196]	; (80025a4 <TIM_Base_SetConfig+0xe8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d007      	beq.n	80024f4 <TIM_Base_SetConfig+0x38>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a30      	ldr	r2, [pc, #192]	; (80025a8 <TIM_Base_SetConfig+0xec>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d003      	beq.n	80024f4 <TIM_Base_SetConfig+0x38>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a2f      	ldr	r2, [pc, #188]	; (80025ac <TIM_Base_SetConfig+0xf0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d108      	bne.n	8002506 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a25      	ldr	r2, [pc, #148]	; (80025a0 <TIM_Base_SetConfig+0xe4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d01b      	beq.n	8002546 <TIM_Base_SetConfig+0x8a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002514:	d017      	beq.n	8002546 <TIM_Base_SetConfig+0x8a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a22      	ldr	r2, [pc, #136]	; (80025a4 <TIM_Base_SetConfig+0xe8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <TIM_Base_SetConfig+0x8a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a21      	ldr	r2, [pc, #132]	; (80025a8 <TIM_Base_SetConfig+0xec>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00f      	beq.n	8002546 <TIM_Base_SetConfig+0x8a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a20      	ldr	r2, [pc, #128]	; (80025ac <TIM_Base_SetConfig+0xf0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00b      	beq.n	8002546 <TIM_Base_SetConfig+0x8a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a1f      	ldr	r2, [pc, #124]	; (80025b0 <TIM_Base_SetConfig+0xf4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d007      	beq.n	8002546 <TIM_Base_SetConfig+0x8a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a1e      	ldr	r2, [pc, #120]	; (80025b4 <TIM_Base_SetConfig+0xf8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d003      	beq.n	8002546 <TIM_Base_SetConfig+0x8a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a1d      	ldr	r2, [pc, #116]	; (80025b8 <TIM_Base_SetConfig+0xfc>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d108      	bne.n	8002558 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800254c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	4313      	orrs	r3, r2
 8002564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <TIM_Base_SetConfig+0xe4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d103      	bne.n	800258c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	615a      	str	r2, [r3, #20]
}
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40010000 	.word	0x40010000
 80025a4:	40000400 	.word	0x40000400
 80025a8:	40000800 	.word	0x40000800
 80025ac:	40000c00 	.word	0x40000c00
 80025b0:	40014000 	.word	0x40014000
 80025b4:	40014400 	.word	0x40014400
 80025b8:	40014800 	.word	0x40014800

080025bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	f023 0201 	bic.w	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f023 0303 	bic.w	r3, r3, #3
 80025f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f023 0302 	bic.w	r3, r3, #2
 8002604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a1c      	ldr	r2, [pc, #112]	; (8002684 <TIM_OC1_SetConfig+0xc8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d10c      	bne.n	8002632 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f023 0308 	bic.w	r3, r3, #8
 800261e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	4313      	orrs	r3, r2
 8002628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	f023 0304 	bic.w	r3, r3, #4
 8002630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a13      	ldr	r2, [pc, #76]	; (8002684 <TIM_OC1_SetConfig+0xc8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d111      	bne.n	800265e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	621a      	str	r2, [r3, #32]
}
 8002678:	bf00      	nop
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	40010000 	.word	0x40010000

08002688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002688:	b480      	push	{r7}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	f023 0210 	bic.w	r2, r3, #16
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	f023 0320 	bic.w	r3, r3, #32
 80026d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a1e      	ldr	r2, [pc, #120]	; (800275c <TIM_OC2_SetConfig+0xd4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d10d      	bne.n	8002704 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002702:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a15      	ldr	r2, [pc, #84]	; (800275c <TIM_OC2_SetConfig+0xd4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d113      	bne.n	8002734 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002712:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800271a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	621a      	str	r2, [r3, #32]
}
 800274e:	bf00      	nop
 8002750:	371c      	adds	r7, #28
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40010000 	.word	0x40010000

08002760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0303 	bic.w	r3, r3, #3
 8002796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <TIM_OC3_SetConfig+0xd0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d10d      	bne.n	80027da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a14      	ldr	r2, [pc, #80]	; (8002830 <TIM_OC3_SetConfig+0xd0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d113      	bne.n	800280a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	621a      	str	r2, [r3, #32]
}
 8002824:	bf00      	nop
 8002826:	371c      	adds	r7, #28
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	40010000 	.word	0x40010000

08002834 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002834:	b480      	push	{r7}
 8002836:	b087      	sub	sp, #28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800286a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800287e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	031b      	lsls	r3, r3, #12
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a10      	ldr	r2, [pc, #64]	; (80028d0 <TIM_OC4_SetConfig+0x9c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d109      	bne.n	80028a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800289a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	019b      	lsls	r3, r3, #6
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	621a      	str	r2, [r3, #32]
}
 80028c2:	bf00      	nop
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40010000 	.word	0x40010000

080028d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	f023 0201 	bic.w	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f023 030a 	bic.w	r3, r3, #10
 8002910:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	621a      	str	r2, [r3, #32]
}
 8002926:	bf00      	nop
 8002928:	371c      	adds	r7, #28
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002932:	b480      	push	{r7}
 8002934:	b087      	sub	sp, #28
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f023 0210 	bic.w	r2, r3, #16
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800295c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	031b      	lsls	r3, r3, #12
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800296e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	621a      	str	r2, [r3, #32]
}
 8002986:	bf00      	nop
 8002988:	371c      	adds	r7, #28
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002992:	b480      	push	{r7}
 8002994:	b085      	sub	sp, #20
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f043 0307 	orr.w	r3, r3, #7
 80029b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	609a      	str	r2, [r3, #8]
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	021a      	lsls	r2, r3, #8
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	609a      	str	r2, [r3, #8]
}
 80029fc:	bf00      	nop
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f003 031f 	and.w	r3, r3, #31
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6a1a      	ldr	r2, [r3, #32]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a1a      	ldr	r2, [r3, #32]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a40:	431a      	orrs	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	621a      	str	r2, [r3, #32]
}
 8002a46:	bf00      	nop
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e050      	b.n	8002b0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1c      	ldr	r2, [pc, #112]	; (8002b1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d018      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab8:	d013      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00e      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a16      	ldr	r2, [pc, #88]	; (8002b24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d009      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a15      	ldr	r2, [pc, #84]	; (8002b28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d004      	beq.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a13      	ldr	r2, [pc, #76]	; (8002b2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d10c      	bne.n	8002afc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40010000 	.word	0x40010000
 8002b20:	40000400 	.word	0x40000400
 8002b24:	40000800 	.word	0x40000800
 8002b28:	40000c00 	.word	0x40000c00
 8002b2c:	40014000 	.word	0x40014000

08002b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <__NVIC_SetPriority>:
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	6039      	str	r1, [r7, #0]
 8002b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	db0a      	blt.n	8002b82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	490c      	ldr	r1, [pc, #48]	; (8002ba4 <__NVIC_SetPriority+0x4c>)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	0112      	lsls	r2, r2, #4
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b80:	e00a      	b.n	8002b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	4908      	ldr	r1, [pc, #32]	; (8002ba8 <__NVIC_SetPriority+0x50>)
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	3b04      	subs	r3, #4
 8002b90:	0112      	lsls	r2, r2, #4
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	440b      	add	r3, r1
 8002b96:	761a      	strb	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000e100 	.word	0xe000e100
 8002ba8:	e000ed00 	.word	0xe000ed00

08002bac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <SysTick_Handler+0x1c>)
 8002bb2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002bb4:	f002 f936 	bl	8004e24 <xTaskGetSchedulerState>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d001      	beq.n	8002bc2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002bbe:	f003 f803 	bl	8005bc8 <xPortSysTickHandler>
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	e000e010 	.word	0xe000e010

08002bcc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	f06f 0004 	mvn.w	r0, #4
 8002bd6:	f7ff ffbf 	bl	8002b58 <__NVIC_SetPriority>
#endif
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002be6:	f3ef 8305 	mrs	r3, IPSR
 8002bea:	603b      	str	r3, [r7, #0]
  return(result);
 8002bec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002bf2:	f06f 0305 	mvn.w	r3, #5
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	e00c      	b.n	8002c14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <osKernelInitialize+0x44>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d105      	bne.n	8002c0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002c02:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <osKernelInitialize+0x44>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	607b      	str	r3, [r7, #4]
 8002c0c:	e002      	b.n	8002c14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c14:	687b      	ldr	r3, [r7, #4]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	200000a4 	.word	0x200000a4

08002c28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c2e:	f3ef 8305 	mrs	r3, IPSR
 8002c32:	603b      	str	r3, [r7, #0]
  return(result);
 8002c34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002c3a:	f06f 0305 	mvn.w	r3, #5
 8002c3e:	607b      	str	r3, [r7, #4]
 8002c40:	e010      	b.n	8002c64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <osKernelStart+0x48>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d109      	bne.n	8002c5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002c4a:	f7ff ffbf 	bl	8002bcc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <osKernelStart+0x48>)
 8002c50:	2202      	movs	r2, #2
 8002c52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002c54:	f001 fc98 	bl	8004588 <vTaskStartScheduler>
      stat = osOK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	607b      	str	r3, [r7, #4]
 8002c5c:	e002      	b.n	8002c64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002c64:	687b      	ldr	r3, [r7, #4]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200000a4 	.word	0x200000a4

08002c74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08e      	sub	sp, #56	; 0x38
 8002c78:	af04      	add	r7, sp, #16
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c84:	f3ef 8305 	mrs	r3, IPSR
 8002c88:	617b      	str	r3, [r7, #20]
  return(result);
 8002c8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d17e      	bne.n	8002d8e <osThreadNew+0x11a>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d07b      	beq.n	8002d8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002c9a:	2318      	movs	r3, #24
 8002c9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d045      	beq.n	8002d3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <osThreadNew+0x48>
        name = attr->name;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <osThreadNew+0x6e>
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b38      	cmp	r3, #56	; 0x38
 8002cd4:	d805      	bhi.n	8002ce2 <osThreadNew+0x6e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <osThreadNew+0x72>
        return (NULL);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e054      	b.n	8002d90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00e      	beq.n	8002d1c <osThreadNew+0xa8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2bbb      	cmp	r3, #187	; 0xbb
 8002d04:	d90a      	bls.n	8002d1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d006      	beq.n	8002d1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <osThreadNew+0xa8>
        mem = 1;
 8002d16:	2301      	movs	r3, #1
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	e010      	b.n	8002d3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10c      	bne.n	8002d3e <osThreadNew+0xca>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d108      	bne.n	8002d3e <osThreadNew+0xca>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d104      	bne.n	8002d3e <osThreadNew+0xca>
          mem = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	e001      	b.n	8002d3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d110      	bne.n	8002d66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002d4c:	9202      	str	r2, [sp, #8]
 8002d4e:	9301      	str	r3, [sp, #4]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	6a3a      	ldr	r2, [r7, #32]
 8002d58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f001 fa2a 	bl	80041b4 <xTaskCreateStatic>
 8002d60:	4603      	mov	r3, r0
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	e013      	b.n	8002d8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d110      	bne.n	8002d8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	f107 0310 	add.w	r3, r7, #16
 8002d74:	9301      	str	r3, [sp, #4]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f001 fa72 	bl	8004268 <xTaskCreate>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d001      	beq.n	8002d8e <osThreadNew+0x11a>
            hTask = NULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002d8e:	693b      	ldr	r3, [r7, #16]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3728      	adds	r7, #40	; 0x28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002da0:	f3ef 8305 	mrs	r3, IPSR
 8002da4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002da6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <osDelay+0x1c>
    stat = osErrorISR;
 8002dac:	f06f 0305 	mvn.w	r3, #5
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	e007      	b.n	8002dc4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f001 fbae 	bl	8004520 <vTaskDelay>
    }
  }

  return (stat);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b08a      	sub	sp, #40	; 0x28
 8002dd2:	af02      	add	r7, sp, #8
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	60b9      	str	r1, [r7, #8]
 8002dd8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dde:	f3ef 8305 	mrs	r3, IPSR
 8002de2:	613b      	str	r3, [r7, #16]
  return(result);
 8002de4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d176      	bne.n	8002ed8 <osSemaphoreNew+0x10a>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d073      	beq.n	8002ed8 <osSemaphoreNew+0x10a>
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d86f      	bhi.n	8002ed8 <osSemaphoreNew+0x10a>
    mem = -1;
 8002df8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d015      	beq.n	8002e30 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d006      	beq.n	8002e1a <osSemaphoreNew+0x4c>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b4f      	cmp	r3, #79	; 0x4f
 8002e12:	d902      	bls.n	8002e1a <osSemaphoreNew+0x4c>
        mem = 1;
 8002e14:	2301      	movs	r3, #1
 8002e16:	61bb      	str	r3, [r7, #24]
 8002e18:	e00c      	b.n	8002e34 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d108      	bne.n	8002e34 <osSemaphoreNew+0x66>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d104      	bne.n	8002e34 <osSemaphoreNew+0x66>
          mem = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	e001      	b.n	8002e34 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3a:	d04d      	beq.n	8002ed8 <osSemaphoreNew+0x10a>
      if (max_count == 1U) {
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d129      	bne.n	8002e96 <osSemaphoreNew+0xc8>
        if (mem == 1) {
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d10b      	bne.n	8002e60 <osSemaphoreNew+0x92>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	2200      	movs	r2, #0
 8002e54:	2100      	movs	r1, #0
 8002e56:	2001      	movs	r0, #1
 8002e58:	f000 fa2a 	bl	80032b0 <xQueueGenericCreateStatic>
 8002e5c:	61f8      	str	r0, [r7, #28]
 8002e5e:	e005      	b.n	8002e6c <osSemaphoreNew+0x9e>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002e60:	2203      	movs	r2, #3
 8002e62:	2100      	movs	r1, #0
 8002e64:	2001      	movs	r0, #1
 8002e66:	f000 fa96 	bl	8003396 <xQueueGenericCreate>
 8002e6a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d022      	beq.n	8002eb8 <osSemaphoreNew+0xea>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d01f      	beq.n	8002eb8 <osSemaphoreNew+0xea>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002e78:	2300      	movs	r3, #0
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	69f8      	ldr	r0, [r7, #28]
 8002e80:	f000 fb4c 	bl	800351c <xQueueGenericSend>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d016      	beq.n	8002eb8 <osSemaphoreNew+0xea>
            vSemaphoreDelete (hSemaphore);
 8002e8a:	69f8      	ldr	r0, [r7, #28]
 8002e8c:	f000 ffc1 	bl	8003e12 <vQueueDelete>
            hSemaphore = NULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61fb      	str	r3, [r7, #28]
 8002e94:	e010      	b.n	8002eb8 <osSemaphoreNew+0xea>
          }
        }
      }
      else {
        if (mem == 1) {
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d108      	bne.n	8002eae <osSemaphoreNew+0xe0>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	68b9      	ldr	r1, [r7, #8]
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fad2 	bl	800344e <xQueueCreateCountingSemaphoreStatic>
 8002eaa:	61f8      	str	r0, [r7, #28]
 8002eac:	e004      	b.n	8002eb8 <osSemaphoreNew+0xea>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002eae:	68b9      	ldr	r1, [r7, #8]
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 fb01 	bl	80034b8 <xQueueCreateCountingSemaphore>
 8002eb6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d00c      	beq.n	8002ed8 <osSemaphoreNew+0x10a>
        if (attr != NULL) {
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <osSemaphoreNew+0xfe>
          name = attr->name;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	e001      	b.n	8002ed0 <osSemaphoreNew+0x102>
        } else {
          name = NULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002ed0:	6979      	ldr	r1, [r7, #20]
 8002ed2:	69f8      	ldr	r0, [r7, #28]
 8002ed4:	f001 f8e8 	bl	80040a8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002ed8:	69fb      	ldr	r3, [r7, #28]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d103      	bne.n	8002f04 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002efc:	f06f 0303 	mvn.w	r3, #3
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	e039      	b.n	8002f78 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f04:	f3ef 8305 	mrs	r3, IPSR
 8002f08:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d022      	beq.n	8002f56 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8002f16:	f06f 0303 	mvn.w	r3, #3
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	e02c      	b.n	8002f78 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002f22:	f107 0308 	add.w	r3, r7, #8
 8002f26:	461a      	mov	r2, r3
 8002f28:	2100      	movs	r1, #0
 8002f2a:	6938      	ldr	r0, [r7, #16]
 8002f2c:	f000 fef4 	bl	8003d18 <xQueueReceiveFromISR>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d003      	beq.n	8002f3e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8002f36:	f06f 0302 	mvn.w	r3, #2
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	e01c      	b.n	8002f78 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d019      	beq.n	8002f78 <osSemaphoreAcquire+0x94>
 8002f44:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <osSemaphoreAcquire+0xa0>)
 8002f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	f3bf 8f6f 	isb	sy
 8002f54:	e010      	b.n	8002f78 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002f56:	6839      	ldr	r1, [r7, #0]
 8002f58:	6938      	ldr	r0, [r7, #16]
 8002f5a:	f000 fdd5 	bl	8003b08 <xQueueSemaphoreTake>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d009      	beq.n	8002f78 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8002f6a:	f06f 0301 	mvn.w	r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	e002      	b.n	8002f78 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002f72:	f06f 0302 	mvn.w	r3, #2
 8002f76:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002f78:	697b      	ldr	r3, [r7, #20]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	e000ed04 	.word	0xe000ed04

08002f88 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d103      	bne.n	8002fa6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002f9e:	f06f 0303 	mvn.w	r3, #3
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	e02c      	b.n	8003000 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fa6:	f3ef 8305 	mrs	r3, IPSR
 8002faa:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d01a      	beq.n	8002fe8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002fb6:	f107 0308 	add.w	r3, r7, #8
 8002fba:	4619      	mov	r1, r3
 8002fbc:	6938      	ldr	r0, [r7, #16]
 8002fbe:	f000 fc3e 	bl	800383e <xQueueGiveFromISR>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d003      	beq.n	8002fd0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002fc8:	f06f 0302 	mvn.w	r3, #2
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	e017      	b.n	8003000 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d014      	beq.n	8003000 <osSemaphoreRelease+0x78>
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	; (800300c <osSemaphoreRelease+0x84>)
 8002fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	e00b      	b.n	8003000 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002fe8:	2300      	movs	r3, #0
 8002fea:	2200      	movs	r2, #0
 8002fec:	2100      	movs	r1, #0
 8002fee:	6938      	ldr	r0, [r7, #16]
 8002ff0:	f000 fa94 	bl	800351c <xQueueGenericSend>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d002      	beq.n	8003000 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8002ffa:	f06f 0302 	mvn.w	r3, #2
 8002ffe:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003000:	697b      	ldr	r3, [r7, #20]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	e000ed04 	.word	0xe000ed04

08003010 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a07      	ldr	r2, [pc, #28]	; (800303c <vApplicationGetIdleTaskMemory+0x2c>)
 8003020:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	4a06      	ldr	r2, [pc, #24]	; (8003040 <vApplicationGetIdleTaskMemory+0x30>)
 8003026:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2280      	movs	r2, #128	; 0x80
 800302c:	601a      	str	r2, [r3, #0]
}
 800302e:	bf00      	nop
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	200000a8 	.word	0x200000a8
 8003040:	20000164 	.word	0x20000164

08003044 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a07      	ldr	r2, [pc, #28]	; (8003070 <vApplicationGetTimerTaskMemory+0x2c>)
 8003054:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4a06      	ldr	r2, [pc, #24]	; (8003074 <vApplicationGetTimerTaskMemory+0x30>)
 800305a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003062:	601a      	str	r2, [r3, #0]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	20000364 	.word	0x20000364
 8003074:	20000420 	.word	0x20000420

08003078 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f103 0208 	add.w	r2, r3, #8
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f04f 32ff 	mov.w	r2, #4294967295
 8003090:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f103 0208 	add.w	r2, r3, #8
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f103 0208 	add.w	r2, r3, #8
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030d2:	b480      	push	{r7}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	601a      	str	r2, [r3, #0]
}
 800310e:	bf00      	nop
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800311a:	b480      	push	{r7}
 800311c:	b085      	sub	sp, #20
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d103      	bne.n	800313a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e00c      	b.n	8003154 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3308      	adds	r3, #8
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	e002      	b.n	8003148 <vListInsert+0x2e>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	429a      	cmp	r2, r3
 8003152:	d2f6      	bcs.n	8003142 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	601a      	str	r2, [r3, #0]
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6892      	ldr	r2, [r2, #8]
 80031a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6852      	ldr	r2, [r2, #4]
 80031ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d103      	bne.n	80031c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	1e5a      	subs	r2, r3, #1
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d109      	bne.n	8003208 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	60bb      	str	r3, [r7, #8]
 8003206:	e7fe      	b.n	8003206 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003208:	f002 fc50 	bl	8005aac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003214:	68f9      	ldr	r1, [r7, #12]
 8003216:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	441a      	add	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003238:	3b01      	subs	r3, #1
 800323a:	68f9      	ldr	r1, [r7, #12]
 800323c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	441a      	add	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	22ff      	movs	r2, #255	; 0xff
 800324c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	22ff      	movs	r2, #255	; 0xff
 8003254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d114      	bne.n	8003288 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01a      	beq.n	800329c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	3310      	adds	r3, #16
 800326a:	4618      	mov	r0, r3
 800326c:	f001 fc1e 	bl	8004aac <xTaskRemoveFromEventList>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d012      	beq.n	800329c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <xQueueGenericReset+0xcc>)
 8003278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	e009      	b.n	800329c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3310      	adds	r3, #16
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fef3 	bl	8003078 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	3324      	adds	r3, #36	; 0x24
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff feee 	bl	8003078 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800329c:	f002 fc34 	bl	8005b08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80032a0:	2301      	movs	r3, #1
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	e000ed04 	.word	0xe000ed04

080032b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08e      	sub	sp, #56	; 0x38
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
 80032bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d109      	bne.n	80032d8 <xQueueGenericCreateStatic+0x28>
 80032c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032d6:	e7fe      	b.n	80032d6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <xQueueGenericCreateStatic+0x42>
 80032de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	f3bf 8f6f 	isb	sy
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
 80032f0:	e7fe      	b.n	80032f0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <xQueueGenericCreateStatic+0x4e>
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <xQueueGenericCreateStatic+0x52>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <xQueueGenericCreateStatic+0x54>
 8003302:	2300      	movs	r3, #0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <xQueueGenericCreateStatic+0x6c>
 8003308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	623b      	str	r3, [r7, #32]
 800331a:	e7fe      	b.n	800331a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d102      	bne.n	8003328 <xQueueGenericCreateStatic+0x78>
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <xQueueGenericCreateStatic+0x7c>
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <xQueueGenericCreateStatic+0x7e>
 800332c:	2300      	movs	r3, #0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <xQueueGenericCreateStatic+0x96>
 8003332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	61fb      	str	r3, [r7, #28]
 8003344:	e7fe      	b.n	8003344 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003346:	2350      	movs	r3, #80	; 0x50
 8003348:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b50      	cmp	r3, #80	; 0x50
 800334e:	d009      	beq.n	8003364 <xQueueGenericCreateStatic+0xb4>
 8003350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003354:	f383 8811 	msr	BASEPRI, r3
 8003358:	f3bf 8f6f 	isb	sy
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	e7fe      	b.n	8003362 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003364:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800336a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00d      	beq.n	800338c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003378:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337e:	9300      	str	r3, [sp, #0]
 8003380:	4613      	mov	r3, r2
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 f83e 	bl	8003408 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800338e:	4618      	mov	r0, r3
 8003390:	3730      	adds	r7, #48	; 0x30
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003396:	b580      	push	{r7, lr}
 8003398:	b08a      	sub	sp, #40	; 0x28
 800339a:	af02      	add	r7, sp, #8
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	4613      	mov	r3, r2
 80033a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d109      	bne.n	80033be <xQueueGenericCreate+0x28>
 80033aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ae:	f383 8811 	msr	BASEPRI, r3
 80033b2:	f3bf 8f6f 	isb	sy
 80033b6:	f3bf 8f4f 	dsb	sy
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	e7fe      	b.n	80033bc <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	3350      	adds	r3, #80	; 0x50
 80033cc:	4618      	mov	r0, r3
 80033ce:	f002 fc87 	bl	8005ce0 <pvPortMalloc>
 80033d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d011      	beq.n	80033fe <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	3350      	adds	r3, #80	; 0x50
 80033e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033ec:	79fa      	ldrb	r2, [r7, #7]
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	4613      	mov	r3, r2
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f805 	bl	8003408 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033fe:	69bb      	ldr	r3, [r7, #24]
	}
 8003400:	4618      	mov	r0, r3
 8003402:	3720      	adds	r7, #32
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d103      	bne.n	8003424 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	e002      	b.n	800342a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003436:	2101      	movs	r1, #1
 8003438:	69b8      	ldr	r0, [r7, #24]
 800343a:	f7ff fed1 	bl	80031e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800344e:	b580      	push	{r7, lr}
 8003450:	b08a      	sub	sp, #40	; 0x28
 8003452:	af02      	add	r7, sp, #8
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d109      	bne.n	8003474 <xQueueCreateCountingSemaphoreStatic+0x26>
 8003460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	e7fe      	b.n	8003472 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	429a      	cmp	r2, r3
 800347a:	d909      	bls.n	8003490 <xQueueCreateCountingSemaphoreStatic+0x42>
 800347c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003480:	f383 8811 	msr	BASEPRI, r3
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	e7fe      	b.n	800348e <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003490:	2302      	movs	r3, #2
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	2100      	movs	r1, #0
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f7ff ff08 	bl	80032b0 <xQueueGenericCreateStatic>
 80034a0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80034ae:	69fb      	ldr	r3, [r7, #28]
	}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3720      	adds	r7, #32
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d109      	bne.n	80034dc <xQueueCreateCountingSemaphore+0x24>
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	e7fe      	b.n	80034da <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d909      	bls.n	80034f8 <xQueueCreateCountingSemaphore+0x40>
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	e7fe      	b.n	80034f6 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80034f8:	2202      	movs	r2, #2
 80034fa:	2100      	movs	r1, #0
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f7ff ff4a 	bl	8003396 <xQueueGenericCreate>
 8003502:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003510:	697b      	ldr	r3, [r7, #20]
	}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08e      	sub	sp, #56	; 0x38
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800352a:	2300      	movs	r3, #0
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <xQueueGenericSend+0x30>
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
 800354a:	e7fe      	b.n	800354a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d103      	bne.n	800355a <xQueueGenericSend+0x3e>
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <xQueueGenericSend+0x42>
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <xQueueGenericSend+0x44>
 800355e:	2300      	movs	r3, #0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d109      	bne.n	8003578 <xQueueGenericSend+0x5c>
 8003564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
 8003576:	e7fe      	b.n	8003576 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d103      	bne.n	8003586 <xQueueGenericSend+0x6a>
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <xQueueGenericSend+0x6e>
 8003586:	2301      	movs	r3, #1
 8003588:	e000      	b.n	800358c <xQueueGenericSend+0x70>
 800358a:	2300      	movs	r3, #0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d109      	bne.n	80035a4 <xQueueGenericSend+0x88>
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	623b      	str	r3, [r7, #32]
 80035a2:	e7fe      	b.n	80035a2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035a4:	f001 fc3e 	bl	8004e24 <xTaskGetSchedulerState>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d102      	bne.n	80035b4 <xQueueGenericSend+0x98>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <xQueueGenericSend+0x9c>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <xQueueGenericSend+0x9e>
 80035b8:	2300      	movs	r3, #0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <xQueueGenericSend+0xb6>
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	61fb      	str	r3, [r7, #28]
 80035d0:	e7fe      	b.n	80035d0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035d2:	f002 fa6b 	bl	8005aac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035de:	429a      	cmp	r2, r3
 80035e0:	d302      	bcc.n	80035e8 <xQueueGenericSend+0xcc>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d129      	bne.n	800363c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035ee:	f000 fc4a 	bl	8003e86 <prvCopyDataToQueue>
 80035f2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d010      	beq.n	800361e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fe:	3324      	adds	r3, #36	; 0x24
 8003600:	4618      	mov	r0, r3
 8003602:	f001 fa53 	bl	8004aac <xTaskRemoveFromEventList>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800360c:	4b3f      	ldr	r3, [pc, #252]	; (800370c <xQueueGenericSend+0x1f0>)
 800360e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	e00a      	b.n	8003634 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003624:	4b39      	ldr	r3, [pc, #228]	; (800370c <xQueueGenericSend+0x1f0>)
 8003626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003634:	f002 fa68 	bl	8005b08 <vPortExitCritical>
				return pdPASS;
 8003638:	2301      	movs	r3, #1
 800363a:	e063      	b.n	8003704 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d103      	bne.n	800364a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003642:	f002 fa61 	bl	8005b08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003646:	2300      	movs	r3, #0
 8003648:	e05c      	b.n	8003704 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800364a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364c:	2b00      	cmp	r3, #0
 800364e:	d106      	bne.n	800365e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003650:	f107 0314 	add.w	r3, r7, #20
 8003654:	4618      	mov	r0, r3
 8003656:	f001 fa8b 	bl	8004b70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800365a:	2301      	movs	r3, #1
 800365c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800365e:	f002 fa53 	bl	8005b08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003662:	f000 ffff 	bl	8004664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003666:	f002 fa21 	bl	8005aac <vPortEnterCritical>
 800366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003670:	b25b      	sxtb	r3, r3
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d103      	bne.n	8003680 <xQueueGenericSend+0x164>
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003686:	b25b      	sxtb	r3, r3
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368c:	d103      	bne.n	8003696 <xQueueGenericSend+0x17a>
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003696:	f002 fa37 	bl	8005b08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800369a:	1d3a      	adds	r2, r7, #4
 800369c:	f107 0314 	add.w	r3, r7, #20
 80036a0:	4611      	mov	r1, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f001 fa7a 	bl	8004b9c <xTaskCheckForTimeOut>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d124      	bne.n	80036f8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80036ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036b0:	f000 fce1 	bl	8004076 <prvIsQueueFull>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d018      	beq.n	80036ec <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80036ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036bc:	3310      	adds	r3, #16
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	4611      	mov	r1, r2
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 f9a4 	bl	8004a10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80036c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036ca:	f000 fc6c 	bl	8003fa6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80036ce:	f000 ffd7 	bl	8004680 <xTaskResumeAll>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f47f af7c 	bne.w	80035d2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80036da:	4b0c      	ldr	r3, [pc, #48]	; (800370c <xQueueGenericSend+0x1f0>)
 80036dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	f3bf 8f6f 	isb	sy
 80036ea:	e772      	b.n	80035d2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80036ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036ee:	f000 fc5a 	bl	8003fa6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036f2:	f000 ffc5 	bl	8004680 <xTaskResumeAll>
 80036f6:	e76c      	b.n	80035d2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80036f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036fa:	f000 fc54 	bl	8003fa6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036fe:	f000 ffbf 	bl	8004680 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003702:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003704:	4618      	mov	r0, r3
 8003706:	3738      	adds	r7, #56	; 0x38
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	e000ed04 	.word	0xe000ed04

08003710 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b090      	sub	sp, #64	; 0x40
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003724:	2b00      	cmp	r3, #0
 8003726:	d109      	bne.n	800373c <xQueueGenericSendFromISR+0x2c>
 8003728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	62bb      	str	r3, [r7, #40]	; 0x28
 800373a:	e7fe      	b.n	800373a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d103      	bne.n	800374a <xQueueGenericSendFromISR+0x3a>
 8003742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <xQueueGenericSendFromISR+0x3e>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <xQueueGenericSendFromISR+0x40>
 800374e:	2300      	movs	r3, #0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <xQueueGenericSendFromISR+0x58>
 8003754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
 8003766:	e7fe      	b.n	8003766 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d103      	bne.n	8003776 <xQueueGenericSendFromISR+0x66>
 800376e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <xQueueGenericSendFromISR+0x6a>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <xQueueGenericSendFromISR+0x6c>
 800377a:	2300      	movs	r3, #0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d109      	bne.n	8003794 <xQueueGenericSendFromISR+0x84>
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	623b      	str	r3, [r7, #32]
 8003792:	e7fe      	b.n	8003792 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003794:	f002 fa66 	bl	8005c64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003798:	f3ef 8211 	mrs	r2, BASEPRI
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	61fa      	str	r2, [r7, #28]
 80037ae:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80037b0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037b2:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037bc:	429a      	cmp	r2, r3
 80037be:	d302      	bcc.n	80037c6 <xQueueGenericSendFromISR+0xb6>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d12f      	bne.n	8003826 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80037c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	68b9      	ldr	r1, [r7, #8]
 80037da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80037dc:	f000 fb53 	bl	8003e86 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80037e0:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e8:	d112      	bne.n	8003810 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d016      	beq.n	8003820 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f4:	3324      	adds	r3, #36	; 0x24
 80037f6:	4618      	mov	r0, r3
 80037f8:	f001 f958 	bl	8004aac <xTaskRemoveFromEventList>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00e      	beq.n	8003820 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00b      	beq.n	8003820 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e007      	b.n	8003820 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003810:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003814:	3301      	adds	r3, #1
 8003816:	b2db      	uxtb	r3, r3
 8003818:	b25a      	sxtb	r2, r3
 800381a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003820:	2301      	movs	r3, #1
 8003822:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003824:	e001      	b.n	800382a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003826:	2300      	movs	r3, #0
 8003828:	63fb      	str	r3, [r7, #60]	; 0x3c
 800382a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003836:	4618      	mov	r0, r3
 8003838:	3740      	adds	r7, #64	; 0x40
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b08e      	sub	sp, #56	; 0x38
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800384c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <xQueueGiveFromISR+0x28>
	__asm volatile
 8003852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003856:	f383 8811 	msr	BASEPRI, r3
 800385a:	f3bf 8f6f 	isb	sy
 800385e:	f3bf 8f4f 	dsb	sy
 8003862:	623b      	str	r3, [r7, #32]
 8003864:	e7fe      	b.n	8003864 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d009      	beq.n	8003882 <xQueueGiveFromISR+0x44>
 800386e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	e7fe      	b.n	8003880 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d103      	bne.n	8003892 <xQueueGiveFromISR+0x54>
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <xQueueGiveFromISR+0x58>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <xQueueGiveFromISR+0x5a>
 8003896:	2300      	movs	r3, #0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d109      	bne.n	80038b0 <xQueueGiveFromISR+0x72>
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	61bb      	str	r3, [r7, #24]
 80038ae:	e7fe      	b.n	80038ae <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038b0:	f002 f9d8 	bl	8005c64 <vPortValidateInterruptPriority>
	__asm volatile
 80038b4:	f3ef 8211 	mrs	r2, BASEPRI
 80038b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038bc:	f383 8811 	msr	BASEPRI, r3
 80038c0:	f3bf 8f6f 	isb	sy
 80038c4:	f3bf 8f4f 	dsb	sy
 80038c8:	617a      	str	r2, [r7, #20]
 80038ca:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80038cc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038dc:	429a      	cmp	r2, r3
 80038de:	d22b      	bcs.n	8003938 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80038e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80038f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d112      	bne.n	8003922 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	2b00      	cmp	r3, #0
 8003902:	d016      	beq.n	8003932 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	3324      	adds	r3, #36	; 0x24
 8003908:	4618      	mov	r0, r3
 800390a:	f001 f8cf 	bl	8004aac <xTaskRemoveFromEventList>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00e      	beq.n	8003932 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2201      	movs	r2, #1
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	e007      	b.n	8003932 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003926:	3301      	adds	r3, #1
 8003928:	b2db      	uxtb	r3, r3
 800392a:	b25a      	sxtb	r2, r3
 800392c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003932:	2301      	movs	r3, #1
 8003934:	637b      	str	r3, [r7, #52]	; 0x34
 8003936:	e001      	b.n	800393c <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003938:	2300      	movs	r3, #0
 800393a:	637b      	str	r3, [r7, #52]	; 0x34
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003948:	4618      	mov	r0, r3
 800394a:	3738      	adds	r7, #56	; 0x38
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08c      	sub	sp, #48	; 0x30
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800395c:	2300      	movs	r3, #0
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <xQueueReceive+0x2e>
	__asm volatile
 800396a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800396e:	f383 8811 	msr	BASEPRI, r3
 8003972:	f3bf 8f6f 	isb	sy
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	623b      	str	r3, [r7, #32]
 800397c:	e7fe      	b.n	800397c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d103      	bne.n	800398c <xQueueReceive+0x3c>
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <xQueueReceive+0x40>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <xQueueReceive+0x42>
 8003990:	2300      	movs	r3, #0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d109      	bne.n	80039aa <xQueueReceive+0x5a>
 8003996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399a:	f383 8811 	msr	BASEPRI, r3
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	61fb      	str	r3, [r7, #28]
 80039a8:	e7fe      	b.n	80039a8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039aa:	f001 fa3b 	bl	8004e24 <xTaskGetSchedulerState>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d102      	bne.n	80039ba <xQueueReceive+0x6a>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <xQueueReceive+0x6e>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <xQueueReceive+0x70>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d109      	bne.n	80039d8 <xQueueReceive+0x88>
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	61bb      	str	r3, [r7, #24]
 80039d6:	e7fe      	b.n	80039d6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039d8:	f002 f868 	bl	8005aac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01f      	beq.n	8003a28 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039ec:	f000 fab5 	bl	8003f5a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	1e5a      	subs	r2, r3, #1
 80039f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00f      	beq.n	8003a20 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	3310      	adds	r3, #16
 8003a04:	4618      	mov	r0, r3
 8003a06:	f001 f851 	bl	8004aac <xTaskRemoveFromEventList>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a10:	4b3c      	ldr	r3, [pc, #240]	; (8003b04 <xQueueReceive+0x1b4>)
 8003a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a20:	f002 f872 	bl	8005b08 <vPortExitCritical>
				return pdPASS;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e069      	b.n	8003afc <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d103      	bne.n	8003a36 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a2e:	f002 f86b 	bl	8005b08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e062      	b.n	8003afc <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d106      	bne.n	8003a4a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a3c:	f107 0310 	add.w	r3, r7, #16
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 f895 	bl	8004b70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a46:	2301      	movs	r3, #1
 8003a48:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a4a:	f002 f85d 	bl	8005b08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a4e:	f000 fe09 	bl	8004664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a52:	f002 f82b 	bl	8005aac <vPortEnterCritical>
 8003a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a5c:	b25b      	sxtb	r3, r3
 8003a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a62:	d103      	bne.n	8003a6c <xQueueReceive+0x11c>
 8003a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a72:	b25b      	sxtb	r3, r3
 8003a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a78:	d103      	bne.n	8003a82 <xQueueReceive+0x132>
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a82:	f002 f841 	bl	8005b08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a86:	1d3a      	adds	r2, r7, #4
 8003a88:	f107 0310 	add.w	r3, r7, #16
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 f884 	bl	8004b9c <xTaskCheckForTimeOut>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d123      	bne.n	8003ae2 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a9c:	f000 fad5 	bl	800404a <prvIsQueueEmpty>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d017      	beq.n	8003ad6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	3324      	adds	r3, #36	; 0x24
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	4611      	mov	r1, r2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 ffae 	bl	8004a10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ab6:	f000 fa76 	bl	8003fa6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003aba:	f000 fde1 	bl	8004680 <xTaskResumeAll>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d189      	bne.n	80039d8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003ac4:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <xQueueReceive+0x1b4>)
 8003ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	e780      	b.n	80039d8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ad8:	f000 fa65 	bl	8003fa6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003adc:	f000 fdd0 	bl	8004680 <xTaskResumeAll>
 8003ae0:	e77a      	b.n	80039d8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ae4:	f000 fa5f 	bl	8003fa6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ae8:	f000 fdca 	bl	8004680 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003aee:	f000 faac 	bl	800404a <prvIsQueueEmpty>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f43f af6f 	beq.w	80039d8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003afa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3730      	adds	r7, #48	; 0x30
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	e000ed04 	.word	0xe000ed04

08003b08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08e      	sub	sp, #56	; 0x38
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d109      	bne.n	8003b38 <xQueueSemaphoreTake+0x30>
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	623b      	str	r3, [r7, #32]
 8003b36:	e7fe      	b.n	8003b36 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d009      	beq.n	8003b54 <xQueueSemaphoreTake+0x4c>
 8003b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	e7fe      	b.n	8003b52 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b54:	f001 f966 	bl	8004e24 <xTaskGetSchedulerState>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d102      	bne.n	8003b64 <xQueueSemaphoreTake+0x5c>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <xQueueSemaphoreTake+0x60>
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <xQueueSemaphoreTake+0x62>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <xQueueSemaphoreTake+0x7a>
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	e7fe      	b.n	8003b80 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b82:	f001 ff93 	bl	8005aac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d024      	beq.n	8003bdc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b94:	1e5a      	subs	r2, r3, #1
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d104      	bne.n	8003bac <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003ba2:	f001 fab1 	bl	8005108 <pvTaskIncrementMutexHeldCount>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003baa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00f      	beq.n	8003bd4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb6:	3310      	adds	r3, #16
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 ff77 	bl	8004aac <xTaskRemoveFromEventList>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003bc4:	4b53      	ldr	r3, [pc, #332]	; (8003d14 <xQueueSemaphoreTake+0x20c>)
 8003bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003bd4:	f001 ff98 	bl	8005b08 <vPortExitCritical>
				return pdPASS;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e096      	b.n	8003d0a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d110      	bne.n	8003c04 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d009      	beq.n	8003bfc <xQueueSemaphoreTake+0xf4>
 8003be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	617b      	str	r3, [r7, #20]
 8003bfa:	e7fe      	b.n	8003bfa <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003bfc:	f001 ff84 	bl	8005b08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c00:	2300      	movs	r3, #0
 8003c02:	e082      	b.n	8003d0a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c0a:	f107 030c 	add.w	r3, r7, #12
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f000 ffae 	bl	8004b70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c14:	2301      	movs	r3, #1
 8003c16:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c18:	f001 ff76 	bl	8005b08 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c1c:	f000 fd22 	bl	8004664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c20:	f001 ff44 	bl	8005aac <vPortEnterCritical>
 8003c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c2a:	b25b      	sxtb	r3, r3
 8003c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c30:	d103      	bne.n	8003c3a <xQueueSemaphoreTake+0x132>
 8003c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c40:	b25b      	sxtb	r3, r3
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c46:	d103      	bne.n	8003c50 <xQueueSemaphoreTake+0x148>
 8003c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c50:	f001 ff5a 	bl	8005b08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c54:	463a      	mov	r2, r7
 8003c56:	f107 030c 	add.w	r3, r7, #12
 8003c5a:	4611      	mov	r1, r2
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f000 ff9d 	bl	8004b9c <xTaskCheckForTimeOut>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d132      	bne.n	8003cce <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c6a:	f000 f9ee 	bl	800404a <prvIsQueueEmpty>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d026      	beq.n	8003cc2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003c7c:	f001 ff16 	bl	8005aac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f001 f8eb 	bl	8004e60 <xTaskPriorityInherit>
 8003c8a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003c8c:	f001 ff3c 	bl	8005b08 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c92:	3324      	adds	r3, #36	; 0x24
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	4611      	mov	r1, r2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 feb9 	bl	8004a10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ca0:	f000 f981 	bl	8003fa6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ca4:	f000 fcec 	bl	8004680 <xTaskResumeAll>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f47f af69 	bne.w	8003b82 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003cb0:	4b18      	ldr	r3, [pc, #96]	; (8003d14 <xQueueSemaphoreTake+0x20c>)
 8003cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	e75f      	b.n	8003b82 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003cc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cc4:	f000 f96f 	bl	8003fa6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cc8:	f000 fcda 	bl	8004680 <xTaskResumeAll>
 8003ccc:	e759      	b.n	8003b82 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003cce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cd0:	f000 f969 	bl	8003fa6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cd4:	f000 fcd4 	bl	8004680 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cda:	f000 f9b6 	bl	800404a <prvIsQueueEmpty>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f43f af4e 	beq.w	8003b82 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00d      	beq.n	8003d08 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003cec:	f001 fede 	bl	8005aac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003cf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cf2:	f000 f8b0 	bl	8003e56 <prvGetDisinheritPriorityAfterTimeout>
 8003cf6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f001 f982 	bl	8005008 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003d04:	f001 ff00 	bl	8005b08 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3738      	adds	r7, #56	; 0x38
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	e000ed04 	.word	0xe000ed04

08003d18 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08e      	sub	sp, #56	; 0x38
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <xQueueReceiveFromISR+0x2a>
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	623b      	str	r3, [r7, #32]
 8003d40:	e7fe      	b.n	8003d40 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d103      	bne.n	8003d50 <xQueueReceiveFromISR+0x38>
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <xQueueReceiveFromISR+0x3c>
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <xQueueReceiveFromISR+0x3e>
 8003d54:	2300      	movs	r3, #0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d109      	bne.n	8003d6e <xQueueReceiveFromISR+0x56>
 8003d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	61fb      	str	r3, [r7, #28]
 8003d6c:	e7fe      	b.n	8003d6c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d6e:	f001 ff79 	bl	8005c64 <vPortValidateInterruptPriority>
	__asm volatile
 8003d72:	f3ef 8211 	mrs	r2, BASEPRI
 8003d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7a:	f383 8811 	msr	BASEPRI, r3
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f3bf 8f4f 	dsb	sy
 8003d86:	61ba      	str	r2, [r7, #24]
 8003d88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003d8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d02f      	beq.n	8003dfa <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003da4:	68b9      	ldr	r1, [r7, #8]
 8003da6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003da8:	f000 f8d7 	bl	8003f5a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dae:	1e5a      	subs	r2, r3, #1
 8003db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003db4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbc:	d112      	bne.n	8003de4 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d016      	beq.n	8003df4 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	3310      	adds	r3, #16
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fe6e 	bl	8004aac <xTaskRemoveFromEventList>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00e      	beq.n	8003df4 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00b      	beq.n	8003df4 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	e007      	b.n	8003df4 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003de8:	3301      	adds	r3, #1
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	b25a      	sxtb	r2, r3
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003df4:	2301      	movs	r3, #1
 8003df6:	637b      	str	r3, [r7, #52]	; 0x34
 8003df8:	e001      	b.n	8003dfe <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8003dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e00:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3738      	adds	r7, #56	; 0x38
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d109      	bne.n	8003e38 <vQueueDelete+0x26>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	e7fe      	b.n	8003e36 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f95d 	bl	80040f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d102      	bne.n	8003e4e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f002 f811 	bl	8005e70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003e56:	b480      	push	{r7}
 8003e58:	b085      	sub	sp, #20
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d006      	beq.n	8003e74 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	e001      	b.n	8003e78 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003e78:	68fb      	ldr	r3, [r7, #12]
	}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b086      	sub	sp, #24
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e92:	2300      	movs	r3, #0
 8003e94:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10d      	bne.n	8003ec0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d14d      	bne.n	8003f48 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f001 f83d 	bl	8004f30 <xTaskPriorityDisinherit>
 8003eb6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	609a      	str	r2, [r3, #8]
 8003ebe:	e043      	b.n	8003f48 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d119      	bne.n	8003efa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6858      	ldr	r0, [r3, #4]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	f002 f90d 	bl	80060f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	441a      	add	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d32b      	bcc.n	8003f48 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	605a      	str	r2, [r3, #4]
 8003ef8:	e026      	b.n	8003f48 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	68d8      	ldr	r0, [r3, #12]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	461a      	mov	r2, r3
 8003f04:	68b9      	ldr	r1, [r7, #8]
 8003f06:	f002 f8f3 	bl	80060f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	68da      	ldr	r2, [r3, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	425b      	negs	r3, r3
 8003f14:	441a      	add	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d207      	bcs.n	8003f36 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	425b      	negs	r3, r3
 8003f30:	441a      	add	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d105      	bne.n	8003f48 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	3b01      	subs	r3, #1
 8003f46:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f50:	697b      	ldr	r3, [r7, #20]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b082      	sub	sp, #8
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d018      	beq.n	8003f9e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	441a      	add	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d303      	bcc.n	8003f8e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68d9      	ldr	r1, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	461a      	mov	r2, r3
 8003f98:	6838      	ldr	r0, [r7, #0]
 8003f9a:	f002 f8a9 	bl	80060f0 <memcpy>
	}
}
 8003f9e:	bf00      	nop
 8003fa0:	3708      	adds	r7, #8
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b084      	sub	sp, #16
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fae:	f001 fd7d 	bl	8005aac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fb8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fba:	e011      	b.n	8003fe0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d012      	beq.n	8003fea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3324      	adds	r3, #36	; 0x24
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fd6f 	bl	8004aac <xTaskRemoveFromEventList>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003fd4:	f000 fe42 	bl	8004c5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	dce9      	bgt.n	8003fbc <prvUnlockQueue+0x16>
 8003fe8:	e000      	b.n	8003fec <prvUnlockQueue+0x46>
					break;
 8003fea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	22ff      	movs	r2, #255	; 0xff
 8003ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ff4:	f001 fd88 	bl	8005b08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ff8:	f001 fd58 	bl	8005aac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004002:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004004:	e011      	b.n	800402a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d012      	beq.n	8004034 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3310      	adds	r3, #16
 8004012:	4618      	mov	r0, r3
 8004014:	f000 fd4a 	bl	8004aac <xTaskRemoveFromEventList>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800401e:	f000 fe1d 	bl	8004c5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004022:	7bbb      	ldrb	r3, [r7, #14]
 8004024:	3b01      	subs	r3, #1
 8004026:	b2db      	uxtb	r3, r3
 8004028:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800402a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800402e:	2b00      	cmp	r3, #0
 8004030:	dce9      	bgt.n	8004006 <prvUnlockQueue+0x60>
 8004032:	e000      	b.n	8004036 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004034:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	22ff      	movs	r2, #255	; 0xff
 800403a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800403e:	f001 fd63 	bl	8005b08 <vPortExitCritical>
}
 8004042:	bf00      	nop
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004052:	f001 fd2b 	bl	8005aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800405e:	2301      	movs	r3, #1
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	e001      	b.n	8004068 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004068:	f001 fd4e 	bl	8005b08 <vPortExitCritical>

	return xReturn;
 800406c:	68fb      	ldr	r3, [r7, #12]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800407e:	f001 fd15 	bl	8005aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408a:	429a      	cmp	r2, r3
 800408c:	d102      	bne.n	8004094 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800408e:	2301      	movs	r3, #1
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	e001      	b.n	8004098 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004098:	f001 fd36 	bl	8005b08 <vPortExitCritical>

	return xReturn;
 800409c:	68fb      	ldr	r3, [r7, #12]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	e014      	b.n	80040e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040b8:	4a0e      	ldr	r2, [pc, #56]	; (80040f4 <vQueueAddToRegistry+0x4c>)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10b      	bne.n	80040dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80040c4:	490b      	ldr	r1, [pc, #44]	; (80040f4 <vQueueAddToRegistry+0x4c>)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80040ce:	4a09      	ldr	r2, [pc, #36]	; (80040f4 <vQueueAddToRegistry+0x4c>)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4413      	add	r3, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80040da:	e005      	b.n	80040e8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	3301      	adds	r3, #1
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b07      	cmp	r3, #7
 80040e6:	d9e7      	bls.n	80040b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80040e8:	bf00      	nop
 80040ea:	3714      	adds	r7, #20
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	20004b14 	.word	0x20004b14

080040f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	e016      	b.n	8004134 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004106:	4a10      	ldr	r2, [pc, #64]	; (8004148 <vQueueUnregisterQueue+0x50>)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	4413      	add	r3, r2
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	429a      	cmp	r2, r3
 8004114:	d10b      	bne.n	800412e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004116:	4a0c      	ldr	r2, [pc, #48]	; (8004148 <vQueueUnregisterQueue+0x50>)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2100      	movs	r1, #0
 800411c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004120:	4a09      	ldr	r2, [pc, #36]	; (8004148 <vQueueUnregisterQueue+0x50>)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	4413      	add	r3, r2
 8004128:	2200      	movs	r2, #0
 800412a:	605a      	str	r2, [r3, #4]
				break;
 800412c:	e005      	b.n	800413a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3301      	adds	r3, #1
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2b07      	cmp	r3, #7
 8004138:	d9e5      	bls.n	8004106 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20004b14 	.word	0x20004b14

0800414c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800415c:	f001 fca6 	bl	8005aac <vPortEnterCritical>
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004166:	b25b      	sxtb	r3, r3
 8004168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416c:	d103      	bne.n	8004176 <vQueueWaitForMessageRestricted+0x2a>
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800417c:	b25b      	sxtb	r3, r3
 800417e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004182:	d103      	bne.n	800418c <vQueueWaitForMessageRestricted+0x40>
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800418c:	f001 fcbc 	bl	8005b08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004194:	2b00      	cmp	r3, #0
 8004196:	d106      	bne.n	80041a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	3324      	adds	r3, #36	; 0x24
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fc59 	bl	8004a58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80041a6:	6978      	ldr	r0, [r7, #20]
 80041a8:	f7ff fefd 	bl	8003fa6 <prvUnlockQueue>
	}
 80041ac:	bf00      	nop
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08e      	sub	sp, #56	; 0x38
 80041b8:	af04      	add	r7, sp, #16
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
 80041c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80041c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d109      	bne.n	80041dc <xTaskCreateStatic+0x28>
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	623b      	str	r3, [r7, #32]
 80041da:	e7fe      	b.n	80041da <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80041dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <xTaskCreateStatic+0x42>
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	61fb      	str	r3, [r7, #28]
 80041f4:	e7fe      	b.n	80041f4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80041f6:	23bc      	movs	r3, #188	; 0xbc
 80041f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2bbc      	cmp	r3, #188	; 0xbc
 80041fe:	d009      	beq.n	8004214 <xTaskCreateStatic+0x60>
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	e7fe      	b.n	8004212 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004214:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004218:	2b00      	cmp	r3, #0
 800421a:	d01e      	beq.n	800425a <xTaskCreateStatic+0xa6>
 800421c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800421e:	2b00      	cmp	r3, #0
 8004220:	d01b      	beq.n	800425a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800422a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	2202      	movs	r2, #2
 8004230:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004234:	2300      	movs	r3, #0
 8004236:	9303      	str	r3, [sp, #12]
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	9302      	str	r3, [sp, #8]
 800423c:	f107 0314 	add.w	r3, r7, #20
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	68b9      	ldr	r1, [r7, #8]
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f851 	bl	80042f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004252:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004254:	f000 f8f4 	bl	8004440 <prvAddNewTaskToReadyList>
 8004258:	e001      	b.n	800425e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800425a:	2300      	movs	r3, #0
 800425c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800425e:	697b      	ldr	r3, [r7, #20]
	}
 8004260:	4618      	mov	r0, r3
 8004262:	3728      	adds	r7, #40	; 0x28
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08c      	sub	sp, #48	; 0x30
 800426c:	af04      	add	r7, sp, #16
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	4613      	mov	r3, r2
 8004276:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4618      	mov	r0, r3
 800427e:	f001 fd2f 	bl	8005ce0 <pvPortMalloc>
 8004282:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00e      	beq.n	80042a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800428a:	20bc      	movs	r0, #188	; 0xbc
 800428c:	f001 fd28 	bl	8005ce0 <pvPortMalloc>
 8004290:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	631a      	str	r2, [r3, #48]	; 0x30
 800429e:	e005      	b.n	80042ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042a0:	6978      	ldr	r0, [r7, #20]
 80042a2:	f001 fde5 	bl	8005e70 <vPortFree>
 80042a6:	e001      	b.n	80042ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d017      	beq.n	80042e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042ba:	88fa      	ldrh	r2, [r7, #6]
 80042bc:	2300      	movs	r3, #0
 80042be:	9303      	str	r3, [sp, #12]
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	9302      	str	r3, [sp, #8]
 80042c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c6:	9301      	str	r3, [sp, #4]
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	68b9      	ldr	r1, [r7, #8]
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f80f 	bl	80042f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042d6:	69f8      	ldr	r0, [r7, #28]
 80042d8:	f000 f8b2 	bl	8004440 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042dc:	2301      	movs	r3, #1
 80042de:	61bb      	str	r3, [r7, #24]
 80042e0:	e002      	b.n	80042e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042e2:	f04f 33ff 	mov.w	r3, #4294967295
 80042e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042e8:	69bb      	ldr	r3, [r7, #24]
	}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3720      	adds	r7, #32
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004304:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	461a      	mov	r2, r3
 800430c:	21a5      	movs	r1, #165	; 0xa5
 800430e:	f001 fefa 	bl	8006106 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800431c:	3b01      	subs	r3, #1
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	f023 0307 	bic.w	r3, r3, #7
 800432a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <prvInitialiseNewTask+0x56>
 8004336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433a:	f383 8811 	msr	BASEPRI, r3
 800433e:	f3bf 8f6f 	isb	sy
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	617b      	str	r3, [r7, #20]
 8004348:	e7fe      	b.n	8004348 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01f      	beq.n	8004390 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004350:	2300      	movs	r3, #0
 8004352:	61fb      	str	r3, [r7, #28]
 8004354:	e012      	b.n	800437c <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	4413      	add	r3, r2
 800435c:	7819      	ldrb	r1, [r3, #0]
 800435e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	4413      	add	r3, r2
 8004364:	3334      	adds	r3, #52	; 0x34
 8004366:	460a      	mov	r2, r1
 8004368:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d006      	beq.n	8004384 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	3301      	adds	r3, #1
 800437a:	61fb      	str	r3, [r7, #28]
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	2b0f      	cmp	r3, #15
 8004380:	d9e9      	bls.n	8004356 <prvInitialiseNewTask+0x62>
 8004382:	e000      	b.n	8004386 <prvInitialiseNewTask+0x92>
			{
				break;
 8004384:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800438e:	e003      	b.n	8004398 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	2b37      	cmp	r3, #55	; 0x37
 800439c:	d901      	bls.n	80043a2 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800439e:	2337      	movs	r3, #55	; 0x37
 80043a0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80043ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b0:	2200      	movs	r2, #0
 80043b2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b6:	3304      	adds	r3, #4
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fe fe7d 	bl	80030b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	3318      	adds	r3, #24
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fe fe78 	bl	80030b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e0:	2200      	movs	r2, #0
 80043e2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80043ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f0:	3354      	adds	r3, #84	; 0x54
 80043f2:	2260      	movs	r2, #96	; 0x60
 80043f4:	2100      	movs	r1, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	f001 fe85 	bl	8006106 <memset>
 80043fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fe:	4a0d      	ldr	r2, [pc, #52]	; (8004434 <prvInitialiseNewTask+0x140>)
 8004400:	659a      	str	r2, [r3, #88]	; 0x58
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	4a0c      	ldr	r2, [pc, #48]	; (8004438 <prvInitialiseNewTask+0x144>)
 8004406:	65da      	str	r2, [r3, #92]	; 0x5c
 8004408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800440a:	4a0c      	ldr	r2, [pc, #48]	; (800443c <prvInitialiseNewTask+0x148>)
 800440c:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	68f9      	ldr	r1, [r7, #12]
 8004412:	69b8      	ldr	r0, [r7, #24]
 8004414:	f001 fa26 	bl	8005864 <pxPortInitialiseStack>
 8004418:	4602      	mov	r2, r0
 800441a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <prvInitialiseNewTask+0x136>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004428:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800442a:	bf00      	nop
 800442c:	3720      	adds	r7, #32
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	08006344 	.word	0x08006344
 8004438:	08006364 	.word	0x08006364
 800443c:	08006324 	.word	0x08006324

08004440 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004448:	f001 fb30 	bl	8005aac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800444c:	4b2d      	ldr	r3, [pc, #180]	; (8004504 <prvAddNewTaskToReadyList+0xc4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3301      	adds	r3, #1
 8004452:	4a2c      	ldr	r2, [pc, #176]	; (8004504 <prvAddNewTaskToReadyList+0xc4>)
 8004454:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004456:	4b2c      	ldr	r3, [pc, #176]	; (8004508 <prvAddNewTaskToReadyList+0xc8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800445e:	4a2a      	ldr	r2, [pc, #168]	; (8004508 <prvAddNewTaskToReadyList+0xc8>)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004464:	4b27      	ldr	r3, [pc, #156]	; (8004504 <prvAddNewTaskToReadyList+0xc4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d110      	bne.n	800448e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800446c:	f000 fc1a 	bl	8004ca4 <prvInitialiseTaskLists>
 8004470:	e00d      	b.n	800448e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004472:	4b26      	ldr	r3, [pc, #152]	; (800450c <prvAddNewTaskToReadyList+0xcc>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d109      	bne.n	800448e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800447a:	4b23      	ldr	r3, [pc, #140]	; (8004508 <prvAddNewTaskToReadyList+0xc8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	429a      	cmp	r2, r3
 8004486:	d802      	bhi.n	800448e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004488:	4a1f      	ldr	r2, [pc, #124]	; (8004508 <prvAddNewTaskToReadyList+0xc8>)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800448e:	4b20      	ldr	r3, [pc, #128]	; (8004510 <prvAddNewTaskToReadyList+0xd0>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3301      	adds	r3, #1
 8004494:	4a1e      	ldr	r2, [pc, #120]	; (8004510 <prvAddNewTaskToReadyList+0xd0>)
 8004496:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004498:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <prvAddNewTaskToReadyList+0xd0>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a4:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <prvAddNewTaskToReadyList+0xd4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d903      	bls.n	80044b4 <prvAddNewTaskToReadyList+0x74>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	4a18      	ldr	r2, [pc, #96]	; (8004514 <prvAddNewTaskToReadyList+0xd4>)
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b8:	4613      	mov	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4413      	add	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4a15      	ldr	r2, [pc, #84]	; (8004518 <prvAddNewTaskToReadyList+0xd8>)
 80044c2:	441a      	add	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3304      	adds	r3, #4
 80044c8:	4619      	mov	r1, r3
 80044ca:	4610      	mov	r0, r2
 80044cc:	f7fe fe01 	bl	80030d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044d0:	f001 fb1a 	bl	8005b08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044d4:	4b0d      	ldr	r3, [pc, #52]	; (800450c <prvAddNewTaskToReadyList+0xcc>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00e      	beq.n	80044fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044dc:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <prvAddNewTaskToReadyList+0xc8>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d207      	bcs.n	80044fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80044ea:	4b0c      	ldr	r3, [pc, #48]	; (800451c <prvAddNewTaskToReadyList+0xdc>)
 80044ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	20000cf4 	.word	0x20000cf4
 8004508:	20000820 	.word	0x20000820
 800450c:	20000d00 	.word	0x20000d00
 8004510:	20000d10 	.word	0x20000d10
 8004514:	20000cfc 	.word	0x20000cfc
 8004518:	20000824 	.word	0x20000824
 800451c:	e000ed04 	.word	0xe000ed04

08004520 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004528:	2300      	movs	r3, #0
 800452a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d016      	beq.n	8004560 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004532:	4b13      	ldr	r3, [pc, #76]	; (8004580 <vTaskDelay+0x60>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d009      	beq.n	800454e <vTaskDelay+0x2e>
 800453a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	60bb      	str	r3, [r7, #8]
 800454c:	e7fe      	b.n	800454c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800454e:	f000 f889 	bl	8004664 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004552:	2100      	movs	r1, #0
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 fdeb 	bl	8005130 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800455a:	f000 f891 	bl	8004680 <xTaskResumeAll>
 800455e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d107      	bne.n	8004576 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004566:	4b07      	ldr	r3, [pc, #28]	; (8004584 <vTaskDelay+0x64>)
 8004568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	f3bf 8f4f 	dsb	sy
 8004572:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20000d1c 	.word	0x20000d1c
 8004584:	e000ed04 	.word	0xe000ed04

08004588 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b08a      	sub	sp, #40	; 0x28
 800458c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800458e:	2300      	movs	r3, #0
 8004590:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004592:	2300      	movs	r3, #0
 8004594:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004596:	463a      	mov	r2, r7
 8004598:	1d39      	adds	r1, r7, #4
 800459a:	f107 0308 	add.w	r3, r7, #8
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fe fd36 	bl	8003010 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045a4:	6839      	ldr	r1, [r7, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	9202      	str	r2, [sp, #8]
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	2300      	movs	r3, #0
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	2300      	movs	r3, #0
 80045b4:	460a      	mov	r2, r1
 80045b6:	4923      	ldr	r1, [pc, #140]	; (8004644 <vTaskStartScheduler+0xbc>)
 80045b8:	4823      	ldr	r0, [pc, #140]	; (8004648 <vTaskStartScheduler+0xc0>)
 80045ba:	f7ff fdfb 	bl	80041b4 <xTaskCreateStatic>
 80045be:	4602      	mov	r2, r0
 80045c0:	4b22      	ldr	r3, [pc, #136]	; (800464c <vTaskStartScheduler+0xc4>)
 80045c2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045c4:	4b21      	ldr	r3, [pc, #132]	; (800464c <vTaskStartScheduler+0xc4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045cc:	2301      	movs	r3, #1
 80045ce:	617b      	str	r3, [r7, #20]
 80045d0:	e001      	b.n	80045d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d102      	bne.n	80045e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80045dc:	f000 fdfc 	bl	80051d8 <xTimerCreateTimerTask>
 80045e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d11a      	bne.n	800461e <vTaskStartScheduler+0x96>
 80045e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ec:	f383 8811 	msr	BASEPRI, r3
 80045f0:	f3bf 8f6f 	isb	sy
 80045f4:	f3bf 8f4f 	dsb	sy
 80045f8:	613b      	str	r3, [r7, #16]
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80045fa:	4b15      	ldr	r3, [pc, #84]	; (8004650 <vTaskStartScheduler+0xc8>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3354      	adds	r3, #84	; 0x54
 8004600:	4a14      	ldr	r2, [pc, #80]	; (8004654 <vTaskStartScheduler+0xcc>)
 8004602:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004604:	4b14      	ldr	r3, [pc, #80]	; (8004658 <vTaskStartScheduler+0xd0>)
 8004606:	f04f 32ff 	mov.w	r2, #4294967295
 800460a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800460c:	4b13      	ldr	r3, [pc, #76]	; (800465c <vTaskStartScheduler+0xd4>)
 800460e:	2201      	movs	r2, #1
 8004610:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004612:	4b13      	ldr	r3, [pc, #76]	; (8004660 <vTaskStartScheduler+0xd8>)
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004618:	f001 f9aa 	bl	8005970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800461c:	e00d      	b.n	800463a <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004624:	d109      	bne.n	800463a <vTaskStartScheduler+0xb2>
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	60fb      	str	r3, [r7, #12]
 8004638:	e7fe      	b.n	8004638 <vTaskStartScheduler+0xb0>
}
 800463a:	bf00      	nop
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	080062c0 	.word	0x080062c0
 8004648:	08004c75 	.word	0x08004c75
 800464c:	20000d18 	.word	0x20000d18
 8004650:	20000820 	.word	0x20000820
 8004654:	20000010 	.word	0x20000010
 8004658:	20000d14 	.word	0x20000d14
 800465c:	20000d00 	.word	0x20000d00
 8004660:	20000cf8 	.word	0x20000cf8

08004664 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004664:	b480      	push	{r7}
 8004666:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004668:	4b04      	ldr	r3, [pc, #16]	; (800467c <vTaskSuspendAll+0x18>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3301      	adds	r3, #1
 800466e:	4a03      	ldr	r2, [pc, #12]	; (800467c <vTaskSuspendAll+0x18>)
 8004670:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004672:	bf00      	nop
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	20000d1c 	.word	0x20000d1c

08004680 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800468a:	2300      	movs	r3, #0
 800468c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800468e:	4b41      	ldr	r3, [pc, #260]	; (8004794 <xTaskResumeAll+0x114>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <xTaskResumeAll+0x2a>
 8004696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	e7fe      	b.n	80046a8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046aa:	f001 f9ff 	bl	8005aac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046ae:	4b39      	ldr	r3, [pc, #228]	; (8004794 <xTaskResumeAll+0x114>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	4a37      	ldr	r2, [pc, #220]	; (8004794 <xTaskResumeAll+0x114>)
 80046b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046b8:	4b36      	ldr	r3, [pc, #216]	; (8004794 <xTaskResumeAll+0x114>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d162      	bne.n	8004786 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046c0:	4b35      	ldr	r3, [pc, #212]	; (8004798 <xTaskResumeAll+0x118>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d05e      	beq.n	8004786 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046c8:	e02f      	b.n	800472a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ca:	4b34      	ldr	r3, [pc, #208]	; (800479c <xTaskResumeAll+0x11c>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3318      	adds	r3, #24
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fe fd58 	bl	800318c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3304      	adds	r3, #4
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7fe fd53 	bl	800318c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ea:	4b2d      	ldr	r3, [pc, #180]	; (80047a0 <xTaskResumeAll+0x120>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d903      	bls.n	80046fa <xTaskResumeAll+0x7a>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	4a2a      	ldr	r2, [pc, #168]	; (80047a0 <xTaskResumeAll+0x120>)
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fe:	4613      	mov	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4a27      	ldr	r2, [pc, #156]	; (80047a4 <xTaskResumeAll+0x124>)
 8004708:	441a      	add	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3304      	adds	r3, #4
 800470e:	4619      	mov	r1, r3
 8004710:	4610      	mov	r0, r2
 8004712:	f7fe fcde 	bl	80030d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471a:	4b23      	ldr	r3, [pc, #140]	; (80047a8 <xTaskResumeAll+0x128>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	429a      	cmp	r2, r3
 8004722:	d302      	bcc.n	800472a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004724:	4b21      	ldr	r3, [pc, #132]	; (80047ac <xTaskResumeAll+0x12c>)
 8004726:	2201      	movs	r2, #1
 8004728:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800472a:	4b1c      	ldr	r3, [pc, #112]	; (800479c <xTaskResumeAll+0x11c>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1cb      	bne.n	80046ca <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004738:	f000 fb54 	bl	8004de4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800473c:	4b1c      	ldr	r3, [pc, #112]	; (80047b0 <xTaskResumeAll+0x130>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d010      	beq.n	800476a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004748:	f000 f846 	bl	80047d8 <xTaskIncrementTick>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004752:	4b16      	ldr	r3, [pc, #88]	; (80047ac <xTaskResumeAll+0x12c>)
 8004754:	2201      	movs	r2, #1
 8004756:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3b01      	subs	r3, #1
 800475c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1f1      	bne.n	8004748 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004764:	4b12      	ldr	r3, [pc, #72]	; (80047b0 <xTaskResumeAll+0x130>)
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800476a:	4b10      	ldr	r3, [pc, #64]	; (80047ac <xTaskResumeAll+0x12c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d009      	beq.n	8004786 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004772:	2301      	movs	r3, #1
 8004774:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004776:	4b0f      	ldr	r3, [pc, #60]	; (80047b4 <xTaskResumeAll+0x134>)
 8004778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004786:	f001 f9bf 	bl	8005b08 <vPortExitCritical>

	return xAlreadyYielded;
 800478a:	68bb      	ldr	r3, [r7, #8]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20000d1c 	.word	0x20000d1c
 8004798:	20000cf4 	.word	0x20000cf4
 800479c:	20000cb4 	.word	0x20000cb4
 80047a0:	20000cfc 	.word	0x20000cfc
 80047a4:	20000824 	.word	0x20000824
 80047a8:	20000820 	.word	0x20000820
 80047ac:	20000d08 	.word	0x20000d08
 80047b0:	20000d04 	.word	0x20000d04
 80047b4:	e000ed04 	.word	0xe000ed04

080047b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80047be:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <xTaskGetTickCount+0x1c>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80047c4:	687b      	ldr	r3, [r7, #4]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	20000cf8 	.word	0x20000cf8

080047d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80047de:	2300      	movs	r3, #0
 80047e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047e2:	4b4e      	ldr	r3, [pc, #312]	; (800491c <xTaskIncrementTick+0x144>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f040 808e 	bne.w	8004908 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047ec:	4b4c      	ldr	r3, [pc, #304]	; (8004920 <xTaskIncrementTick+0x148>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3301      	adds	r3, #1
 80047f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80047f4:	4a4a      	ldr	r2, [pc, #296]	; (8004920 <xTaskIncrementTick+0x148>)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d11f      	bne.n	8004840 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004800:	4b48      	ldr	r3, [pc, #288]	; (8004924 <xTaskIncrementTick+0x14c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d009      	beq.n	800481e <xTaskIncrementTick+0x46>
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	603b      	str	r3, [r7, #0]
 800481c:	e7fe      	b.n	800481c <xTaskIncrementTick+0x44>
 800481e:	4b41      	ldr	r3, [pc, #260]	; (8004924 <xTaskIncrementTick+0x14c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60fb      	str	r3, [r7, #12]
 8004824:	4b40      	ldr	r3, [pc, #256]	; (8004928 <xTaskIncrementTick+0x150>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a3e      	ldr	r2, [pc, #248]	; (8004924 <xTaskIncrementTick+0x14c>)
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	4a3e      	ldr	r2, [pc, #248]	; (8004928 <xTaskIncrementTick+0x150>)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	4b3e      	ldr	r3, [pc, #248]	; (800492c <xTaskIncrementTick+0x154>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3301      	adds	r3, #1
 8004838:	4a3c      	ldr	r2, [pc, #240]	; (800492c <xTaskIncrementTick+0x154>)
 800483a:	6013      	str	r3, [r2, #0]
 800483c:	f000 fad2 	bl	8004de4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004840:	4b3b      	ldr	r3, [pc, #236]	; (8004930 <xTaskIncrementTick+0x158>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	429a      	cmp	r2, r3
 8004848:	d349      	bcc.n	80048de <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800484a:	4b36      	ldr	r3, [pc, #216]	; (8004924 <xTaskIncrementTick+0x14c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d104      	bne.n	800485e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004854:	4b36      	ldr	r3, [pc, #216]	; (8004930 <xTaskIncrementTick+0x158>)
 8004856:	f04f 32ff 	mov.w	r2, #4294967295
 800485a:	601a      	str	r2, [r3, #0]
					break;
 800485c:	e03f      	b.n	80048de <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800485e:	4b31      	ldr	r3, [pc, #196]	; (8004924 <xTaskIncrementTick+0x14c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	429a      	cmp	r2, r3
 8004874:	d203      	bcs.n	800487e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004876:	4a2e      	ldr	r2, [pc, #184]	; (8004930 <xTaskIncrementTick+0x158>)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800487c:	e02f      	b.n	80048de <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	3304      	adds	r3, #4
 8004882:	4618      	mov	r0, r3
 8004884:	f7fe fc82 	bl	800318c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	2b00      	cmp	r3, #0
 800488e:	d004      	beq.n	800489a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	3318      	adds	r3, #24
 8004894:	4618      	mov	r0, r3
 8004896:	f7fe fc79 	bl	800318c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489e:	4b25      	ldr	r3, [pc, #148]	; (8004934 <xTaskIncrementTick+0x15c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d903      	bls.n	80048ae <xTaskIncrementTick+0xd6>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	4a22      	ldr	r2, [pc, #136]	; (8004934 <xTaskIncrementTick+0x15c>)
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b2:	4613      	mov	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	4a1f      	ldr	r2, [pc, #124]	; (8004938 <xTaskIncrementTick+0x160>)
 80048bc:	441a      	add	r2, r3
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	3304      	adds	r3, #4
 80048c2:	4619      	mov	r1, r3
 80048c4:	4610      	mov	r0, r2
 80048c6:	f7fe fc04 	bl	80030d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ce:	4b1b      	ldr	r3, [pc, #108]	; (800493c <xTaskIncrementTick+0x164>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d3b8      	bcc.n	800484a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80048d8:	2301      	movs	r3, #1
 80048da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048dc:	e7b5      	b.n	800484a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80048de:	4b17      	ldr	r3, [pc, #92]	; (800493c <xTaskIncrementTick+0x164>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e4:	4914      	ldr	r1, [pc, #80]	; (8004938 <xTaskIncrementTick+0x160>)
 80048e6:	4613      	mov	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	440b      	add	r3, r1
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d901      	bls.n	80048fa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80048f6:	2301      	movs	r3, #1
 80048f8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80048fa:	4b11      	ldr	r3, [pc, #68]	; (8004940 <xTaskIncrementTick+0x168>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d007      	beq.n	8004912 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004902:	2301      	movs	r3, #1
 8004904:	617b      	str	r3, [r7, #20]
 8004906:	e004      	b.n	8004912 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004908:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <xTaskIncrementTick+0x16c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3301      	adds	r3, #1
 800490e:	4a0d      	ldr	r2, [pc, #52]	; (8004944 <xTaskIncrementTick+0x16c>)
 8004910:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004912:	697b      	ldr	r3, [r7, #20]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	20000d1c 	.word	0x20000d1c
 8004920:	20000cf8 	.word	0x20000cf8
 8004924:	20000cac 	.word	0x20000cac
 8004928:	20000cb0 	.word	0x20000cb0
 800492c:	20000d0c 	.word	0x20000d0c
 8004930:	20000d14 	.word	0x20000d14
 8004934:	20000cfc 	.word	0x20000cfc
 8004938:	20000824 	.word	0x20000824
 800493c:	20000820 	.word	0x20000820
 8004940:	20000d08 	.word	0x20000d08
 8004944:	20000d04 	.word	0x20000d04

08004948 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800494e:	4b2a      	ldr	r3, [pc, #168]	; (80049f8 <vTaskSwitchContext+0xb0>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004956:	4b29      	ldr	r3, [pc, #164]	; (80049fc <vTaskSwitchContext+0xb4>)
 8004958:	2201      	movs	r2, #1
 800495a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800495c:	e045      	b.n	80049ea <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800495e:	4b27      	ldr	r3, [pc, #156]	; (80049fc <vTaskSwitchContext+0xb4>)
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004964:	4b26      	ldr	r3, [pc, #152]	; (8004a00 <vTaskSwitchContext+0xb8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	e00f      	b.n	800498c <vTaskSwitchContext+0x44>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d109      	bne.n	8004986 <vTaskSwitchContext+0x3e>
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	607b      	str	r3, [r7, #4]
 8004984:	e7fe      	b.n	8004984 <vTaskSwitchContext+0x3c>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3b01      	subs	r3, #1
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	491d      	ldr	r1, [pc, #116]	; (8004a04 <vTaskSwitchContext+0xbc>)
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4613      	mov	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0e5      	beq.n	800496c <vTaskSwitchContext+0x24>
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4a16      	ldr	r2, [pc, #88]	; (8004a04 <vTaskSwitchContext+0xbc>)
 80049ac:	4413      	add	r3, r2
 80049ae:	60bb      	str	r3, [r7, #8]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	605a      	str	r2, [r3, #4]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	3308      	adds	r3, #8
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d104      	bne.n	80049d0 <vTaskSwitchContext+0x88>
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	605a      	str	r2, [r3, #4]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	4a0c      	ldr	r2, [pc, #48]	; (8004a08 <vTaskSwitchContext+0xc0>)
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	4a09      	ldr	r2, [pc, #36]	; (8004a00 <vTaskSwitchContext+0xb8>)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80049e0:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <vTaskSwitchContext+0xc0>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3354      	adds	r3, #84	; 0x54
 80049e6:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <vTaskSwitchContext+0xc4>)
 80049e8:	6013      	str	r3, [r2, #0]
}
 80049ea:	bf00      	nop
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	20000d1c 	.word	0x20000d1c
 80049fc:	20000d08 	.word	0x20000d08
 8004a00:	20000cfc 	.word	0x20000cfc
 8004a04:	20000824 	.word	0x20000824
 8004a08:	20000820 	.word	0x20000820
 8004a0c:	20000010 	.word	0x20000010

08004a10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d109      	bne.n	8004a34 <vTaskPlaceOnEventList+0x24>
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	e7fe      	b.n	8004a32 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a34:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <vTaskPlaceOnEventList+0x44>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3318      	adds	r3, #24
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7fe fb6c 	bl	800311a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a42:	2101      	movs	r1, #1
 8004a44:	6838      	ldr	r0, [r7, #0]
 8004a46:	f000 fb73 	bl	8005130 <prvAddCurrentTaskToDelayedList>
}
 8004a4a:	bf00      	nop
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000820 	.word	0x20000820

08004a58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d109      	bne.n	8004a7e <vTaskPlaceOnEventListRestricted+0x26>
 8004a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	e7fe      	b.n	8004a7c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a7e:	4b0a      	ldr	r3, [pc, #40]	; (8004aa8 <vTaskPlaceOnEventListRestricted+0x50>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3318      	adds	r3, #24
 8004a84:	4619      	mov	r1, r3
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f7fe fb23 	bl	80030d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004a92:	f04f 33ff 	mov.w	r3, #4294967295
 8004a96:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	68b8      	ldr	r0, [r7, #8]
 8004a9c:	f000 fb48 	bl	8005130 <prvAddCurrentTaskToDelayedList>
	}
 8004aa0:	bf00      	nop
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20000820 	.word	0x20000820

08004aac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d109      	bne.n	8004ad6 <xTaskRemoveFromEventList+0x2a>
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	e7fe      	b.n	8004ad4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	3318      	adds	r3, #24
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fe fb56 	bl	800318c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ae0:	4b1d      	ldr	r3, [pc, #116]	; (8004b58 <xTaskRemoveFromEventList+0xac>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d11d      	bne.n	8004b24 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	3304      	adds	r3, #4
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fe fb4d 	bl	800318c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af6:	4b19      	ldr	r3, [pc, #100]	; (8004b5c <xTaskRemoveFromEventList+0xb0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d903      	bls.n	8004b06 <xTaskRemoveFromEventList+0x5a>
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b02:	4a16      	ldr	r2, [pc, #88]	; (8004b5c <xTaskRemoveFromEventList+0xb0>)
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4a13      	ldr	r2, [pc, #76]	; (8004b60 <xTaskRemoveFromEventList+0xb4>)
 8004b14:	441a      	add	r2, r3
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	f7fe fad8 	bl	80030d2 <vListInsertEnd>
 8004b22:	e005      	b.n	8004b30 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	3318      	adds	r3, #24
 8004b28:	4619      	mov	r1, r3
 8004b2a:	480e      	ldr	r0, [pc, #56]	; (8004b64 <xTaskRemoveFromEventList+0xb8>)
 8004b2c:	f7fe fad1 	bl	80030d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b34:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <xTaskRemoveFromEventList+0xbc>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d905      	bls.n	8004b4a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b42:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <xTaskRemoveFromEventList+0xc0>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	e001      	b.n	8004b4e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004b4e:	697b      	ldr	r3, [r7, #20]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	20000d1c 	.word	0x20000d1c
 8004b5c:	20000cfc 	.word	0x20000cfc
 8004b60:	20000824 	.word	0x20000824
 8004b64:	20000cb4 	.word	0x20000cb4
 8004b68:	20000820 	.word	0x20000820
 8004b6c:	20000d08 	.word	0x20000d08

08004b70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b78:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <vTaskInternalSetTimeOutState+0x24>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <vTaskInternalSetTimeOutState+0x28>)
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	605a      	str	r2, [r3, #4]
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	20000d0c 	.word	0x20000d0c
 8004b98:	20000cf8 	.word	0x20000cf8

08004b9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d109      	bne.n	8004bc0 <xTaskCheckForTimeOut+0x24>
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	e7fe      	b.n	8004bbe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d109      	bne.n	8004bda <xTaskCheckForTimeOut+0x3e>
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	e7fe      	b.n	8004bd8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004bda:	f000 ff67 	bl	8005aac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004bde:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <xTaskCheckForTimeOut+0xb8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf6:	d102      	bne.n	8004bfe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61fb      	str	r3, [r7, #28]
 8004bfc:	e023      	b.n	8004c46 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4b15      	ldr	r3, [pc, #84]	; (8004c58 <xTaskCheckForTimeOut+0xbc>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d007      	beq.n	8004c1a <xTaskCheckForTimeOut+0x7e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	69ba      	ldr	r2, [r7, #24]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d302      	bcc.n	8004c1a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c14:	2301      	movs	r3, #1
 8004c16:	61fb      	str	r3, [r7, #28]
 8004c18:	e015      	b.n	8004c46 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d20b      	bcs.n	8004c3c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	1ad2      	subs	r2, r2, r3
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff ff9d 	bl	8004b70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	61fb      	str	r3, [r7, #28]
 8004c3a:	e004      	b.n	8004c46 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004c42:	2301      	movs	r3, #1
 8004c44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004c46:	f000 ff5f 	bl	8005b08 <vPortExitCritical>

	return xReturn;
 8004c4a:	69fb      	ldr	r3, [r7, #28]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3720      	adds	r7, #32
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20000cf8 	.word	0x20000cf8
 8004c58:	20000d0c 	.word	0x20000d0c

08004c5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004c60:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <vTaskMissedYield+0x14>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	601a      	str	r2, [r3, #0]
}
 8004c66:	bf00      	nop
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	20000d08 	.word	0x20000d08

08004c74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c7c:	f000 f852 	bl	8004d24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c80:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <prvIdleTask+0x28>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d9f9      	bls.n	8004c7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c88:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <prvIdleTask+0x2c>)
 8004c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	f3bf 8f4f 	dsb	sy
 8004c94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c98:	e7f0      	b.n	8004c7c <prvIdleTask+0x8>
 8004c9a:	bf00      	nop
 8004c9c:	20000824 	.word	0x20000824
 8004ca0:	e000ed04 	.word	0xe000ed04

08004ca4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004caa:	2300      	movs	r3, #0
 8004cac:	607b      	str	r3, [r7, #4]
 8004cae:	e00c      	b.n	8004cca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4a12      	ldr	r2, [pc, #72]	; (8004d04 <prvInitialiseTaskLists+0x60>)
 8004cbc:	4413      	add	r3, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fe f9da 	bl	8003078 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	607b      	str	r3, [r7, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b37      	cmp	r3, #55	; 0x37
 8004cce:	d9ef      	bls.n	8004cb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004cd0:	480d      	ldr	r0, [pc, #52]	; (8004d08 <prvInitialiseTaskLists+0x64>)
 8004cd2:	f7fe f9d1 	bl	8003078 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cd6:	480d      	ldr	r0, [pc, #52]	; (8004d0c <prvInitialiseTaskLists+0x68>)
 8004cd8:	f7fe f9ce 	bl	8003078 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004cdc:	480c      	ldr	r0, [pc, #48]	; (8004d10 <prvInitialiseTaskLists+0x6c>)
 8004cde:	f7fe f9cb 	bl	8003078 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004ce2:	480c      	ldr	r0, [pc, #48]	; (8004d14 <prvInitialiseTaskLists+0x70>)
 8004ce4:	f7fe f9c8 	bl	8003078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ce8:	480b      	ldr	r0, [pc, #44]	; (8004d18 <prvInitialiseTaskLists+0x74>)
 8004cea:	f7fe f9c5 	bl	8003078 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004cee:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <prvInitialiseTaskLists+0x78>)
 8004cf0:	4a05      	ldr	r2, [pc, #20]	; (8004d08 <prvInitialiseTaskLists+0x64>)
 8004cf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <prvInitialiseTaskLists+0x7c>)
 8004cf6:	4a05      	ldr	r2, [pc, #20]	; (8004d0c <prvInitialiseTaskLists+0x68>)
 8004cf8:	601a      	str	r2, [r3, #0]
}
 8004cfa:	bf00      	nop
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20000824 	.word	0x20000824
 8004d08:	20000c84 	.word	0x20000c84
 8004d0c:	20000c98 	.word	0x20000c98
 8004d10:	20000cb4 	.word	0x20000cb4
 8004d14:	20000cc8 	.word	0x20000cc8
 8004d18:	20000ce0 	.word	0x20000ce0
 8004d1c:	20000cac 	.word	0x20000cac
 8004d20:	20000cb0 	.word	0x20000cb0

08004d24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d2a:	e019      	b.n	8004d60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d2c:	f000 febe 	bl	8005aac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d30:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <prvCheckTasksWaitingTermination+0x4c>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fe fa25 	bl	800318c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d42:	4b0c      	ldr	r3, [pc, #48]	; (8004d74 <prvCheckTasksWaitingTermination+0x50>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3b01      	subs	r3, #1
 8004d48:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <prvCheckTasksWaitingTermination+0x50>)
 8004d4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d4c:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <prvCheckTasksWaitingTermination+0x54>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	4a09      	ldr	r2, [pc, #36]	; (8004d78 <prvCheckTasksWaitingTermination+0x54>)
 8004d54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d56:	f000 fed7 	bl	8005b08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f80e 	bl	8004d7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <prvCheckTasksWaitingTermination+0x54>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e1      	bne.n	8004d2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d68:	bf00      	nop
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	20000cc8 	.word	0x20000cc8
 8004d74:	20000cf4 	.word	0x20000cf4
 8004d78:	20000cdc 	.word	0x20000cdc

08004d7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3354      	adds	r3, #84	; 0x54
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f001 f9d1 	bl	8006130 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d108      	bne.n	8004daa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 f867 	bl	8005e70 <vPortFree>
				vPortFree( pxTCB );
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f001 f864 	bl	8005e70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004da8:	e017      	b.n	8004dda <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d103      	bne.n	8004dbc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f001 f85b 	bl	8005e70 <vPortFree>
	}
 8004dba:	e00e      	b.n	8004dda <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d009      	beq.n	8004dda <prvDeleteTCB+0x5e>
 8004dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	e7fe      	b.n	8004dd8 <prvDeleteTCB+0x5c>
	}
 8004dda:	bf00      	nop
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
	...

08004de4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dea:	4b0c      	ldr	r3, [pc, #48]	; (8004e1c <prvResetNextTaskUnblockTime+0x38>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d104      	bne.n	8004dfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004df4:	4b0a      	ldr	r3, [pc, #40]	; (8004e20 <prvResetNextTaskUnblockTime+0x3c>)
 8004df6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004dfc:	e008      	b.n	8004e10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dfe:	4b07      	ldr	r3, [pc, #28]	; (8004e1c <prvResetNextTaskUnblockTime+0x38>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	4a04      	ldr	r2, [pc, #16]	; (8004e20 <prvResetNextTaskUnblockTime+0x3c>)
 8004e0e:	6013      	str	r3, [r2, #0]
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	20000cac 	.word	0x20000cac
 8004e20:	20000d14 	.word	0x20000d14

08004e24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e2a:	4b0b      	ldr	r3, [pc, #44]	; (8004e58 <xTaskGetSchedulerState+0x34>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e32:	2301      	movs	r3, #1
 8004e34:	607b      	str	r3, [r7, #4]
 8004e36:	e008      	b.n	8004e4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e38:	4b08      	ldr	r3, [pc, #32]	; (8004e5c <xTaskGetSchedulerState+0x38>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d102      	bne.n	8004e46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004e40:	2302      	movs	r3, #2
 8004e42:	607b      	str	r3, [r7, #4]
 8004e44:	e001      	b.n	8004e4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004e46:	2300      	movs	r3, #0
 8004e48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004e4a:	687b      	ldr	r3, [r7, #4]
	}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	20000d00 	.word	0x20000d00
 8004e5c:	20000d1c 	.word	0x20000d1c

08004e60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d051      	beq.n	8004f1a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e7a:	4b2a      	ldr	r3, [pc, #168]	; (8004f24 <xTaskPriorityInherit+0xc4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d241      	bcs.n	8004f08 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	db06      	blt.n	8004e9a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e8c:	4b25      	ldr	r3, [pc, #148]	; (8004f24 <xTaskPriorityInherit+0xc4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	6959      	ldr	r1, [r3, #20]
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4a1f      	ldr	r2, [pc, #124]	; (8004f28 <xTaskPriorityInherit+0xc8>)
 8004eac:	4413      	add	r3, r2
 8004eae:	4299      	cmp	r1, r3
 8004eb0:	d122      	bne.n	8004ef8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fe f968 	bl	800318c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ebc:	4b19      	ldr	r3, [pc, #100]	; (8004f24 <xTaskPriorityInherit+0xc4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eca:	4b18      	ldr	r3, [pc, #96]	; (8004f2c <xTaskPriorityInherit+0xcc>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d903      	bls.n	8004eda <xTaskPriorityInherit+0x7a>
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed6:	4a15      	ldr	r2, [pc, #84]	; (8004f2c <xTaskPriorityInherit+0xcc>)
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4a10      	ldr	r2, [pc, #64]	; (8004f28 <xTaskPriorityInherit+0xc8>)
 8004ee8:	441a      	add	r2, r3
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	3304      	adds	r3, #4
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	f7fe f8ee 	bl	80030d2 <vListInsertEnd>
 8004ef6:	e004      	b.n	8004f02 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <xTaskPriorityInherit+0xc4>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004f02:	2301      	movs	r3, #1
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	e008      	b.n	8004f1a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <xTaskPriorityInherit+0xc4>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d201      	bcs.n	8004f1a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004f16:	2301      	movs	r3, #1
 8004f18:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
	}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	20000820 	.word	0x20000820
 8004f28:	20000824 	.word	0x20000824
 8004f2c:	20000cfc 	.word	0x20000cfc

08004f30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d054      	beq.n	8004ff0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f46:	4b2d      	ldr	r3, [pc, #180]	; (8004ffc <xTaskPriorityDisinherit+0xcc>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d009      	beq.n	8004f64 <xTaskPriorityDisinherit+0x34>
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	60fb      	str	r3, [r7, #12]
 8004f62:	e7fe      	b.n	8004f62 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d109      	bne.n	8004f80 <xTaskPriorityDisinherit+0x50>
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	e7fe      	b.n	8004f7e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f84:	1e5a      	subs	r2, r3, #1
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d02c      	beq.n	8004ff0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d128      	bne.n	8004ff0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fe f8f2 	bl	800318c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <xTaskPriorityDisinherit+0xd0>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d903      	bls.n	8004fd0 <xTaskPriorityDisinherit+0xa0>
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fcc:	4a0c      	ldr	r2, [pc, #48]	; (8005000 <xTaskPriorityDisinherit+0xd0>)
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	4a09      	ldr	r2, [pc, #36]	; (8005004 <xTaskPriorityDisinherit+0xd4>)
 8004fde:	441a      	add	r2, r3
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	f7fe f873 	bl	80030d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004fec:	2301      	movs	r3, #1
 8004fee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ff0:	697b      	ldr	r3, [r7, #20]
	}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000820 	.word	0x20000820
 8005000:	20000cfc 	.word	0x20000cfc
 8005004:	20000824 	.word	0x20000824

08005008 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005016:	2301      	movs	r3, #1
 8005018:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d068      	beq.n	80050f2 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005024:	2b00      	cmp	r3, #0
 8005026:	d109      	bne.n	800503c <vTaskPriorityDisinheritAfterTimeout+0x34>
 8005028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	e7fe      	b.n	800503a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d902      	bls.n	800504c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	61fb      	str	r3, [r7, #28]
 800504a:	e002      	b.n	8005052 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005050:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005056:	69fa      	ldr	r2, [r7, #28]
 8005058:	429a      	cmp	r2, r3
 800505a:	d04a      	beq.n	80050f2 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	429a      	cmp	r2, r3
 8005064:	d145      	bne.n	80050f2 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005066:	4b25      	ldr	r3, [pc, #148]	; (80050fc <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	429a      	cmp	r2, r3
 800506e:	d109      	bne.n	8005084 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8005070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005074:	f383 8811 	msr	BASEPRI, r3
 8005078:	f3bf 8f6f 	isb	sy
 800507c:	f3bf 8f4f 	dsb	sy
 8005080:	60bb      	str	r3, [r7, #8]
 8005082:	e7fe      	b.n	8005082 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	2b00      	cmp	r3, #0
 8005096:	db04      	blt.n	80050a2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	6959      	ldr	r1, [r3, #20]
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4a13      	ldr	r2, [pc, #76]	; (8005100 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80050b2:	4413      	add	r3, r2
 80050b4:	4299      	cmp	r1, r3
 80050b6:	d11c      	bne.n	80050f2 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4618      	mov	r0, r3
 80050be:	f7fe f865 	bl	800318c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c6:	4b0f      	ldr	r3, [pc, #60]	; (8005104 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d903      	bls.n	80050d6 <vTaskPriorityDisinheritAfterTimeout+0xce>
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d2:	4a0c      	ldr	r2, [pc, #48]	; (8005104 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050da:	4613      	mov	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4a07      	ldr	r2, [pc, #28]	; (8005100 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80050e4:	441a      	add	r2, r3
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	3304      	adds	r3, #4
 80050ea:	4619      	mov	r1, r3
 80050ec:	4610      	mov	r0, r2
 80050ee:	f7fd fff0 	bl	80030d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050f2:	bf00      	nop
 80050f4:	3720      	adds	r7, #32
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000820 	.word	0x20000820
 8005100:	20000824 	.word	0x20000824
 8005104:	20000cfc 	.word	0x20000cfc

08005108 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800510c:	4b07      	ldr	r3, [pc, #28]	; (800512c <pvTaskIncrementMutexHeldCount+0x24>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d004      	beq.n	800511e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005114:	4b05      	ldr	r3, [pc, #20]	; (800512c <pvTaskIncrementMutexHeldCount+0x24>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800511a:	3201      	adds	r2, #1
 800511c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800511e:	4b03      	ldr	r3, [pc, #12]	; (800512c <pvTaskIncrementMutexHeldCount+0x24>)
 8005120:	681b      	ldr	r3, [r3, #0]
	}
 8005122:	4618      	mov	r0, r3
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	20000820 	.word	0x20000820

08005130 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800513a:	4b21      	ldr	r3, [pc, #132]	; (80051c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005140:	4b20      	ldr	r3, [pc, #128]	; (80051c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3304      	adds	r3, #4
 8005146:	4618      	mov	r0, r3
 8005148:	f7fe f820 	bl	800318c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005152:	d10a      	bne.n	800516a <prvAddCurrentTaskToDelayedList+0x3a>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d007      	beq.n	800516a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800515a:	4b1a      	ldr	r3, [pc, #104]	; (80051c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3304      	adds	r3, #4
 8005160:	4619      	mov	r1, r3
 8005162:	4819      	ldr	r0, [pc, #100]	; (80051c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005164:	f7fd ffb5 	bl	80030d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005168:	e026      	b.n	80051b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4413      	add	r3, r2
 8005170:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005172:	4b14      	ldr	r3, [pc, #80]	; (80051c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	429a      	cmp	r2, r3
 8005180:	d209      	bcs.n	8005196 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005182:	4b12      	ldr	r3, [pc, #72]	; (80051cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3304      	adds	r3, #4
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f7fd ffc3 	bl	800311a <vListInsert>
}
 8005194:	e010      	b.n	80051b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005196:	4b0e      	ldr	r3, [pc, #56]	; (80051d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	4b0a      	ldr	r3, [pc, #40]	; (80051c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3304      	adds	r3, #4
 80051a0:	4619      	mov	r1, r3
 80051a2:	4610      	mov	r0, r2
 80051a4:	f7fd ffb9 	bl	800311a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051a8:	4b0a      	ldr	r3, [pc, #40]	; (80051d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d202      	bcs.n	80051b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80051b2:	4a08      	ldr	r2, [pc, #32]	; (80051d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	6013      	str	r3, [r2, #0]
}
 80051b8:	bf00      	nop
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	20000cf8 	.word	0x20000cf8
 80051c4:	20000820 	.word	0x20000820
 80051c8:	20000ce0 	.word	0x20000ce0
 80051cc:	20000cb0 	.word	0x20000cb0
 80051d0:	20000cac 	.word	0x20000cac
 80051d4:	20000d14 	.word	0x20000d14

080051d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	; 0x28
 80051dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80051de:	2300      	movs	r3, #0
 80051e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051e2:	f000 faff 	bl	80057e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80051e6:	4b1c      	ldr	r3, [pc, #112]	; (8005258 <xTimerCreateTimerTask+0x80>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d021      	beq.n	8005232 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80051f6:	1d3a      	adds	r2, r7, #4
 80051f8:	f107 0108 	add.w	r1, r7, #8
 80051fc:	f107 030c 	add.w	r3, r7, #12
 8005200:	4618      	mov	r0, r3
 8005202:	f7fd ff1f 	bl	8003044 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	9202      	str	r2, [sp, #8]
 800520e:	9301      	str	r3, [sp, #4]
 8005210:	2302      	movs	r3, #2
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	2300      	movs	r3, #0
 8005216:	460a      	mov	r2, r1
 8005218:	4910      	ldr	r1, [pc, #64]	; (800525c <xTimerCreateTimerTask+0x84>)
 800521a:	4811      	ldr	r0, [pc, #68]	; (8005260 <xTimerCreateTimerTask+0x88>)
 800521c:	f7fe ffca 	bl	80041b4 <xTaskCreateStatic>
 8005220:	4602      	mov	r2, r0
 8005222:	4b10      	ldr	r3, [pc, #64]	; (8005264 <xTimerCreateTimerTask+0x8c>)
 8005224:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005226:	4b0f      	ldr	r3, [pc, #60]	; (8005264 <xTimerCreateTimerTask+0x8c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800522e:	2301      	movs	r3, #1
 8005230:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d109      	bne.n	800524c <xTimerCreateTimerTask+0x74>
 8005238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	613b      	str	r3, [r7, #16]
 800524a:	e7fe      	b.n	800524a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800524c:	697b      	ldr	r3, [r7, #20]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20000d50 	.word	0x20000d50
 800525c:	080062c8 	.word	0x080062c8
 8005260:	08005399 	.word	0x08005399
 8005264:	20000d54 	.word	0x20000d54

08005268 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	; 0x28
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
 8005274:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005276:	2300      	movs	r3, #0
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d109      	bne.n	8005294 <xTimerGenericCommand+0x2c>
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	623b      	str	r3, [r7, #32]
 8005292:	e7fe      	b.n	8005292 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005294:	4b19      	ldr	r3, [pc, #100]	; (80052fc <xTimerGenericCommand+0x94>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d02a      	beq.n	80052f2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2b05      	cmp	r3, #5
 80052ac:	dc18      	bgt.n	80052e0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80052ae:	f7ff fdb9 	bl	8004e24 <xTaskGetSchedulerState>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d109      	bne.n	80052cc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80052b8:	4b10      	ldr	r3, [pc, #64]	; (80052fc <xTimerGenericCommand+0x94>)
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	f107 0110 	add.w	r1, r7, #16
 80052c0:	2300      	movs	r3, #0
 80052c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052c4:	f7fe f92a 	bl	800351c <xQueueGenericSend>
 80052c8:	6278      	str	r0, [r7, #36]	; 0x24
 80052ca:	e012      	b.n	80052f2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <xTimerGenericCommand+0x94>)
 80052ce:	6818      	ldr	r0, [r3, #0]
 80052d0:	f107 0110 	add.w	r1, r7, #16
 80052d4:	2300      	movs	r3, #0
 80052d6:	2200      	movs	r2, #0
 80052d8:	f7fe f920 	bl	800351c <xQueueGenericSend>
 80052dc:	6278      	str	r0, [r7, #36]	; 0x24
 80052de:	e008      	b.n	80052f2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80052e0:	4b06      	ldr	r3, [pc, #24]	; (80052fc <xTimerGenericCommand+0x94>)
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	f107 0110 	add.w	r1, r7, #16
 80052e8:	2300      	movs	r3, #0
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	f7fe fa10 	bl	8003710 <xQueueGenericSendFromISR>
 80052f0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3728      	adds	r7, #40	; 0x28
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	20000d50 	.word	0x20000d50

08005300 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af02      	add	r7, sp, #8
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800530a:	4b22      	ldr	r3, [pc, #136]	; (8005394 <prvProcessExpiredTimer+0x94>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	3304      	adds	r3, #4
 8005318:	4618      	mov	r0, r3
 800531a:	f7fd ff37 	bl	800318c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d021      	beq.n	8005370 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	699a      	ldr	r2, [r3, #24]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	18d1      	adds	r1, r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	6978      	ldr	r0, [r7, #20]
 800533a:	f000 f8d1 	bl	80054e0 <prvInsertTimerInActiveList>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01e      	beq.n	8005382 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005344:	2300      	movs	r3, #0
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	2300      	movs	r3, #0
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	2100      	movs	r1, #0
 800534e:	6978      	ldr	r0, [r7, #20]
 8005350:	f7ff ff8a 	bl	8005268 <xTimerGenericCommand>
 8005354:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d112      	bne.n	8005382 <prvProcessExpiredTimer+0x82>
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	e7fe      	b.n	800536e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005376:	f023 0301 	bic.w	r3, r3, #1
 800537a:	b2da      	uxtb	r2, r3
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	6978      	ldr	r0, [r7, #20]
 8005388:	4798      	blx	r3
}
 800538a:	bf00      	nop
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20000d48 	.word	0x20000d48

08005398 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053a0:	f107 0308 	add.w	r3, r7, #8
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 f857 	bl	8005458 <prvGetNextExpireTime>
 80053aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4619      	mov	r1, r3
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 f803 	bl	80053bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80053b6:	f000 f8d5 	bl	8005564 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80053ba:	e7f1      	b.n	80053a0 <prvTimerTask+0x8>

080053bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80053c6:	f7ff f94d 	bl	8004664 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80053ca:	f107 0308 	add.w	r3, r7, #8
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 f866 	bl	80054a0 <prvSampleTimeNow>
 80053d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d130      	bne.n	800543e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10a      	bne.n	80053f8 <prvProcessTimerOrBlockTask+0x3c>
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d806      	bhi.n	80053f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80053ea:	f7ff f949 	bl	8004680 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80053ee:	68f9      	ldr	r1, [r7, #12]
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff ff85 	bl	8005300 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80053f6:	e024      	b.n	8005442 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d008      	beq.n	8005410 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80053fe:	4b13      	ldr	r3, [pc, #76]	; (800544c <prvProcessTimerOrBlockTask+0x90>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d101      	bne.n	800540c <prvProcessTimerOrBlockTask+0x50>
 8005408:	2301      	movs	r3, #1
 800540a:	e000      	b.n	800540e <prvProcessTimerOrBlockTask+0x52>
 800540c:	2300      	movs	r3, #0
 800540e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005410:	4b0f      	ldr	r3, [pc, #60]	; (8005450 <prvProcessTimerOrBlockTask+0x94>)
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	4619      	mov	r1, r3
 800541e:	f7fe fe95 	bl	800414c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005422:	f7ff f92d 	bl	8004680 <xTaskResumeAll>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10a      	bne.n	8005442 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800542c:	4b09      	ldr	r3, [pc, #36]	; (8005454 <prvProcessTimerOrBlockTask+0x98>)
 800542e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	f3bf 8f6f 	isb	sy
}
 800543c:	e001      	b.n	8005442 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800543e:	f7ff f91f 	bl	8004680 <xTaskResumeAll>
}
 8005442:	bf00      	nop
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	20000d4c 	.word	0x20000d4c
 8005450:	20000d50 	.word	0x20000d50
 8005454:	e000ed04 	.word	0xe000ed04

08005458 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005460:	4b0e      	ldr	r3, [pc, #56]	; (800549c <prvGetNextExpireTime+0x44>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <prvGetNextExpireTime+0x16>
 800546a:	2201      	movs	r2, #1
 800546c:	e000      	b.n	8005470 <prvGetNextExpireTime+0x18>
 800546e:	2200      	movs	r2, #0
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d105      	bne.n	8005488 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800547c:	4b07      	ldr	r3, [pc, #28]	; (800549c <prvGetNextExpireTime+0x44>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	e001      	b.n	800548c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800548c:	68fb      	ldr	r3, [r7, #12]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	20000d48 	.word	0x20000d48

080054a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80054a8:	f7ff f986 	bl	80047b8 <xTaskGetTickCount>
 80054ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80054ae:	4b0b      	ldr	r3, [pc, #44]	; (80054dc <prvSampleTimeNow+0x3c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d205      	bcs.n	80054c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80054b8:	f000 f930 	bl	800571c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	e002      	b.n	80054ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80054ca:	4a04      	ldr	r2, [pc, #16]	; (80054dc <prvSampleTimeNow+0x3c>)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80054d0:	68fb      	ldr	r3, [r7, #12]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	20000d58 	.word	0x20000d58

080054e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80054ee:	2300      	movs	r3, #0
 80054f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d812      	bhi.n	800552c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	1ad2      	subs	r2, r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	429a      	cmp	r2, r3
 8005512:	d302      	bcc.n	800551a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005514:	2301      	movs	r3, #1
 8005516:	617b      	str	r3, [r7, #20]
 8005518:	e01b      	b.n	8005552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800551a:	4b10      	ldr	r3, [pc, #64]	; (800555c <prvInsertTimerInActiveList+0x7c>)
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3304      	adds	r3, #4
 8005522:	4619      	mov	r1, r3
 8005524:	4610      	mov	r0, r2
 8005526:	f7fd fdf8 	bl	800311a <vListInsert>
 800552a:	e012      	b.n	8005552 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	429a      	cmp	r2, r3
 8005532:	d206      	bcs.n	8005542 <prvInsertTimerInActiveList+0x62>
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d302      	bcc.n	8005542 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800553c:	2301      	movs	r3, #1
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	e007      	b.n	8005552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005542:	4b07      	ldr	r3, [pc, #28]	; (8005560 <prvInsertTimerInActiveList+0x80>)
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3304      	adds	r3, #4
 800554a:	4619      	mov	r1, r3
 800554c:	4610      	mov	r0, r2
 800554e:	f7fd fde4 	bl	800311a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005552:	697b      	ldr	r3, [r7, #20]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20000d4c 	.word	0x20000d4c
 8005560:	20000d48 	.word	0x20000d48

08005564 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08e      	sub	sp, #56	; 0x38
 8005568:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800556a:	e0c6      	b.n	80056fa <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	da17      	bge.n	80055a2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005572:	1d3b      	adds	r3, r7, #4
 8005574:	3304      	adds	r3, #4
 8005576:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557a:	2b00      	cmp	r3, #0
 800557c:	d109      	bne.n	8005592 <prvProcessReceivedCommands+0x2e>
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	61fb      	str	r3, [r7, #28]
 8005590:	e7fe      	b.n	8005590 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005598:	6850      	ldr	r0, [r2, #4]
 800559a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800559c:	6892      	ldr	r2, [r2, #8]
 800559e:	4611      	mov	r1, r2
 80055a0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f2c0 80a7 	blt.w	80056f8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d004      	beq.n	80055c0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	3304      	adds	r3, #4
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fd fde6 	bl	800318c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055c0:	463b      	mov	r3, r7
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff ff6c 	bl	80054a0 <prvSampleTimeNow>
 80055c8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b09      	cmp	r3, #9
 80055ce:	f200 8094 	bhi.w	80056fa <prvProcessReceivedCommands+0x196>
 80055d2:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <prvProcessReceivedCommands+0x74>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	08005601 	.word	0x08005601
 80055dc:	08005601 	.word	0x08005601
 80055e0:	08005601 	.word	0x08005601
 80055e4:	08005673 	.word	0x08005673
 80055e8:	08005687 	.word	0x08005687
 80055ec:	080056cf 	.word	0x080056cf
 80055f0:	08005601 	.word	0x08005601
 80055f4:	08005601 	.word	0x08005601
 80055f8:	08005673 	.word	0x08005673
 80055fc:	08005687 	.word	0x08005687
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005606:	f043 0301 	orr.w	r3, r3, #1
 800560a:	b2da      	uxtb	r2, r3
 800560c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	18d1      	adds	r1, r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005620:	f7ff ff5e 	bl	80054e0 <prvInsertTimerInActiveList>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d067      	beq.n	80056fa <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800562a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005630:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005638:	f003 0304 	and.w	r3, r3, #4
 800563c:	2b00      	cmp	r3, #0
 800563e:	d05c      	beq.n	80056fa <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	441a      	add	r2, r3
 8005648:	2300      	movs	r3, #0
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	2300      	movs	r3, #0
 800564e:	2100      	movs	r1, #0
 8005650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005652:	f7ff fe09 	bl	8005268 <xTimerGenericCommand>
 8005656:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d14d      	bne.n	80056fa <prvProcessReceivedCommands+0x196>
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	e7fe      	b.n	8005670 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005678:	f023 0301 	bic.w	r3, r3, #1
 800567c:	b2da      	uxtb	r2, r3
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005684:	e039      	b.n	80056fa <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800568c:	f043 0301 	orr.w	r3, r3, #1
 8005690:	b2da      	uxtb	r2, r3
 8005692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005694:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <prvProcessReceivedCommands+0x156>
 80056a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	e7fe      	b.n	80056b8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80056ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	18d1      	adds	r1, r2, r3
 80056c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056c8:	f7ff ff0a 	bl	80054e0 <prvInsertTimerInActiveList>
					break;
 80056cc:	e015      	b.n	80056fa <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056d4:	f003 0302 	and.w	r3, r3, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d103      	bne.n	80056e4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80056dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056de:	f000 fbc7 	bl	8005e70 <vPortFree>
 80056e2:	e00a      	b.n	80056fa <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056ea:	f023 0301 	bic.w	r3, r3, #1
 80056ee:	b2da      	uxtb	r2, r3
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80056f6:	e000      	b.n	80056fa <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80056f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056fa:	4b07      	ldr	r3, [pc, #28]	; (8005718 <prvProcessReceivedCommands+0x1b4>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	1d39      	adds	r1, r7, #4
 8005700:	2200      	movs	r2, #0
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe f924 	bl	8003950 <xQueueReceive>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	f47f af2e 	bne.w	800556c <prvProcessReceivedCommands+0x8>
	}
}
 8005710:	bf00      	nop
 8005712:	3730      	adds	r7, #48	; 0x30
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	20000d50 	.word	0x20000d50

0800571c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005722:	e047      	b.n	80057b4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005724:	4b2d      	ldr	r3, [pc, #180]	; (80057dc <prvSwitchTimerLists+0xc0>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800572e:	4b2b      	ldr	r3, [pc, #172]	; (80057dc <prvSwitchTimerLists+0xc0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3304      	adds	r3, #4
 800573c:	4618      	mov	r0, r3
 800573e:	f7fd fd25 	bl	800318c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	d02d      	beq.n	80057b4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4413      	add	r3, r2
 8005760:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	429a      	cmp	r2, r3
 8005768:	d90e      	bls.n	8005788 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005776:	4b19      	ldr	r3, [pc, #100]	; (80057dc <prvSwitchTimerLists+0xc0>)
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	3304      	adds	r3, #4
 800577e:	4619      	mov	r1, r3
 8005780:	4610      	mov	r0, r2
 8005782:	f7fd fcca 	bl	800311a <vListInsert>
 8005786:	e015      	b.n	80057b4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005788:	2300      	movs	r3, #0
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	2300      	movs	r3, #0
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	2100      	movs	r1, #0
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f7ff fd68 	bl	8005268 <xTimerGenericCommand>
 8005798:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d109      	bne.n	80057b4 <prvSwitchTimerLists+0x98>
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	603b      	str	r3, [r7, #0]
 80057b2:	e7fe      	b.n	80057b2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057b4:	4b09      	ldr	r3, [pc, #36]	; (80057dc <prvSwitchTimerLists+0xc0>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1b2      	bne.n	8005724 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80057be:	4b07      	ldr	r3, [pc, #28]	; (80057dc <prvSwitchTimerLists+0xc0>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80057c4:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <prvSwitchTimerLists+0xc4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a04      	ldr	r2, [pc, #16]	; (80057dc <prvSwitchTimerLists+0xc0>)
 80057ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80057cc:	4a04      	ldr	r2, [pc, #16]	; (80057e0 <prvSwitchTimerLists+0xc4>)
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	6013      	str	r3, [r2, #0]
}
 80057d2:	bf00      	nop
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	20000d48 	.word	0x20000d48
 80057e0:	20000d4c 	.word	0x20000d4c

080057e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80057ea:	f000 f95f 	bl	8005aac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80057ee:	4b15      	ldr	r3, [pc, #84]	; (8005844 <prvCheckForValidListAndQueue+0x60>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d120      	bne.n	8005838 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80057f6:	4814      	ldr	r0, [pc, #80]	; (8005848 <prvCheckForValidListAndQueue+0x64>)
 80057f8:	f7fd fc3e 	bl	8003078 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80057fc:	4813      	ldr	r0, [pc, #76]	; (800584c <prvCheckForValidListAndQueue+0x68>)
 80057fe:	f7fd fc3b 	bl	8003078 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005802:	4b13      	ldr	r3, [pc, #76]	; (8005850 <prvCheckForValidListAndQueue+0x6c>)
 8005804:	4a10      	ldr	r2, [pc, #64]	; (8005848 <prvCheckForValidListAndQueue+0x64>)
 8005806:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005808:	4b12      	ldr	r3, [pc, #72]	; (8005854 <prvCheckForValidListAndQueue+0x70>)
 800580a:	4a10      	ldr	r2, [pc, #64]	; (800584c <prvCheckForValidListAndQueue+0x68>)
 800580c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800580e:	2300      	movs	r3, #0
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	4b11      	ldr	r3, [pc, #68]	; (8005858 <prvCheckForValidListAndQueue+0x74>)
 8005814:	4a11      	ldr	r2, [pc, #68]	; (800585c <prvCheckForValidListAndQueue+0x78>)
 8005816:	2110      	movs	r1, #16
 8005818:	200a      	movs	r0, #10
 800581a:	f7fd fd49 	bl	80032b0 <xQueueGenericCreateStatic>
 800581e:	4602      	mov	r2, r0
 8005820:	4b08      	ldr	r3, [pc, #32]	; (8005844 <prvCheckForValidListAndQueue+0x60>)
 8005822:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005824:	4b07      	ldr	r3, [pc, #28]	; (8005844 <prvCheckForValidListAndQueue+0x60>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d005      	beq.n	8005838 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800582c:	4b05      	ldr	r3, [pc, #20]	; (8005844 <prvCheckForValidListAndQueue+0x60>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	490b      	ldr	r1, [pc, #44]	; (8005860 <prvCheckForValidListAndQueue+0x7c>)
 8005832:	4618      	mov	r0, r3
 8005834:	f7fe fc38 	bl	80040a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005838:	f000 f966 	bl	8005b08 <vPortExitCritical>
}
 800583c:	bf00      	nop
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	20000d50 	.word	0x20000d50
 8005848:	20000d20 	.word	0x20000d20
 800584c:	20000d34 	.word	0x20000d34
 8005850:	20000d48 	.word	0x20000d48
 8005854:	20000d4c 	.word	0x20000d4c
 8005858:	20000dfc 	.word	0x20000dfc
 800585c:	20000d5c 	.word	0x20000d5c
 8005860:	080062d0 	.word	0x080062d0

08005864 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3b04      	subs	r3, #4
 8005874:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800587c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3b04      	subs	r3, #4
 8005882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	f023 0201 	bic.w	r2, r3, #1
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3b04      	subs	r3, #4
 8005892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005894:	4a0c      	ldr	r2, [pc, #48]	; (80058c8 <pxPortInitialiseStack+0x64>)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3b14      	subs	r3, #20
 800589e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3b04      	subs	r3, #4
 80058aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f06f 0202 	mvn.w	r2, #2
 80058b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	3b20      	subs	r3, #32
 80058b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058ba:	68fb      	ldr	r3, [r7, #12]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	080058cd 	.word	0x080058cd

080058cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80058d2:	2300      	movs	r3, #0
 80058d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058d6:	4b11      	ldr	r3, [pc, #68]	; (800591c <prvTaskExitError+0x50>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058de:	d009      	beq.n	80058f4 <prvTaskExitError+0x28>
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	60fb      	str	r3, [r7, #12]
 80058f2:	e7fe      	b.n	80058f2 <prvTaskExitError+0x26>
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005906:	bf00      	nop
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0fc      	beq.n	8005908 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800590e:	bf00      	nop
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	2000000c 	.word	0x2000000c

08005920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005920:	4b07      	ldr	r3, [pc, #28]	; (8005940 <pxCurrentTCBConst2>)
 8005922:	6819      	ldr	r1, [r3, #0]
 8005924:	6808      	ldr	r0, [r1, #0]
 8005926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592a:	f380 8809 	msr	PSP, r0
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f04f 0000 	mov.w	r0, #0
 8005936:	f380 8811 	msr	BASEPRI, r0
 800593a:	4770      	bx	lr
 800593c:	f3af 8000 	nop.w

08005940 <pxCurrentTCBConst2>:
 8005940:	20000820 	.word	0x20000820
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop

08005948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005948:	4808      	ldr	r0, [pc, #32]	; (800596c <prvPortStartFirstTask+0x24>)
 800594a:	6800      	ldr	r0, [r0, #0]
 800594c:	6800      	ldr	r0, [r0, #0]
 800594e:	f380 8808 	msr	MSP, r0
 8005952:	f04f 0000 	mov.w	r0, #0
 8005956:	f380 8814 	msr	CONTROL, r0
 800595a:	b662      	cpsie	i
 800595c:	b661      	cpsie	f
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	f3bf 8f6f 	isb	sy
 8005966:	df00      	svc	0
 8005968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800596a:	bf00      	nop
 800596c:	e000ed08 	.word	0xe000ed08

08005970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005976:	4b44      	ldr	r3, [pc, #272]	; (8005a88 <xPortStartScheduler+0x118>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a44      	ldr	r2, [pc, #272]	; (8005a8c <xPortStartScheduler+0x11c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d109      	bne.n	8005994 <xPortStartScheduler+0x24>
 8005980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	613b      	str	r3, [r7, #16]
 8005992:	e7fe      	b.n	8005992 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005994:	4b3c      	ldr	r3, [pc, #240]	; (8005a88 <xPortStartScheduler+0x118>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a3d      	ldr	r2, [pc, #244]	; (8005a90 <xPortStartScheduler+0x120>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d109      	bne.n	80059b2 <xPortStartScheduler+0x42>
 800599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	e7fe      	b.n	80059b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059b2:	4b38      	ldr	r3, [pc, #224]	; (8005a94 <xPortStartScheduler+0x124>)
 80059b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	22ff      	movs	r2, #255	; 0xff
 80059c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059cc:	78fb      	ldrb	r3, [r7, #3]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	4b30      	ldr	r3, [pc, #192]	; (8005a98 <xPortStartScheduler+0x128>)
 80059d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059da:	4b30      	ldr	r3, [pc, #192]	; (8005a9c <xPortStartScheduler+0x12c>)
 80059dc:	2207      	movs	r2, #7
 80059de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059e0:	e009      	b.n	80059f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80059e2:	4b2e      	ldr	r3, [pc, #184]	; (8005a9c <xPortStartScheduler+0x12c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	4a2c      	ldr	r2, [pc, #176]	; (8005a9c <xPortStartScheduler+0x12c>)
 80059ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059ec:	78fb      	ldrb	r3, [r7, #3]
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059f6:	78fb      	ldrb	r3, [r7, #3]
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fe:	2b80      	cmp	r3, #128	; 0x80
 8005a00:	d0ef      	beq.n	80059e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a02:	4b26      	ldr	r3, [pc, #152]	; (8005a9c <xPortStartScheduler+0x12c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f1c3 0307 	rsb	r3, r3, #7
 8005a0a:	2b04      	cmp	r3, #4
 8005a0c:	d009      	beq.n	8005a22 <xPortStartScheduler+0xb2>
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	60bb      	str	r3, [r7, #8]
 8005a20:	e7fe      	b.n	8005a20 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a22:	4b1e      	ldr	r3, [pc, #120]	; (8005a9c <xPortStartScheduler+0x12c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	021b      	lsls	r3, r3, #8
 8005a28:	4a1c      	ldr	r2, [pc, #112]	; (8005a9c <xPortStartScheduler+0x12c>)
 8005a2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a2c:	4b1b      	ldr	r3, [pc, #108]	; (8005a9c <xPortStartScheduler+0x12c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a34:	4a19      	ldr	r2, [pc, #100]	; (8005a9c <xPortStartScheduler+0x12c>)
 8005a36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a40:	4b17      	ldr	r3, [pc, #92]	; (8005aa0 <xPortStartScheduler+0x130>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a16      	ldr	r2, [pc, #88]	; (8005aa0 <xPortStartScheduler+0x130>)
 8005a46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a4c:	4b14      	ldr	r3, [pc, #80]	; (8005aa0 <xPortStartScheduler+0x130>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a13      	ldr	r2, [pc, #76]	; (8005aa0 <xPortStartScheduler+0x130>)
 8005a52:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a58:	f000 f8d6 	bl	8005c08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a5c:	4b11      	ldr	r3, [pc, #68]	; (8005aa4 <xPortStartScheduler+0x134>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a62:	f000 f8f5 	bl	8005c50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a66:	4b10      	ldr	r3, [pc, #64]	; (8005aa8 <xPortStartScheduler+0x138>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a0f      	ldr	r2, [pc, #60]	; (8005aa8 <xPortStartScheduler+0x138>)
 8005a6c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a70:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a72:	f7ff ff69 	bl	8005948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a76:	f7fe ff67 	bl	8004948 <vTaskSwitchContext>
	prvTaskExitError();
 8005a7a:	f7ff ff27 	bl	80058cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	e000ed00 	.word	0xe000ed00
 8005a8c:	410fc271 	.word	0x410fc271
 8005a90:	410fc270 	.word	0x410fc270
 8005a94:	e000e400 	.word	0xe000e400
 8005a98:	20000e4c 	.word	0x20000e4c
 8005a9c:	20000e50 	.word	0x20000e50
 8005aa0:	e000ed20 	.word	0xe000ed20
 8005aa4:	2000000c 	.word	0x2000000c
 8005aa8:	e000ef34 	.word	0xe000ef34

08005aac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ac4:	4b0e      	ldr	r3, [pc, #56]	; (8005b00 <vPortEnterCritical+0x54>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	4a0d      	ldr	r2, [pc, #52]	; (8005b00 <vPortEnterCritical+0x54>)
 8005acc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ace:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <vPortEnterCritical+0x54>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d10e      	bne.n	8005af4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ad6:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <vPortEnterCritical+0x58>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d009      	beq.n	8005af4 <vPortEnterCritical+0x48>
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	603b      	str	r3, [r7, #0]
 8005af2:	e7fe      	b.n	8005af2 <vPortEnterCritical+0x46>
	}
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	2000000c 	.word	0x2000000c
 8005b04:	e000ed04 	.word	0xe000ed04

08005b08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b0e:	4b11      	ldr	r3, [pc, #68]	; (8005b54 <vPortExitCritical+0x4c>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d109      	bne.n	8005b2a <vPortExitCritical+0x22>
 8005b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1a:	f383 8811 	msr	BASEPRI, r3
 8005b1e:	f3bf 8f6f 	isb	sy
 8005b22:	f3bf 8f4f 	dsb	sy
 8005b26:	607b      	str	r3, [r7, #4]
 8005b28:	e7fe      	b.n	8005b28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005b2a:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <vPortExitCritical+0x4c>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	4a08      	ldr	r2, [pc, #32]	; (8005b54 <vPortExitCritical+0x4c>)
 8005b32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b34:	4b07      	ldr	r3, [pc, #28]	; (8005b54 <vPortExitCritical+0x4c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d104      	bne.n	8005b46 <vPortExitCritical+0x3e>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	2000000c 	.word	0x2000000c
	...

08005b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b60:	f3ef 8009 	mrs	r0, PSP
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <pxCurrentTCBConst>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	f01e 0f10 	tst.w	lr, #16
 8005b70:	bf08      	it	eq
 8005b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7a:	6010      	str	r0, [r2, #0]
 8005b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b84:	f380 8811 	msr	BASEPRI, r0
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f7fe feda 	bl	8004948 <vTaskSwitchContext>
 8005b94:	f04f 0000 	mov.w	r0, #0
 8005b98:	f380 8811 	msr	BASEPRI, r0
 8005b9c:	bc09      	pop	{r0, r3}
 8005b9e:	6819      	ldr	r1, [r3, #0]
 8005ba0:	6808      	ldr	r0, [r1, #0]
 8005ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba6:	f01e 0f10 	tst.w	lr, #16
 8005baa:	bf08      	it	eq
 8005bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005bb0:	f380 8809 	msr	PSP, r0
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	f3af 8000 	nop.w

08005bc0 <pxCurrentTCBConst>:
 8005bc0:	20000820 	.word	0x20000820
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop

08005bc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005be0:	f7fe fdfa 	bl	80047d8 <xTaskIncrementTick>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bea:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <xPortSysTickHandler+0x3c>)
 8005bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005bfc:	bf00      	nop
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	e000ed04 	.word	0xe000ed04

08005c08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c08:	b480      	push	{r7}
 8005c0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c0c:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <vPortSetupTimerInterrupt+0x34>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c12:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <vPortSetupTimerInterrupt+0x38>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c18:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <vPortSetupTimerInterrupt+0x3c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a0a      	ldr	r2, [pc, #40]	; (8005c48 <vPortSetupTimerInterrupt+0x40>)
 8005c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c22:	099b      	lsrs	r3, r3, #6
 8005c24:	4a09      	ldr	r2, [pc, #36]	; (8005c4c <vPortSetupTimerInterrupt+0x44>)
 8005c26:	3b01      	subs	r3, #1
 8005c28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c2a:	4b04      	ldr	r3, [pc, #16]	; (8005c3c <vPortSetupTimerInterrupt+0x34>)
 8005c2c:	2207      	movs	r2, #7
 8005c2e:	601a      	str	r2, [r3, #0]
}
 8005c30:	bf00      	nop
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	e000e010 	.word	0xe000e010
 8005c40:	e000e018 	.word	0xe000e018
 8005c44:	20000000 	.word	0x20000000
 8005c48:	10624dd3 	.word	0x10624dd3
 8005c4c:	e000e014 	.word	0xe000e014

08005c50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c60 <vPortEnableVFP+0x10>
 8005c54:	6801      	ldr	r1, [r0, #0]
 8005c56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c5a:	6001      	str	r1, [r0, #0]
 8005c5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c5e:	bf00      	nop
 8005c60:	e000ed88 	.word	0xe000ed88

08005c64 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c6a:	f3ef 8305 	mrs	r3, IPSR
 8005c6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b0f      	cmp	r3, #15
 8005c74:	d913      	bls.n	8005c9e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c76:	4a16      	ldr	r2, [pc, #88]	; (8005cd0 <vPortValidateInterruptPriority+0x6c>)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c80:	4b14      	ldr	r3, [pc, #80]	; (8005cd4 <vPortValidateInterruptPriority+0x70>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	7afa      	ldrb	r2, [r7, #11]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d209      	bcs.n	8005c9e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	607b      	str	r3, [r7, #4]
 8005c9c:	e7fe      	b.n	8005c9c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c9e:	4b0e      	ldr	r3, [pc, #56]	; (8005cd8 <vPortValidateInterruptPriority+0x74>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005ca6:	4b0d      	ldr	r3, [pc, #52]	; (8005cdc <vPortValidateInterruptPriority+0x78>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d909      	bls.n	8005cc2 <vPortValidateInterruptPriority+0x5e>
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	603b      	str	r3, [r7, #0]
 8005cc0:	e7fe      	b.n	8005cc0 <vPortValidateInterruptPriority+0x5c>
	}
 8005cc2:	bf00      	nop
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	e000e3f0 	.word	0xe000e3f0
 8005cd4:	20000e4c 	.word	0x20000e4c
 8005cd8:	e000ed0c 	.word	0xe000ed0c
 8005cdc:	20000e50 	.word	0x20000e50

08005ce0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b08a      	sub	sp, #40	; 0x28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005cec:	f7fe fcba 	bl	8004664 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005cf0:	4b59      	ldr	r3, [pc, #356]	; (8005e58 <pvPortMalloc+0x178>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005cf8:	f000 f91a 	bl	8005f30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005cfc:	4b57      	ldr	r3, [pc, #348]	; (8005e5c <pvPortMalloc+0x17c>)
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4013      	ands	r3, r2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f040 8091 	bne.w	8005e2c <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d01c      	beq.n	8005d4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005d10:	2208      	movs	r2, #8
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4413      	add	r3, r2
 8005d16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f003 0307 	and.w	r3, r3, #7
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d013      	beq.n	8005d4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f023 0307 	bic.w	r3, r3, #7
 8005d28:	3308      	adds	r3, #8
 8005d2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f003 0307 	and.w	r3, r3, #7
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d009      	beq.n	8005d4a <pvPortMalloc+0x6a>
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	e7fe      	b.n	8005d48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d06d      	beq.n	8005e2c <pvPortMalloc+0x14c>
 8005d50:	4b43      	ldr	r3, [pc, #268]	; (8005e60 <pvPortMalloc+0x180>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d868      	bhi.n	8005e2c <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d5a:	4b42      	ldr	r3, [pc, #264]	; (8005e64 <pvPortMalloc+0x184>)
 8005d5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d5e:	4b41      	ldr	r3, [pc, #260]	; (8005e64 <pvPortMalloc+0x184>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d64:	e004      	b.n	8005d70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d903      	bls.n	8005d82 <pvPortMalloc+0xa2>
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1f1      	bne.n	8005d66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d82:	4b35      	ldr	r3, [pc, #212]	; (8005e58 <pvPortMalloc+0x178>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d04f      	beq.n	8005e2c <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d8c:	6a3b      	ldr	r3, [r7, #32]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2208      	movs	r2, #8
 8005d92:	4413      	add	r3, r2
 8005d94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	1ad2      	subs	r2, r2, r3
 8005da6:	2308      	movs	r3, #8
 8005da8:	005b      	lsls	r3, r3, #1
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d91e      	bls.n	8005dec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4413      	add	r3, r2
 8005db4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d009      	beq.n	8005dd4 <pvPortMalloc+0xf4>
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	613b      	str	r3, [r7, #16]
 8005dd2:	e7fe      	b.n	8005dd2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	1ad2      	subs	r2, r2, r3
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005de6:	69b8      	ldr	r0, [r7, #24]
 8005de8:	f000 f904 	bl	8005ff4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005dec:	4b1c      	ldr	r3, [pc, #112]	; (8005e60 <pvPortMalloc+0x180>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	4a1a      	ldr	r2, [pc, #104]	; (8005e60 <pvPortMalloc+0x180>)
 8005df8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dfa:	4b19      	ldr	r3, [pc, #100]	; (8005e60 <pvPortMalloc+0x180>)
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	4b1a      	ldr	r3, [pc, #104]	; (8005e68 <pvPortMalloc+0x188>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d203      	bcs.n	8005e0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e06:	4b16      	ldr	r3, [pc, #88]	; (8005e60 <pvPortMalloc+0x180>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a17      	ldr	r2, [pc, #92]	; (8005e68 <pvPortMalloc+0x188>)
 8005e0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <pvPortMalloc+0x17c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	431a      	orrs	r2, r3
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e22:	4b12      	ldr	r3, [pc, #72]	; (8005e6c <pvPortMalloc+0x18c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3301      	adds	r3, #1
 8005e28:	4a10      	ldr	r2, [pc, #64]	; (8005e6c <pvPortMalloc+0x18c>)
 8005e2a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e2c:	f7fe fc28 	bl	8004680 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d009      	beq.n	8005e4e <pvPortMalloc+0x16e>
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	60fb      	str	r3, [r7, #12]
 8005e4c:	e7fe      	b.n	8005e4c <pvPortMalloc+0x16c>
	return pvReturn;
 8005e4e:	69fb      	ldr	r3, [r7, #28]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3728      	adds	r7, #40	; 0x28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	20004a5c 	.word	0x20004a5c
 8005e5c:	20004a70 	.word	0x20004a70
 8005e60:	20004a60 	.word	0x20004a60
 8005e64:	20004a54 	.word	0x20004a54
 8005e68:	20004a64 	.word	0x20004a64
 8005e6c:	20004a68 	.word	0x20004a68

08005e70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d04b      	beq.n	8005f1a <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e82:	2308      	movs	r3, #8
 8005e84:	425b      	negs	r3, r3
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	4413      	add	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	4b23      	ldr	r3, [pc, #140]	; (8005f24 <vPortFree+0xb4>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4013      	ands	r3, r2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d109      	bne.n	8005eb2 <vPortFree+0x42>
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	f383 8811 	msr	BASEPRI, r3
 8005ea6:	f3bf 8f6f 	isb	sy
 8005eaa:	f3bf 8f4f 	dsb	sy
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	e7fe      	b.n	8005eb0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d009      	beq.n	8005ece <vPortFree+0x5e>
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	60bb      	str	r3, [r7, #8]
 8005ecc:	e7fe      	b.n	8005ecc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	4b14      	ldr	r3, [pc, #80]	; (8005f24 <vPortFree+0xb4>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01e      	beq.n	8005f1a <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d11a      	bne.n	8005f1a <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	4b0e      	ldr	r3, [pc, #56]	; (8005f24 <vPortFree+0xb4>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	43db      	mvns	r3, r3
 8005eee:	401a      	ands	r2, r3
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ef4:	f7fe fbb6 	bl	8004664 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <vPortFree+0xb8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4413      	add	r3, r2
 8005f02:	4a09      	ldr	r2, [pc, #36]	; (8005f28 <vPortFree+0xb8>)
 8005f04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f06:	6938      	ldr	r0, [r7, #16]
 8005f08:	f000 f874 	bl	8005ff4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f0c:	4b07      	ldr	r3, [pc, #28]	; (8005f2c <vPortFree+0xbc>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3301      	adds	r3, #1
 8005f12:	4a06      	ldr	r2, [pc, #24]	; (8005f2c <vPortFree+0xbc>)
 8005f14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f16:	f7fe fbb3 	bl	8004680 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f1a:	bf00      	nop
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20004a70 	.word	0x20004a70
 8005f28:	20004a60 	.word	0x20004a60
 8005f2c:	20004a6c 	.word	0x20004a6c

08005f30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f36:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f3c:	4b27      	ldr	r3, [pc, #156]	; (8005fdc <prvHeapInit+0xac>)
 8005f3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f003 0307 	and.w	r3, r3, #7
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00c      	beq.n	8005f64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3307      	adds	r3, #7
 8005f4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0307 	bic.w	r3, r3, #7
 8005f56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	4a1f      	ldr	r2, [pc, #124]	; (8005fdc <prvHeapInit+0xac>)
 8005f60:	4413      	add	r3, r2
 8005f62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f68:	4a1d      	ldr	r2, [pc, #116]	; (8005fe0 <prvHeapInit+0xb0>)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f6e:	4b1c      	ldr	r3, [pc, #112]	; (8005fe0 <prvHeapInit+0xb0>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	4413      	add	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f7c:	2208      	movs	r2, #8
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	1a9b      	subs	r3, r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0307 	bic.w	r3, r3, #7
 8005f8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4a15      	ldr	r2, [pc, #84]	; (8005fe4 <prvHeapInit+0xb4>)
 8005f90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f92:	4b14      	ldr	r3, [pc, #80]	; (8005fe4 <prvHeapInit+0xb4>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2200      	movs	r2, #0
 8005f98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f9a:	4b12      	ldr	r3, [pc, #72]	; (8005fe4 <prvHeapInit+0xb4>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	1ad2      	subs	r2, r2, r3
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005fb0:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <prvHeapInit+0xb4>)
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	4a0a      	ldr	r2, [pc, #40]	; (8005fe8 <prvHeapInit+0xb8>)
 8005fbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	4a09      	ldr	r2, [pc, #36]	; (8005fec <prvHeapInit+0xbc>)
 8005fc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fc8:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <prvHeapInit+0xc0>)
 8005fca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005fce:	601a      	str	r2, [r3, #0]
}
 8005fd0:	bf00      	nop
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	20000e54 	.word	0x20000e54
 8005fe0:	20004a54 	.word	0x20004a54
 8005fe4:	20004a5c 	.word	0x20004a5c
 8005fe8:	20004a64 	.word	0x20004a64
 8005fec:	20004a60 	.word	0x20004a60
 8005ff0:	20004a70 	.word	0x20004a70

08005ff4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ffc:	4b28      	ldr	r3, [pc, #160]	; (80060a0 <prvInsertBlockIntoFreeList+0xac>)
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	e002      	b.n	8006008 <prvInsertBlockIntoFreeList+0x14>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	60fb      	str	r3, [r7, #12]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	429a      	cmp	r2, r3
 8006010:	d8f7      	bhi.n	8006002 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	4413      	add	r3, r2
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	429a      	cmp	r2, r3
 8006022:	d108      	bne.n	8006036 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	441a      	add	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	441a      	add	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d118      	bne.n	800607c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	4b15      	ldr	r3, [pc, #84]	; (80060a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	d00d      	beq.n	8006072 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	441a      	add	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	e008      	b.n	8006084 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006072:	4b0c      	ldr	r3, [pc, #48]	; (80060a4 <prvInsertBlockIntoFreeList+0xb0>)
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	e003      	b.n	8006084 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	429a      	cmp	r2, r3
 800608a:	d002      	beq.n	8006092 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006092:	bf00      	nop
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	20004a54 	.word	0x20004a54
 80060a4:	20004a5c 	.word	0x20004a5c

080060a8 <__libc_init_array>:
 80060a8:	b570      	push	{r4, r5, r6, lr}
 80060aa:	4e0d      	ldr	r6, [pc, #52]	; (80060e0 <__libc_init_array+0x38>)
 80060ac:	4c0d      	ldr	r4, [pc, #52]	; (80060e4 <__libc_init_array+0x3c>)
 80060ae:	1ba4      	subs	r4, r4, r6
 80060b0:	10a4      	asrs	r4, r4, #2
 80060b2:	2500      	movs	r5, #0
 80060b4:	42a5      	cmp	r5, r4
 80060b6:	d109      	bne.n	80060cc <__libc_init_array+0x24>
 80060b8:	4e0b      	ldr	r6, [pc, #44]	; (80060e8 <__libc_init_array+0x40>)
 80060ba:	4c0c      	ldr	r4, [pc, #48]	; (80060ec <__libc_init_array+0x44>)
 80060bc:	f000 f8e4 	bl	8006288 <_init>
 80060c0:	1ba4      	subs	r4, r4, r6
 80060c2:	10a4      	asrs	r4, r4, #2
 80060c4:	2500      	movs	r5, #0
 80060c6:	42a5      	cmp	r5, r4
 80060c8:	d105      	bne.n	80060d6 <__libc_init_array+0x2e>
 80060ca:	bd70      	pop	{r4, r5, r6, pc}
 80060cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060d0:	4798      	blx	r3
 80060d2:	3501      	adds	r5, #1
 80060d4:	e7ee      	b.n	80060b4 <__libc_init_array+0xc>
 80060d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060da:	4798      	blx	r3
 80060dc:	3501      	adds	r5, #1
 80060de:	e7f2      	b.n	80060c6 <__libc_init_array+0x1e>
 80060e0:	0800638c 	.word	0x0800638c
 80060e4:	0800638c 	.word	0x0800638c
 80060e8:	0800638c 	.word	0x0800638c
 80060ec:	08006390 	.word	0x08006390

080060f0 <memcpy>:
 80060f0:	b510      	push	{r4, lr}
 80060f2:	1e43      	subs	r3, r0, #1
 80060f4:	440a      	add	r2, r1
 80060f6:	4291      	cmp	r1, r2
 80060f8:	d100      	bne.n	80060fc <memcpy+0xc>
 80060fa:	bd10      	pop	{r4, pc}
 80060fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006100:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006104:	e7f7      	b.n	80060f6 <memcpy+0x6>

08006106 <memset>:
 8006106:	4402      	add	r2, r0
 8006108:	4603      	mov	r3, r0
 800610a:	4293      	cmp	r3, r2
 800610c:	d100      	bne.n	8006110 <memset+0xa>
 800610e:	4770      	bx	lr
 8006110:	f803 1b01 	strb.w	r1, [r3], #1
 8006114:	e7f9      	b.n	800610a <memset+0x4>

08006116 <cleanup_glue>:
 8006116:	b538      	push	{r3, r4, r5, lr}
 8006118:	460c      	mov	r4, r1
 800611a:	6809      	ldr	r1, [r1, #0]
 800611c:	4605      	mov	r5, r0
 800611e:	b109      	cbz	r1, 8006124 <cleanup_glue+0xe>
 8006120:	f7ff fff9 	bl	8006116 <cleanup_glue>
 8006124:	4621      	mov	r1, r4
 8006126:	4628      	mov	r0, r5
 8006128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800612c:	f000 b85e 	b.w	80061ec <_free_r>

08006130 <_reclaim_reent>:
 8006130:	4b2c      	ldr	r3, [pc, #176]	; (80061e4 <_reclaim_reent+0xb4>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4283      	cmp	r3, r0
 8006136:	b570      	push	{r4, r5, r6, lr}
 8006138:	4604      	mov	r4, r0
 800613a:	d051      	beq.n	80061e0 <_reclaim_reent+0xb0>
 800613c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800613e:	b143      	cbz	r3, 8006152 <_reclaim_reent+0x22>
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d14a      	bne.n	80061dc <_reclaim_reent+0xac>
 8006146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006148:	6819      	ldr	r1, [r3, #0]
 800614a:	b111      	cbz	r1, 8006152 <_reclaim_reent+0x22>
 800614c:	4620      	mov	r0, r4
 800614e:	f000 f84d 	bl	80061ec <_free_r>
 8006152:	6961      	ldr	r1, [r4, #20]
 8006154:	b111      	cbz	r1, 800615c <_reclaim_reent+0x2c>
 8006156:	4620      	mov	r0, r4
 8006158:	f000 f848 	bl	80061ec <_free_r>
 800615c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800615e:	b111      	cbz	r1, 8006166 <_reclaim_reent+0x36>
 8006160:	4620      	mov	r0, r4
 8006162:	f000 f843 	bl	80061ec <_free_r>
 8006166:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006168:	b111      	cbz	r1, 8006170 <_reclaim_reent+0x40>
 800616a:	4620      	mov	r0, r4
 800616c:	f000 f83e 	bl	80061ec <_free_r>
 8006170:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006172:	b111      	cbz	r1, 800617a <_reclaim_reent+0x4a>
 8006174:	4620      	mov	r0, r4
 8006176:	f000 f839 	bl	80061ec <_free_r>
 800617a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800617c:	b111      	cbz	r1, 8006184 <_reclaim_reent+0x54>
 800617e:	4620      	mov	r0, r4
 8006180:	f000 f834 	bl	80061ec <_free_r>
 8006184:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006186:	b111      	cbz	r1, 800618e <_reclaim_reent+0x5e>
 8006188:	4620      	mov	r0, r4
 800618a:	f000 f82f 	bl	80061ec <_free_r>
 800618e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006190:	b111      	cbz	r1, 8006198 <_reclaim_reent+0x68>
 8006192:	4620      	mov	r0, r4
 8006194:	f000 f82a 	bl	80061ec <_free_r>
 8006198:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800619a:	b111      	cbz	r1, 80061a2 <_reclaim_reent+0x72>
 800619c:	4620      	mov	r0, r4
 800619e:	f000 f825 	bl	80061ec <_free_r>
 80061a2:	69a3      	ldr	r3, [r4, #24]
 80061a4:	b1e3      	cbz	r3, 80061e0 <_reclaim_reent+0xb0>
 80061a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80061a8:	4620      	mov	r0, r4
 80061aa:	4798      	blx	r3
 80061ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80061ae:	b1b9      	cbz	r1, 80061e0 <_reclaim_reent+0xb0>
 80061b0:	4620      	mov	r0, r4
 80061b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80061b6:	f7ff bfae 	b.w	8006116 <cleanup_glue>
 80061ba:	5949      	ldr	r1, [r1, r5]
 80061bc:	b941      	cbnz	r1, 80061d0 <_reclaim_reent+0xa0>
 80061be:	3504      	adds	r5, #4
 80061c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061c2:	2d80      	cmp	r5, #128	; 0x80
 80061c4:	68d9      	ldr	r1, [r3, #12]
 80061c6:	d1f8      	bne.n	80061ba <_reclaim_reent+0x8a>
 80061c8:	4620      	mov	r0, r4
 80061ca:	f000 f80f 	bl	80061ec <_free_r>
 80061ce:	e7ba      	b.n	8006146 <_reclaim_reent+0x16>
 80061d0:	680e      	ldr	r6, [r1, #0]
 80061d2:	4620      	mov	r0, r4
 80061d4:	f000 f80a 	bl	80061ec <_free_r>
 80061d8:	4631      	mov	r1, r6
 80061da:	e7ef      	b.n	80061bc <_reclaim_reent+0x8c>
 80061dc:	2500      	movs	r5, #0
 80061de:	e7ef      	b.n	80061c0 <_reclaim_reent+0x90>
 80061e0:	bd70      	pop	{r4, r5, r6, pc}
 80061e2:	bf00      	nop
 80061e4:	20000010 	.word	0x20000010

080061e8 <__malloc_lock>:
 80061e8:	4770      	bx	lr

080061ea <__malloc_unlock>:
 80061ea:	4770      	bx	lr

080061ec <_free_r>:
 80061ec:	b538      	push	{r3, r4, r5, lr}
 80061ee:	4605      	mov	r5, r0
 80061f0:	2900      	cmp	r1, #0
 80061f2:	d045      	beq.n	8006280 <_free_r+0x94>
 80061f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061f8:	1f0c      	subs	r4, r1, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	bfb8      	it	lt
 80061fe:	18e4      	addlt	r4, r4, r3
 8006200:	f7ff fff2 	bl	80061e8 <__malloc_lock>
 8006204:	4a1f      	ldr	r2, [pc, #124]	; (8006284 <_free_r+0x98>)
 8006206:	6813      	ldr	r3, [r2, #0]
 8006208:	4610      	mov	r0, r2
 800620a:	b933      	cbnz	r3, 800621a <_free_r+0x2e>
 800620c:	6063      	str	r3, [r4, #4]
 800620e:	6014      	str	r4, [r2, #0]
 8006210:	4628      	mov	r0, r5
 8006212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006216:	f7ff bfe8 	b.w	80061ea <__malloc_unlock>
 800621a:	42a3      	cmp	r3, r4
 800621c:	d90c      	bls.n	8006238 <_free_r+0x4c>
 800621e:	6821      	ldr	r1, [r4, #0]
 8006220:	1862      	adds	r2, r4, r1
 8006222:	4293      	cmp	r3, r2
 8006224:	bf04      	itt	eq
 8006226:	681a      	ldreq	r2, [r3, #0]
 8006228:	685b      	ldreq	r3, [r3, #4]
 800622a:	6063      	str	r3, [r4, #4]
 800622c:	bf04      	itt	eq
 800622e:	1852      	addeq	r2, r2, r1
 8006230:	6022      	streq	r2, [r4, #0]
 8006232:	6004      	str	r4, [r0, #0]
 8006234:	e7ec      	b.n	8006210 <_free_r+0x24>
 8006236:	4613      	mov	r3, r2
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	b10a      	cbz	r2, 8006240 <_free_r+0x54>
 800623c:	42a2      	cmp	r2, r4
 800623e:	d9fa      	bls.n	8006236 <_free_r+0x4a>
 8006240:	6819      	ldr	r1, [r3, #0]
 8006242:	1858      	adds	r0, r3, r1
 8006244:	42a0      	cmp	r0, r4
 8006246:	d10b      	bne.n	8006260 <_free_r+0x74>
 8006248:	6820      	ldr	r0, [r4, #0]
 800624a:	4401      	add	r1, r0
 800624c:	1858      	adds	r0, r3, r1
 800624e:	4282      	cmp	r2, r0
 8006250:	6019      	str	r1, [r3, #0]
 8006252:	d1dd      	bne.n	8006210 <_free_r+0x24>
 8006254:	6810      	ldr	r0, [r2, #0]
 8006256:	6852      	ldr	r2, [r2, #4]
 8006258:	605a      	str	r2, [r3, #4]
 800625a:	4401      	add	r1, r0
 800625c:	6019      	str	r1, [r3, #0]
 800625e:	e7d7      	b.n	8006210 <_free_r+0x24>
 8006260:	d902      	bls.n	8006268 <_free_r+0x7c>
 8006262:	230c      	movs	r3, #12
 8006264:	602b      	str	r3, [r5, #0]
 8006266:	e7d3      	b.n	8006210 <_free_r+0x24>
 8006268:	6820      	ldr	r0, [r4, #0]
 800626a:	1821      	adds	r1, r4, r0
 800626c:	428a      	cmp	r2, r1
 800626e:	bf04      	itt	eq
 8006270:	6811      	ldreq	r1, [r2, #0]
 8006272:	6852      	ldreq	r2, [r2, #4]
 8006274:	6062      	str	r2, [r4, #4]
 8006276:	bf04      	itt	eq
 8006278:	1809      	addeq	r1, r1, r0
 800627a:	6021      	streq	r1, [r4, #0]
 800627c:	605c      	str	r4, [r3, #4]
 800627e:	e7c7      	b.n	8006210 <_free_r+0x24>
 8006280:	bd38      	pop	{r3, r4, r5, pc}
 8006282:	bf00      	nop
 8006284:	20004a74 	.word	0x20004a74

08006288 <_init>:
 8006288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628a:	bf00      	nop
 800628c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800628e:	bc08      	pop	{r3}
 8006290:	469e      	mov	lr, r3
 8006292:	4770      	bx	lr

08006294 <_fini>:
 8006294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006296:	bf00      	nop
 8006298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629a:	bc08      	pop	{r3}
 800629c:	469e      	mov	lr, r3
 800629e:	4770      	bx	lr
