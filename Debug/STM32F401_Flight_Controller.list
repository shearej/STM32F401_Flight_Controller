
STM32F401_Flight_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057e0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005980  08005980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a44  08005a44  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005a44  08005a44  00015a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a4c  08005a4c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a4c  08005a4c  00015a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a50  08005a50  00015a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b14  20000074  08005ac8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b88  08005ac8  00024b88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ed9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b65  00000000  00000000  00036f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011b0  00000000  00000000  00039ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001088  00000000  00000000  0003ac98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002cb7  00000000  00000000  0003bd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db47  00000000  00000000  0003e9d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094258  00000000  00000000  0004c51e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0776  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c34  00000000  00000000  000e07f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005968 	.word	0x08005968

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005968 	.word	0x08005968

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fc46 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f81c 	bl	8000524 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Innit_System();
 80004ec:	f000 fa6e 	bl	80009cc <Innit_System>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f9dc 	bl	80008ac <MX_GPIO_Init>
  MX_TIM1_Init();
 80004f4:	f000 f880 	bl	80005f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004f8:	f000 f942 	bl	8000780 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fc:	f002 fc0e 	bl	8002d1c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of handleButton */
  handleButtonHandle = osThreadNew(HandleButton, NULL, &handleButton_attributes);
 8000500:	4a05      	ldr	r2, [pc, #20]	; (8000518 <main+0x38>)
 8000502:	2100      	movs	r1, #0
 8000504:	4805      	ldr	r0, [pc, #20]	; (800051c <main+0x3c>)
 8000506:	f002 fc53 	bl	8002db0 <osThreadNew>
 800050a:	4602      	mov	r2, r0
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <main+0x40>)
 800050e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000510:	f002 fc28 	bl	8002d64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000514:	e7fe      	b.n	8000514 <main+0x34>
 8000516:	bf00      	nop
 8000518:	080059a8 	.word	0x080059a8
 800051c:	080009e5 	.word	0x080009e5
 8000520:	20004a68 	.word	0x20004a68

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	; 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	; 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f005 f957 	bl	80057e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	4a27      	ldr	r2, [pc, #156]	; (80005f0 <SystemClock_Config+0xcc>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	; 0x40
 8000558:	4b25      	ldr	r3, [pc, #148]	; (80005f0 <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000570:	4a20      	ldr	r2, [pc, #128]	; (80005f4 <SystemClock_Config+0xd0>)
 8000572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	2301      	movs	r3, #1
 800058a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058c:	2310      	movs	r3, #16
 800058e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000594:	2300      	movs	r3, #0
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000598:	2308      	movs	r3, #8
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800059c:	2340      	movs	r3, #64	; 0x40
 800059e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fea1 	bl	80012f4 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005b8:	f000 fa5a 	bl	8000a70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d2:	f107 030c 	add.w	r3, r7, #12
 80005d6:	2102      	movs	r1, #2
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 f903 	bl	80017e4 <HAL_RCC_ClockConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005e4:	f000 fa44 	bl	8000a70 <Error_Handler>
  }
}
 80005e8:	bf00      	nop
 80005ea:	3750      	adds	r7, #80	; 0x50
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b096      	sub	sp, #88	; 0x58
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800060c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]
 8000626:	615a      	str	r2, [r3, #20]
 8000628:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2220      	movs	r2, #32
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f005 f8d8 	bl	80057e6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000636:	4b50      	ldr	r3, [pc, #320]	; (8000778 <MX_TIM1_Init+0x180>)
 8000638:	4a50      	ldr	r2, [pc, #320]	; (800077c <MX_TIM1_Init+0x184>)
 800063a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800063c:	4b4e      	ldr	r3, [pc, #312]	; (8000778 <MX_TIM1_Init+0x180>)
 800063e:	2247      	movs	r2, #71	; 0x47
 8000640:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000642:	4b4d      	ldr	r3, [pc, #308]	; (8000778 <MX_TIM1_Init+0x180>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8000648:	4b4b      	ldr	r3, [pc, #300]	; (8000778 <MX_TIM1_Init+0x180>)
 800064a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800064e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000650:	4b49      	ldr	r3, [pc, #292]	; (8000778 <MX_TIM1_Init+0x180>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000656:	4b48      	ldr	r3, [pc, #288]	; (8000778 <MX_TIM1_Init+0x180>)
 8000658:	2200      	movs	r2, #0
 800065a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065c:	4b46      	ldr	r3, [pc, #280]	; (8000778 <MX_TIM1_Init+0x180>)
 800065e:	2200      	movs	r2, #0
 8000660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000662:	4845      	ldr	r0, [pc, #276]	; (8000778 <MX_TIM1_Init+0x180>)
 8000664:	f001 faa8 	bl	8001bb8 <HAL_TIM_Base_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800066e:	f000 f9ff 	bl	8000a70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000678:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800067c:	4619      	mov	r1, r3
 800067e:	483e      	ldr	r0, [pc, #248]	; (8000778 <MX_TIM1_Init+0x180>)
 8000680:	f001 fe84 	bl	800238c <HAL_TIM_ConfigClockSource>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800068a:	f000 f9f1 	bl	8000a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800068e:	483a      	ldr	r0, [pc, #232]	; (8000778 <MX_TIM1_Init+0x180>)
 8000690:	f001 fb44 	bl	8001d1c <HAL_TIM_PWM_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800069a:	f000 f9e9 	bl	8000a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069e:	2300      	movs	r3, #0
 80006a0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006aa:	4619      	mov	r1, r3
 80006ac:	4832      	ldr	r0, [pc, #200]	; (8000778 <MX_TIM1_Init+0x180>)
 80006ae:	f002 fa1d 	bl	8002aec <HAL_TIMEx_MasterConfigSynchronization>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80006b8:	f000 f9da 	bl	8000a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006bc:	2360      	movs	r3, #96	; 0x60
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006c8:	2300      	movs	r3, #0
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006d4:	2300      	movs	r3, #0
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006dc:	2200      	movs	r2, #0
 80006de:	4619      	mov	r1, r3
 80006e0:	4825      	ldr	r0, [pc, #148]	; (8000778 <MX_TIM1_Init+0x180>)
 80006e2:	f001 fd91 	bl	8002208 <HAL_TIM_PWM_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80006ec:	f000 f9c0 	bl	8000a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f4:	2204      	movs	r2, #4
 80006f6:	4619      	mov	r1, r3
 80006f8:	481f      	ldr	r0, [pc, #124]	; (8000778 <MX_TIM1_Init+0x180>)
 80006fa:	f001 fd85 	bl	8002208 <HAL_TIM_PWM_ConfigChannel>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000704:	f000 f9b4 	bl	8000a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070c:	2208      	movs	r2, #8
 800070e:	4619      	mov	r1, r3
 8000710:	4819      	ldr	r0, [pc, #100]	; (8000778 <MX_TIM1_Init+0x180>)
 8000712:	f001 fd79 	bl	8002208 <HAL_TIM_PWM_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800071c:	f000 f9a8 	bl	8000a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000724:	220c      	movs	r2, #12
 8000726:	4619      	mov	r1, r3
 8000728:	4813      	ldr	r0, [pc, #76]	; (8000778 <MX_TIM1_Init+0x180>)
 800072a:	f001 fd6d 	bl	8002208 <HAL_TIM_PWM_ConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000734:	f000 f99c 	bl	8000a70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000738:	2300      	movs	r3, #0
 800073a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800074c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000750:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4619      	mov	r1, r3
 800075a:	4807      	ldr	r0, [pc, #28]	; (8000778 <MX_TIM1_Init+0x180>)
 800075c:	f002 fa34 	bl	8002bc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000766:	f000 f983 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800076a:	4803      	ldr	r0, [pc, #12]	; (8000778 <MX_TIM1_Init+0x180>)
 800076c:	f000 f9ec 	bl	8000b48 <HAL_TIM_MspPostInit>

}
 8000770:	bf00      	nop
 8000772:	3758      	adds	r7, #88	; 0x58
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20004a6c 	.word	0x20004a6c
 800077c:	40010000 	.word	0x40010000

08000780 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08e      	sub	sp, #56	; 0x38
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
 80007ac:	615a      	str	r2, [r3, #20]
 80007ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007b0:	4b3d      	ldr	r3, [pc, #244]	; (80008a8 <MX_TIM2_Init+0x128>)
 80007b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80007b8:	4b3b      	ldr	r3, [pc, #236]	; (80008a8 <MX_TIM2_Init+0x128>)
 80007ba:	2247      	movs	r2, #71	; 0x47
 80007bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007be:	4b3a      	ldr	r3, [pc, #232]	; (80008a8 <MX_TIM2_Init+0x128>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 80007c4:	4b38      	ldr	r3, [pc, #224]	; (80008a8 <MX_TIM2_Init+0x128>)
 80007c6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80007ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007cc:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <MX_TIM2_Init+0x128>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d2:	4b35      	ldr	r3, [pc, #212]	; (80008a8 <MX_TIM2_Init+0x128>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007d8:	4833      	ldr	r0, [pc, #204]	; (80008a8 <MX_TIM2_Init+0x128>)
 80007da:	f001 f9ed 	bl	8001bb8 <HAL_TIM_Base_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007e4:	f000 f944 	bl	8000a70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f2:	4619      	mov	r1, r3
 80007f4:	482c      	ldr	r0, [pc, #176]	; (80008a8 <MX_TIM2_Init+0x128>)
 80007f6:	f001 fdc9 	bl	800238c <HAL_TIM_ConfigClockSource>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000800:	f000 f936 	bl	8000a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000804:	4828      	ldr	r0, [pc, #160]	; (80008a8 <MX_TIM2_Init+0x128>)
 8000806:	f001 fa89 	bl	8001d1c <HAL_TIM_PWM_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000810:	f000 f92e 	bl	8000a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800081c:	f107 0320 	add.w	r3, r7, #32
 8000820:	4619      	mov	r1, r3
 8000822:	4821      	ldr	r0, [pc, #132]	; (80008a8 <MX_TIM2_Init+0x128>)
 8000824:	f002 f962 	bl	8002aec <HAL_TIMEx_MasterConfigSynchronization>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800082e:	f000 f91f 	bl	8000a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000832:	2360      	movs	r3, #96	; 0x60
 8000834:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	4619      	mov	r1, r3
 8000848:	4817      	ldr	r0, [pc, #92]	; (80008a8 <MX_TIM2_Init+0x128>)
 800084a:	f001 fcdd 	bl	8002208 <HAL_TIM_PWM_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000854:	f000 f90c 	bl	8000a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2204      	movs	r2, #4
 800085c:	4619      	mov	r1, r3
 800085e:	4812      	ldr	r0, [pc, #72]	; (80008a8 <MX_TIM2_Init+0x128>)
 8000860:	f001 fcd2 	bl	8002208 <HAL_TIM_PWM_ConfigChannel>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800086a:	f000 f901 	bl	8000a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2208      	movs	r2, #8
 8000872:	4619      	mov	r1, r3
 8000874:	480c      	ldr	r0, [pc, #48]	; (80008a8 <MX_TIM2_Init+0x128>)
 8000876:	f001 fcc7 	bl	8002208 <HAL_TIM_PWM_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000880:	f000 f8f6 	bl	8000a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	220c      	movs	r2, #12
 8000888:	4619      	mov	r1, r3
 800088a:	4807      	ldr	r0, [pc, #28]	; (80008a8 <MX_TIM2_Init+0x128>)
 800088c:	f001 fcbc 	bl	8002208 <HAL_TIM_PWM_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 8000896:	f000 f8eb 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800089a:	4803      	ldr	r0, [pc, #12]	; (80008a8 <MX_TIM2_Init+0x128>)
 800089c:	f000 f954 	bl	8000b48 <HAL_TIM_MspPostInit>

}
 80008a0:	bf00      	nop
 80008a2:	3738      	adds	r7, #56	; 0x38
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20004ab4 	.word	0x20004ab4

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_GPIO_Init+0x7c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a17      	ldr	r2, [pc, #92]	; (8000928 <MX_GPIO_Init+0x7c>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_GPIO_Init+0x7c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_GPIO_Init+0x7c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a10      	ldr	r2, [pc, #64]	; (8000928 <MX_GPIO_Init+0x7c>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <MX_GPIO_Init+0x7c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2101      	movs	r1, #1
 80008fe:	480b      	ldr	r0, [pc, #44]	; (800092c <MX_GPIO_Init+0x80>)
 8000900:	f000 fcde 	bl	80012c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000904:	2301      	movs	r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	4619      	mov	r1, r3
 800091a:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_GPIO_Init+0x80>)
 800091c:	f000 fb4e 	bl	8000fbc <HAL_GPIO_Init>

}
 8000920:	bf00      	nop
 8000922:	3720      	adds	r7, #32
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40023800 	.word	0x40023800
 800092c:	40020400 	.word	0x40020400

08000930 <StartMotor>:

/* USER CODE BEGIN 4 */

void StartMotor(void *argument)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  uint32_t channel = *(uint32_t *) argument;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	60bb      	str	r3, [r7, #8]
  uint8_t motorArmed1 = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  for(;;)
  {
	if (0 == motorArmed1)
 8000942:	7bfb      	ldrb	r3, [r7, #15]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1fc      	bne.n	8000942 <StartMotor+0x12>
	{
	  Set_PWM(1915, channel);
 8000948:	68b9      	ldr	r1, [r7, #8]
 800094a:	f240 707b 	movw	r0, #1915	; 0x77b
 800094e:	f000 f811 	bl	8000974 <Set_PWM>
	  osDelay(pdMS_TO_TICKS(1000));
 8000952:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000956:	f002 fabd 	bl	8002ed4 <osDelay>
	  Set_PWM(1000, channel);
 800095a:	68b9      	ldr	r1, [r7, #8]
 800095c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000960:	f000 f808 	bl	8000974 <Set_PWM>
	  osDelay(pdMS_TO_TICKS( 6000 ));
 8000964:	f241 7070 	movw	r0, #6000	; 0x1770
 8000968:	f002 fab4 	bl	8002ed4 <osDelay>

	  //Set_PWM(1300, channel);

	  motorArmed1 = 1;
 800096c:	2301      	movs	r3, #1
 800096e:	73fb      	strb	r3, [r7, #15]
	if (0 == motorArmed1)
 8000970:	e7e7      	b.n	8000942 <StartMotor+0x12>
	...

08000974 <Set_PWM>:
  osThreadTerminate(NULL);
  /* USER CODE END 5 */
}

void Set_PWM(uint16_t pulse, uint32_t channel)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	80fb      	strh	r3, [r7, #6]
	  HAL_StatusTypeDef test;
	  HAL_TIM_PWM_Stop(&htim2, channel);
 8000980:	6839      	ldr	r1, [r7, #0]
 8000982:	4811      	ldr	r0, [pc, #68]	; (80009c8 <Set_PWM+0x54>)
 8000984:	f001 fad4 	bl	8001f30 <HAL_TIM_PWM_Stop>
	  TIM_OC_InitTypeDef sConfigOC;
	  HAL_TIM_PWM_Init(&htim2);
 8000988:	480f      	ldr	r0, [pc, #60]	; (80009c8 <Set_PWM+0x54>)
 800098a:	f001 f9c7 	bl	8001d1c <HAL_TIM_PWM_Init>
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800098e:	2360      	movs	r3, #96	; 0x60
 8000990:	60bb      	str	r3, [r7, #8]

	  sConfigOC.Pulse = pulse;
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	60fb      	str	r3, [r7, #12]

	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, channel);
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	683a      	ldr	r2, [r7, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	4808      	ldr	r0, [pc, #32]	; (80009c8 <Set_PWM+0x54>)
 80009a8:	f001 fc2e 	bl	8002208 <HAL_TIM_PWM_ConfigChannel>

	  test = HAL_TIM_PWM_Start(&htim2, channel);
 80009ac:	6839      	ldr	r1, [r7, #0]
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <Set_PWM+0x54>)
 80009b0:	f001 fa0e 	bl	8001dd0 <HAL_TIM_PWM_Start>
 80009b4:	4603      	mov	r3, r0
 80009b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  test = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20004ab4 	.word	0x20004ab4

080009cc <Innit_System>:

void Innit_System(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  motorStarted = 0;
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <Innit_System+0x14>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	701a      	strb	r2, [r3, #0]
  //motorArmed = 0;
  //SemaphoreStartMotors = 0;
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	20000090 	.word	0x20000090

080009e4 <HandleButton>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_HandleButton */
void HandleButton(void *argument)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	  uint32_t motor1 = MOTOR1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
	  uint32_t motor2 = MOTOR2;
 80009f0:	2304      	movs	r3, #4
 80009f2:	613b      	str	r3, [r7, #16]
	  uint32_t motor3 = MOTOR3;
 80009f4:	2308      	movs	r3, #8
 80009f6:	60fb      	str	r3, [r7, #12]
	  uint32_t motor4 = MOTOR4;
 80009f8:	230c      	movs	r3, #12
 80009fa:	60bb      	str	r3, [r7, #8]

/* Infinite loop */
for(;;)
{
	  if (0 == motorStarted)
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HandleButton+0x60>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1fb      	bne.n	80009fc <HandleButton+0x18>
	  	      {
	  	        //Start_Motors();
	  	        //startMotorTaskThread[i] = osThreadNew(StartMotor, &channel, NULL);
	  	        //channel += 4;

	  	        osThreadNew(StartMotor, &motor1, NULL);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480e      	ldr	r0, [pc, #56]	; (8000a48 <HandleButton+0x64>)
 8000a0e:	f002 f9cf 	bl	8002db0 <osThreadNew>
	  	        osThreadNew(StartMotor, &motor2, NULL);
 8000a12:	f107 0310 	add.w	r3, r7, #16
 8000a16:	2200      	movs	r2, #0
 8000a18:	4619      	mov	r1, r3
 8000a1a:	480b      	ldr	r0, [pc, #44]	; (8000a48 <HandleButton+0x64>)
 8000a1c:	f002 f9c8 	bl	8002db0 <osThreadNew>
	  	        osThreadNew(StartMotor, &motor3, NULL);
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	2200      	movs	r2, #0
 8000a26:	4619      	mov	r1, r3
 8000a28:	4807      	ldr	r0, [pc, #28]	; (8000a48 <HandleButton+0x64>)
 8000a2a:	f002 f9c1 	bl	8002db0 <osThreadNew>
	  	        osThreadNew(StartMotor, &motor4, NULL);
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	2200      	movs	r2, #0
 8000a34:	4619      	mov	r1, r3
 8000a36:	4804      	ldr	r0, [pc, #16]	; (8000a48 <HandleButton+0x64>)
 8000a38:	f002 f9ba 	bl	8002db0 <osThreadNew>

	  	        motorStarted = 1;
 8000a3c:	4b01      	ldr	r3, [pc, #4]	; (8000a44 <HandleButton+0x60>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	701a      	strb	r2, [r3, #0]
	  if (0 == motorStarted)
 8000a42:	e7db      	b.n	80009fc <HandleButton+0x18>
 8000a44:	20000090 	.word	0x20000090
 8000a48:	08000931 	.word	0x08000931

08000a4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d101      	bne.n	8000a62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a5e:	f000 f9ab 	bl	8000db8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40014400 	.word	0x40014400

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <Error_Handler+0x6>

08000a78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_MspInit+0x54>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	4a11      	ldr	r2, [pc, #68]	; (8000acc <HAL_MspInit+0x54>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <HAL_MspInit+0x54>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_MspInit+0x54>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <HAL_MspInit+0x54>)
 8000aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <HAL_MspInit+0x54>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	210f      	movs	r1, #15
 8000aba:	f06f 0001 	mvn.w	r0, #1
 8000abe:	f000 fa53 	bl	8000f68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a18      	ldr	r2, [pc, #96]	; (8000b40 <HAL_TIM_Base_MspInit+0x70>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d116      	bne.n	8000b10 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_TIM_Base_MspInit+0x74>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a16      	ldr	r2, [pc, #88]	; (8000b44 <HAL_TIM_Base_MspInit+0x74>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <HAL_TIM_Base_MspInit+0x74>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2105      	movs	r1, #5
 8000b02:	2019      	movs	r0, #25
 8000b04:	f000 fa30 	bl	8000f68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b08:	2019      	movs	r0, #25
 8000b0a:	f000 fa49 	bl	8000fa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b0e:	e012      	b.n	8000b36 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b18:	d10d      	bne.n	8000b36 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_TIM_Base_MspInit+0x74>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_TIM_Base_MspInit+0x74>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_TIM_Base_MspInit+0x74>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
}
 8000b36:	bf00      	nop
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40010000 	.word	0x40010000
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a24      	ldr	r2, [pc, #144]	; (8000bf8 <HAL_TIM_MspPostInit+0xb0>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d11f      	bne.n	8000baa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <HAL_TIM_MspPostInit+0xb4>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a22      	ldr	r2, [pc, #136]	; (8000bfc <HAL_TIM_MspPostInit+0xb4>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <HAL_TIM_MspPostInit+0xb4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000b86:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4817      	ldr	r0, [pc, #92]	; (8000c00 <HAL_TIM_MspPostInit+0xb8>)
 8000ba4:	f000 fa0a 	bl	8000fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ba8:	e022      	b.n	8000bf0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bb2:	d11d      	bne.n	8000bf0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_TIM_MspPostInit+0xb4>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <HAL_TIM_MspPostInit+0xb4>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc4:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <HAL_TIM_MspPostInit+0xb4>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000be0:	2301      	movs	r3, #1
 8000be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <HAL_TIM_MspPostInit+0xb8>)
 8000bec:	f000 f9e6 	bl	8000fbc <HAL_GPIO_Init>
}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	; 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40010000 	.word	0x40010000
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40020000 	.word	0x40020000

08000c04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08c      	sub	sp, #48	; 0x30
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	2019      	movs	r0, #25
 8000c1a:	f000 f9a5 	bl	8000f68 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c1e:	2019      	movs	r0, #25
 8000c20:	f000 f9be 	bl	8000fa0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <HAL_InitTick+0xa0>)
 8000c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ca4 <HAL_InitTick+0xa0>)
 8000c2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c32:	6453      	str	r3, [r2, #68]	; 0x44
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <HAL_InitTick+0xa0>)
 8000c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c40:	f107 0210 	add.w	r2, r7, #16
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4611      	mov	r1, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 ff82 	bl	8001b54 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c50:	f000 ff6c 	bl	8001b2c <HAL_RCC_GetPCLK2Freq>
 8000c54:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c58:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <HAL_InitTick+0xa4>)
 8000c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5e:	0c9b      	lsrs	r3, r3, #18
 8000c60:	3b01      	subs	r3, #1
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_InitTick+0xa8>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <HAL_InitTick+0xac>)
 8000c68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <HAL_InitTick+0xa8>)
 8000c6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c70:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000c72:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <HAL_InitTick+0xa8>)
 8000c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c76:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_InitTick+0xa8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <HAL_InitTick+0xa8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000c84:	4809      	ldr	r0, [pc, #36]	; (8000cac <HAL_InitTick+0xa8>)
 8000c86:	f000 ff97 	bl	8001bb8 <HAL_TIM_Base_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d104      	bne.n	8000c9a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000c90:	4806      	ldr	r0, [pc, #24]	; (8000cac <HAL_InitTick+0xa8>)
 8000c92:	f000 ffe1 	bl	8001c58 <HAL_TIM_Base_Start_IT>
 8000c96:	4603      	mov	r3, r0
 8000c98:	e000      	b.n	8000c9c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3730      	adds	r7, #48	; 0x30
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	431bde83 	.word	0x431bde83
 8000cac:	20004afc 	.word	0x20004afc
 8000cb0:	40014400 	.word	0x40014400

08000cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <NMI_Handler+0x4>

08000cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <HardFault_Handler+0x4>

08000cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <MemManage_Handler+0x4>

08000cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cca:	e7fe      	b.n	8000cca <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ce4:	4803      	ldr	r0, [pc, #12]	; (8000cf4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8000ce6:	f001 f987 	bl	8001ff8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8000cea:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000cec:	f001 f984 	bl	8001ff8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20004a6c 	.word	0x20004a6c
 8000cf8:	20004afc 	.word	0x20004afc

08000cfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <SystemInit+0x20>)
 8000d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d06:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <SystemInit+0x20>)
 8000d08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d24:	480d      	ldr	r0, [pc, #52]	; (8000d5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d26:	490e      	ldr	r1, [pc, #56]	; (8000d60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d28:	4a0e      	ldr	r2, [pc, #56]	; (8000d64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	; (8000d68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d3c:	4c0b      	ldr	r4, [pc, #44]	; (8000d6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d4a:	f7ff ffd7 	bl	8000cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d4e:	f004 fd1b 	bl	8005788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d52:	f7ff fbc5 	bl	80004e0 <main>
  bx  lr    
 8000d56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d64:	08005a54 	.word	0x08005a54
  ldr r2, =_sbss
 8000d68:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d6c:	20004b88 	.word	0x20004b88

08000d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC_IRQHandler>
	...

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <HAL_Init+0x40>)
 8000d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_Init+0x40>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <HAL_Init+0x40>)
 8000d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_Init+0x40>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_Init+0x40>)
 8000d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 f8d8 	bl	8000f52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da2:	2005      	movs	r0, #5
 8000da4:	f7ff ff2e 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f7ff fe66 	bl	8000a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023c00 	.word	0x40023c00

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20004b44 	.word	0x20004b44

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20004b44 	.word	0x20004b44

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	; (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	db0b      	blt.n	8000e86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	f003 021f 	and.w	r2, r3, #31
 8000e74:	4907      	ldr	r1, [pc, #28]	; (8000e94 <__NVIC_EnableIRQ+0x38>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	095b      	lsrs	r3, r3, #5
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000e100 	.word	0xe000e100

08000e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	6039      	str	r1, [r7, #0]
 8000ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	db0a      	blt.n	8000ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	490c      	ldr	r1, [pc, #48]	; (8000ee4 <__NVIC_SetPriority+0x4c>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	0112      	lsls	r2, r2, #4
 8000eb8:	b2d2      	uxtb	r2, r2
 8000eba:	440b      	add	r3, r1
 8000ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec0:	e00a      	b.n	8000ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4908      	ldr	r1, [pc, #32]	; (8000ee8 <__NVIC_SetPriority+0x50>)
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	f003 030f 	and.w	r3, r3, #15
 8000ece:	3b04      	subs	r3, #4
 8000ed0:	0112      	lsls	r2, r2, #4
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	440b      	add	r3, r1
 8000ed6:	761a      	strb	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000e100 	.word	0xe000e100
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	; 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f1c3 0307 	rsb	r3, r3, #7
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf28      	it	cs
 8000f0a:	2304      	movcs	r3, #4
 8000f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3304      	adds	r3, #4
 8000f12:	2b06      	cmp	r3, #6
 8000f14:	d902      	bls.n	8000f1c <NVIC_EncodePriority+0x30>
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3b03      	subs	r3, #3
 8000f1a:	e000      	b.n	8000f1e <NVIC_EncodePriority+0x32>
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43da      	mvns	r2, r3
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f34:	f04f 31ff 	mov.w	r1, #4294967295
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3e:	43d9      	mvns	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	4313      	orrs	r3, r2
         );
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3724      	adds	r7, #36	; 0x24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ff4c 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
 8000f74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f7a:	f7ff ff61 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000f7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	68b9      	ldr	r1, [r7, #8]
 8000f84:	6978      	ldr	r0, [r7, #20]
 8000f86:	f7ff ffb1 	bl	8000eec <NVIC_EncodePriority>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f90:	4611      	mov	r1, r2
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff80 	bl	8000e98 <__NVIC_SetPriority>
}
 8000f98:	bf00      	nop
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff54 	bl	8000e5c <__NVIC_EnableIRQ>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b089      	sub	sp, #36	; 0x24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
 8000fd6:	e159      	b.n	800128c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	f040 8148 	bne.w	8001286 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d005      	beq.n	800100e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800100a:	2b02      	cmp	r3, #2
 800100c:	d130      	bne.n	8001070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	68da      	ldr	r2, [r3, #12]
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001044:	2201      	movs	r2, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	091b      	lsrs	r3, r3, #4
 800105a:	f003 0201 	and.w	r2, r3, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b03      	cmp	r3, #3
 800107a:	d017      	beq.n	80010ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d123      	bne.n	8001100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	08da      	lsrs	r2, r3, #3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3208      	adds	r2, #8
 80010c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	220f      	movs	r2, #15
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	08da      	lsrs	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3208      	adds	r2, #8
 80010fa:	69b9      	ldr	r1, [r7, #24]
 80010fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0203 	and.w	r2, r3, #3
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800113c:	2b00      	cmp	r3, #0
 800113e:	f000 80a2 	beq.w	8001286 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b56      	ldr	r3, [pc, #344]	; (80012a0 <HAL_GPIO_Init+0x2e4>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a55      	ldr	r2, [pc, #340]	; (80012a0 <HAL_GPIO_Init+0x2e4>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b53      	ldr	r3, [pc, #332]	; (80012a0 <HAL_GPIO_Init+0x2e4>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800115e:	4a51      	ldr	r2, [pc, #324]	; (80012a4 <HAL_GPIO_Init+0x2e8>)
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3302      	adds	r3, #2
 8001166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a48      	ldr	r2, [pc, #288]	; (80012a8 <HAL_GPIO_Init+0x2ec>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d019      	beq.n	80011be <HAL_GPIO_Init+0x202>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a47      	ldr	r2, [pc, #284]	; (80012ac <HAL_GPIO_Init+0x2f0>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d013      	beq.n	80011ba <HAL_GPIO_Init+0x1fe>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a46      	ldr	r2, [pc, #280]	; (80012b0 <HAL_GPIO_Init+0x2f4>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d00d      	beq.n	80011b6 <HAL_GPIO_Init+0x1fa>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a45      	ldr	r2, [pc, #276]	; (80012b4 <HAL_GPIO_Init+0x2f8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d007      	beq.n	80011b2 <HAL_GPIO_Init+0x1f6>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a44      	ldr	r2, [pc, #272]	; (80012b8 <HAL_GPIO_Init+0x2fc>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d101      	bne.n	80011ae <HAL_GPIO_Init+0x1f2>
 80011aa:	2304      	movs	r3, #4
 80011ac:	e008      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011ae:	2307      	movs	r3, #7
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e004      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e002      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_GPIO_Init+0x204>
 80011be:	2300      	movs	r3, #0
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	f002 0203 	and.w	r2, r2, #3
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	4093      	lsls	r3, r2
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d0:	4934      	ldr	r1, [pc, #208]	; (80012a4 <HAL_GPIO_Init+0x2e8>)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011de:	4b37      	ldr	r3, [pc, #220]	; (80012bc <HAL_GPIO_Init+0x300>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001202:	4a2e      	ldr	r2, [pc, #184]	; (80012bc <HAL_GPIO_Init+0x300>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001208:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <HAL_GPIO_Init+0x300>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800122c:	4a23      	ldr	r2, [pc, #140]	; (80012bc <HAL_GPIO_Init+0x300>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <HAL_GPIO_Init+0x300>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001256:	4a19      	ldr	r2, [pc, #100]	; (80012bc <HAL_GPIO_Init+0x300>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800125c:	4b17      	ldr	r3, [pc, #92]	; (80012bc <HAL_GPIO_Init+0x300>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001280:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <HAL_GPIO_Init+0x300>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3301      	adds	r3, #1
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	f67f aea2 	bls.w	8000fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001294:	bf00      	nop
 8001296:	3724      	adds	r7, #36	; 0x24
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40013800 	.word	0x40013800
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40020400 	.word	0x40020400
 80012b0:	40020800 	.word	0x40020800
 80012b4:	40020c00 	.word	0x40020c00
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40013c00 	.word	0x40013c00

080012c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
 80012cc:	4613      	mov	r3, r2
 80012ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d0:	787b      	ldrb	r3, [r7, #1]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d6:	887a      	ldrh	r2, [r7, #2]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012dc:	e003      	b.n	80012e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	041a      	lsls	r2, r3, #16
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	619a      	str	r2, [r3, #24]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e264      	b.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	d075      	beq.n	80013fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001312:	4ba3      	ldr	r3, [pc, #652]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	2b04      	cmp	r3, #4
 800131c:	d00c      	beq.n	8001338 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800131e:	4ba0      	ldr	r3, [pc, #640]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001326:	2b08      	cmp	r3, #8
 8001328:	d112      	bne.n	8001350 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800132a:	4b9d      	ldr	r3, [pc, #628]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001336:	d10b      	bne.n	8001350 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001338:	4b99      	ldr	r3, [pc, #612]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d05b      	beq.n	80013fc <HAL_RCC_OscConfig+0x108>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d157      	bne.n	80013fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e23f      	b.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001358:	d106      	bne.n	8001368 <HAL_RCC_OscConfig+0x74>
 800135a:	4b91      	ldr	r3, [pc, #580]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a90      	ldr	r2, [pc, #576]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e01d      	b.n	80013a4 <HAL_RCC_OscConfig+0xb0>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x98>
 8001372:	4b8b      	ldr	r3, [pc, #556]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a8a      	ldr	r2, [pc, #552]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b88      	ldr	r3, [pc, #544]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a87      	ldr	r2, [pc, #540]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e00b      	b.n	80013a4 <HAL_RCC_OscConfig+0xb0>
 800138c:	4b84      	ldr	r3, [pc, #528]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a83      	ldr	r2, [pc, #524]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b81      	ldr	r3, [pc, #516]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a80      	ldr	r2, [pc, #512]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 800139e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d013      	beq.n	80013d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fd18 	bl	8000de0 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fd14 	bl	8000de0 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e204      	b.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	4b76      	ldr	r3, [pc, #472]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0xc0>
 80013d2:	e014      	b.n	80013fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fd04 	bl	8000de0 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fd00 	bl	8000de0 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	; 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e1f0      	b.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	4b6c      	ldr	r3, [pc, #432]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0xe8>
 80013fa:	e000      	b.n	80013fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d063      	beq.n	80014d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800140a:	4b65      	ldr	r3, [pc, #404]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001416:	4b62      	ldr	r3, [pc, #392]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800141e:	2b08      	cmp	r3, #8
 8001420:	d11c      	bne.n	800145c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001422:	4b5f      	ldr	r3, [pc, #380]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d116      	bne.n	800145c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	4b5c      	ldr	r3, [pc, #368]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <HAL_RCC_OscConfig+0x152>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d001      	beq.n	8001446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e1c4      	b.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001446:	4b56      	ldr	r3, [pc, #344]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4952      	ldr	r1, [pc, #328]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145a:	e03a      	b.n	80014d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d020      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001464:	4b4f      	ldr	r3, [pc, #316]	; (80015a4 <HAL_RCC_OscConfig+0x2b0>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146a:	f7ff fcb9 	bl	8000de0 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001472:	f7ff fcb5 	bl	8000de0 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e1a5      	b.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001484:	4b46      	ldr	r3, [pc, #280]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001490:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4940      	ldr	r1, [pc, #256]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
 80014a4:	e015      	b.n	80014d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a6:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <HAL_RCC_OscConfig+0x2b0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff fc98 	bl	8000de0 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014b4:	f7ff fc94 	bl	8000de0 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e184      	b.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c6:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d030      	beq.n	8001540 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d016      	beq.n	8001514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e6:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <HAL_RCC_OscConfig+0x2b4>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ec:	f7ff fc78 	bl	8000de0 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f4:	f7ff fc74 	bl	8000de0 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e164      	b.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0x200>
 8001512:	e015      	b.n	8001540 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_RCC_OscConfig+0x2b4>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151a:	f7ff fc61 	bl	8000de0 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001522:	f7ff fc5d 	bl	8000de0 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e14d      	b.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f0      	bne.n	8001522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80a0 	beq.w	800168e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10f      	bne.n	800157e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_RCC_OscConfig+0x2ac>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800157a:	2301      	movs	r3, #1
 800157c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_RCC_OscConfig+0x2b8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001586:	2b00      	cmp	r3, #0
 8001588:	d121      	bne.n	80015ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800158a:	4b08      	ldr	r3, [pc, #32]	; (80015ac <HAL_RCC_OscConfig+0x2b8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a07      	ldr	r2, [pc, #28]	; (80015ac <HAL_RCC_OscConfig+0x2b8>)
 8001590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001596:	f7ff fc23 	bl	8000de0 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159c:	e011      	b.n	80015c2 <HAL_RCC_OscConfig+0x2ce>
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	42470000 	.word	0x42470000
 80015a8:	42470e80 	.word	0x42470e80
 80015ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b0:	f7ff fc16 	bl	8000de0 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e106      	b.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c2:	4b85      	ldr	r3, [pc, #532]	; (80017d8 <HAL_RCC_OscConfig+0x4e4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d106      	bne.n	80015e4 <HAL_RCC_OscConfig+0x2f0>
 80015d6:	4b81      	ldr	r3, [pc, #516]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015da:	4a80      	ldr	r2, [pc, #512]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6713      	str	r3, [r2, #112]	; 0x70
 80015e2:	e01c      	b.n	800161e <HAL_RCC_OscConfig+0x32a>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b05      	cmp	r3, #5
 80015ea:	d10c      	bne.n	8001606 <HAL_RCC_OscConfig+0x312>
 80015ec:	4b7b      	ldr	r3, [pc, #492]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 80015ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f0:	4a7a      	ldr	r2, [pc, #488]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 80015f2:	f043 0304 	orr.w	r3, r3, #4
 80015f6:	6713      	str	r3, [r2, #112]	; 0x70
 80015f8:	4b78      	ldr	r3, [pc, #480]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 80015fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fc:	4a77      	ldr	r2, [pc, #476]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6713      	str	r3, [r2, #112]	; 0x70
 8001604:	e00b      	b.n	800161e <HAL_RCC_OscConfig+0x32a>
 8001606:	4b75      	ldr	r3, [pc, #468]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 8001608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160a:	4a74      	ldr	r2, [pc, #464]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 800160c:	f023 0301 	bic.w	r3, r3, #1
 8001610:	6713      	str	r3, [r2, #112]	; 0x70
 8001612:	4b72      	ldr	r3, [pc, #456]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 8001614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001616:	4a71      	ldr	r2, [pc, #452]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 8001618:	f023 0304 	bic.w	r3, r3, #4
 800161c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d015      	beq.n	8001652 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001626:	f7ff fbdb 	bl	8000de0 <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162c:	e00a      	b.n	8001644 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800162e:	f7ff fbd7 	bl	8000de0 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	f241 3288 	movw	r2, #5000	; 0x1388
 800163c:	4293      	cmp	r3, r2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e0c5      	b.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001644:	4b65      	ldr	r3, [pc, #404]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 8001646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0ee      	beq.n	800162e <HAL_RCC_OscConfig+0x33a>
 8001650:	e014      	b.n	800167c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001652:	f7ff fbc5 	bl	8000de0 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001658:	e00a      	b.n	8001670 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165a:	f7ff fbc1 	bl	8000de0 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	f241 3288 	movw	r2, #5000	; 0x1388
 8001668:	4293      	cmp	r3, r2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e0af      	b.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001670:	4b5a      	ldr	r3, [pc, #360]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001674:	f003 0302 	and.w	r3, r3, #2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1ee      	bne.n	800165a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800167c:	7dfb      	ldrb	r3, [r7, #23]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d105      	bne.n	800168e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001682:	4b56      	ldr	r3, [pc, #344]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	4a55      	ldr	r2, [pc, #340]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 8001688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800168c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 809b 	beq.w	80017ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001698:	4b50      	ldr	r3, [pc, #320]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d05c      	beq.n	800175e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d141      	bne.n	8001730 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ac:	4b4c      	ldr	r3, [pc, #304]	; (80017e0 <HAL_RCC_OscConfig+0x4ec>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fb95 	bl	8000de0 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff fb91 	bl	8000de0 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e081      	b.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016cc:	4b43      	ldr	r3, [pc, #268]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1f0      	bne.n	80016ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69da      	ldr	r2, [r3, #28]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	019b      	lsls	r3, r3, #6
 80016e8:	431a      	orrs	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ee:	085b      	lsrs	r3, r3, #1
 80016f0:	3b01      	subs	r3, #1
 80016f2:	041b      	lsls	r3, r3, #16
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fa:	061b      	lsls	r3, r3, #24
 80016fc:	4937      	ldr	r1, [pc, #220]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001702:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <HAL_RCC_OscConfig+0x4ec>)
 8001704:	2201      	movs	r2, #1
 8001706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff fb6a 	bl	8000de0 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001710:	f7ff fb66 	bl	8000de0 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e056      	b.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001722:	4b2e      	ldr	r3, [pc, #184]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0x41c>
 800172e:	e04e      	b.n	80017ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001730:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <HAL_RCC_OscConfig+0x4ec>)
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001736:	f7ff fb53 	bl	8000de0 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173e:	f7ff fb4f 	bl	8000de0 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b02      	cmp	r3, #2
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e03f      	b.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001750:	4b22      	ldr	r3, [pc, #136]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1f0      	bne.n	800173e <HAL_RCC_OscConfig+0x44a>
 800175c:	e037      	b.n	80017ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d101      	bne.n	800176a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e032      	b.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <HAL_RCC_OscConfig+0x4e8>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d028      	beq.n	80017ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001782:	429a      	cmp	r2, r3
 8001784:	d121      	bne.n	80017ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001790:	429a      	cmp	r2, r3
 8001792:	d11a      	bne.n	80017ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800179a:	4013      	ands	r3, r2
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d111      	bne.n	80017ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	085b      	lsrs	r3, r3, #1
 80017b2:	3b01      	subs	r3, #1
 80017b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d107      	bne.n	80017ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d001      	beq.n	80017ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40007000 	.word	0x40007000
 80017dc:	40023800 	.word	0x40023800
 80017e0:	42470060 	.word	0x42470060

080017e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e0cc      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017f8:	4b68      	ldr	r3, [pc, #416]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d90c      	bls.n	8001820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001806:	4b65      	ldr	r3, [pc, #404]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	4b63      	ldr	r3, [pc, #396]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0b8      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d020      	beq.n	800186e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001838:	4b59      	ldr	r3, [pc, #356]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	4a58      	ldr	r2, [pc, #352]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001842:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001850:	4b53      	ldr	r3, [pc, #332]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	4a52      	ldr	r2, [pc, #328]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001856:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800185a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800185c:	4b50      	ldr	r3, [pc, #320]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	494d      	ldr	r1, [pc, #308]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	4313      	orrs	r3, r2
 800186c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d044      	beq.n	8001904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d107      	bne.n	8001892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d119      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e07f      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d003      	beq.n	80018a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d107      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a2:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d109      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e06f      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b2:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e067      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c2:	4b37      	ldr	r3, [pc, #220]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f023 0203 	bic.w	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4934      	ldr	r1, [pc, #208]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d4:	f7ff fa84 	bl	8000de0 <HAL_GetTick>
 80018d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018dc:	f7ff fa80 	bl	8000de0 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e04f      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f2:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 020c 	and.w	r2, r3, #12
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	429a      	cmp	r2, r3
 8001902:	d1eb      	bne.n	80018dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001904:	4b25      	ldr	r3, [pc, #148]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0307 	and.w	r3, r3, #7
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	429a      	cmp	r2, r3
 8001910:	d20c      	bcs.n	800192c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <HAL_RCC_ClockConfig+0x1b8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e032      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d008      	beq.n	800194a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	4916      	ldr	r1, [pc, #88]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d009      	beq.n	800196a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	490e      	ldr	r1, [pc, #56]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	4313      	orrs	r3, r2
 8001968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800196a:	f000 f821 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 800196e:	4601      	mov	r1, r0
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <HAL_RCC_ClockConfig+0x1c0>)
 800197c:	5cd3      	ldrb	r3, [r2, r3]
 800197e:	fa21 f303 	lsr.w	r3, r1, r3
 8001982:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_RCC_ClockConfig+0x1c8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff f93a 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023c00 	.word	0x40023c00
 80019a0:	40023800 	.word	0x40023800
 80019a4:	080059cc 	.word	0x080059cc
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000004 	.word	0x20000004

080019b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	2300      	movs	r3, #0
 80019c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c6:	4b50      	ldr	r3, [pc, #320]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x158>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d007      	beq.n	80019e2 <HAL_RCC_GetSysClockFreq+0x32>
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d008      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x38>
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 808d 	bne.w	8001af6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019dc:	4b4b      	ldr	r3, [pc, #300]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x15c>)
 80019de:	60bb      	str	r3, [r7, #8]
       break;
 80019e0:	e08c      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019e2:	4b4b      	ldr	r3, [pc, #300]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x160>)
 80019e4:	60bb      	str	r3, [r7, #8]
      break;
 80019e6:	e089      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e8:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x158>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019f2:	4b45      	ldr	r3, [pc, #276]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x158>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d023      	beq.n	8001a46 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fe:	4b42      	ldr	r3, [pc, #264]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	099b      	lsrs	r3, r3, #6
 8001a04:	f04f 0400 	mov.w	r4, #0
 8001a08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	ea03 0501 	and.w	r5, r3, r1
 8001a14:	ea04 0602 	and.w	r6, r4, r2
 8001a18:	4a3d      	ldr	r2, [pc, #244]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a1a:	fb02 f106 	mul.w	r1, r2, r6
 8001a1e:	2200      	movs	r2, #0
 8001a20:	fb02 f205 	mul.w	r2, r2, r5
 8001a24:	440a      	add	r2, r1
 8001a26:	493a      	ldr	r1, [pc, #232]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x160>)
 8001a28:	fba5 0101 	umull	r0, r1, r5, r1
 8001a2c:	1853      	adds	r3, r2, r1
 8001a2e:	4619      	mov	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f04f 0400 	mov.w	r4, #0
 8001a36:	461a      	mov	r2, r3
 8001a38:	4623      	mov	r3, r4
 8001a3a:	f7fe fbd1 	bl	80001e0 <__aeabi_uldivmod>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	460c      	mov	r4, r1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	e049      	b.n	8001ada <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a46:	4b30      	ldr	r3, [pc, #192]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	099b      	lsrs	r3, r3, #6
 8001a4c:	f04f 0400 	mov.w	r4, #0
 8001a50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	ea03 0501 	and.w	r5, r3, r1
 8001a5c:	ea04 0602 	and.w	r6, r4, r2
 8001a60:	4629      	mov	r1, r5
 8001a62:	4632      	mov	r2, r6
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	f04f 0400 	mov.w	r4, #0
 8001a6c:	0154      	lsls	r4, r2, #5
 8001a6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a72:	014b      	lsls	r3, r1, #5
 8001a74:	4619      	mov	r1, r3
 8001a76:	4622      	mov	r2, r4
 8001a78:	1b49      	subs	r1, r1, r5
 8001a7a:	eb62 0206 	sbc.w	r2, r2, r6
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	f04f 0400 	mov.w	r4, #0
 8001a86:	0194      	lsls	r4, r2, #6
 8001a88:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a8c:	018b      	lsls	r3, r1, #6
 8001a8e:	1a5b      	subs	r3, r3, r1
 8001a90:	eb64 0402 	sbc.w	r4, r4, r2
 8001a94:	f04f 0100 	mov.w	r1, #0
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	00e2      	lsls	r2, r4, #3
 8001a9e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001aa2:	00d9      	lsls	r1, r3, #3
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4614      	mov	r4, r2
 8001aa8:	195b      	adds	r3, r3, r5
 8001aaa:	eb44 0406 	adc.w	r4, r4, r6
 8001aae:	f04f 0100 	mov.w	r1, #0
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	02a2      	lsls	r2, r4, #10
 8001ab8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001abc:	0299      	lsls	r1, r3, #10
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4614      	mov	r4, r2
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f04f 0400 	mov.w	r4, #0
 8001acc:	461a      	mov	r2, r3
 8001ace:	4623      	mov	r3, r4
 8001ad0:	f7fe fb86 	bl	80001e0 <__aeabi_uldivmod>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	460c      	mov	r4, r1
 8001ad8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ada:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x158>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	0c1b      	lsrs	r3, r3, #16
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af2:	60bb      	str	r3, [r7, #8]
      break;
 8001af4:	e002      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001af8:	60bb      	str	r3, [r7, #8]
      break;
 8001afa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001afc:	68bb      	ldr	r3, [r7, #8]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	00f42400 	.word	0x00f42400
 8001b10:	017d7840 	.word	0x017d7840

08001b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000000 	.word	0x20000000

08001b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b30:	f7ff fff0 	bl	8001b14 <HAL_RCC_GetHCLKFreq>
 8001b34:	4601      	mov	r1, r0
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	0b5b      	lsrs	r3, r3, #13
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	4a03      	ldr	r2, [pc, #12]	; (8001b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	080059dc 	.word	0x080059dc

08001b54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	220f      	movs	r2, #15
 8001b62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0203 	and.w	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <HAL_RCC_GetClockConfig+0x60>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0207 	and.w	r2, r3, #7
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	601a      	str	r2, [r3, #0]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40023c00 	.word	0x40023c00

08001bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e041      	b.n	8001c4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7fe ff76 	bl	8000ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2202      	movs	r2, #2
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	f000 fcac 	bl	8002554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d001      	beq.n	8001c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e044      	b.n	8001cfa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68da      	ldr	r2, [r3, #12]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1e      	ldr	r2, [pc, #120]	; (8001d08 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d018      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c9a:	d013      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a1a      	ldr	r2, [pc, #104]	; (8001d0c <HAL_TIM_Base_Start_IT+0xb4>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d00e      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a19      	ldr	r2, [pc, #100]	; (8001d10 <HAL_TIM_Base_Start_IT+0xb8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d009      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a17      	ldr	r2, [pc, #92]	; (8001d14 <HAL_TIM_Base_Start_IT+0xbc>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d004      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a16      	ldr	r2, [pc, #88]	; (8001d18 <HAL_TIM_Base_Start_IT+0xc0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d111      	bne.n	8001ce8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d010      	beq.n	8001cf8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0201 	orr.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce6:	e007      	b.n	8001cf8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40010000 	.word	0x40010000
 8001d0c:	40000400 	.word	0x40000400
 8001d10:	40000800 	.word	0x40000800
 8001d14:	40000c00 	.word	0x40000c00
 8001d18:	40014000 	.word	0x40014000

08001d1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e041      	b.n	8001db2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d106      	bne.n	8001d48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f839 	bl	8001dba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3304      	adds	r3, #4
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f000 fbfa 	bl	8002554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d109      	bne.n	8001df4 <HAL_TIM_PWM_Start+0x24>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	bf14      	ite	ne
 8001dec:	2301      	movne	r3, #1
 8001dee:	2300      	moveq	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	e022      	b.n	8001e3a <HAL_TIM_PWM_Start+0x6a>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d109      	bne.n	8001e0e <HAL_TIM_PWM_Start+0x3e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	bf14      	ite	ne
 8001e06:	2301      	movne	r3, #1
 8001e08:	2300      	moveq	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	e015      	b.n	8001e3a <HAL_TIM_PWM_Start+0x6a>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d109      	bne.n	8001e28 <HAL_TIM_PWM_Start+0x58>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	bf14      	ite	ne
 8001e20:	2301      	movne	r3, #1
 8001e22:	2300      	moveq	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	e008      	b.n	8001e3a <HAL_TIM_PWM_Start+0x6a>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	bf14      	ite	ne
 8001e34:	2301      	movne	r3, #1
 8001e36:	2300      	moveq	r3, #0
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e068      	b.n	8001f14 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d104      	bne.n	8001e52 <HAL_TIM_PWM_Start+0x82>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e50:	e013      	b.n	8001e7a <HAL_TIM_PWM_Start+0xaa>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d104      	bne.n	8001e62 <HAL_TIM_PWM_Start+0x92>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e60:	e00b      	b.n	8001e7a <HAL_TIM_PWM_Start+0xaa>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d104      	bne.n	8001e72 <HAL_TIM_PWM_Start+0xa2>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e70:	e003      	b.n	8001e7a <HAL_TIM_PWM_Start+0xaa>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2202      	movs	r2, #2
 8001e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	6839      	ldr	r1, [r7, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 fe0c 	bl	8002aa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a23      	ldr	r2, [pc, #140]	; (8001f1c <HAL_TIM_PWM_Start+0x14c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d107      	bne.n	8001ea2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1d      	ldr	r2, [pc, #116]	; (8001f1c <HAL_TIM_PWM_Start+0x14c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d018      	beq.n	8001ede <HAL_TIM_PWM_Start+0x10e>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb4:	d013      	beq.n	8001ede <HAL_TIM_PWM_Start+0x10e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a19      	ldr	r2, [pc, #100]	; (8001f20 <HAL_TIM_PWM_Start+0x150>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d00e      	beq.n	8001ede <HAL_TIM_PWM_Start+0x10e>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a17      	ldr	r2, [pc, #92]	; (8001f24 <HAL_TIM_PWM_Start+0x154>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d009      	beq.n	8001ede <HAL_TIM_PWM_Start+0x10e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a16      	ldr	r2, [pc, #88]	; (8001f28 <HAL_TIM_PWM_Start+0x158>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d004      	beq.n	8001ede <HAL_TIM_PWM_Start+0x10e>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <HAL_TIM_PWM_Start+0x15c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d111      	bne.n	8001f02 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b06      	cmp	r3, #6
 8001eee:	d010      	beq.n	8001f12 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f00:	e007      	b.n	8001f12 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0201 	orr.w	r2, r2, #1
 8001f10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40010000 	.word	0x40010000
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40000800 	.word	0x40000800
 8001f28:	40000c00 	.word	0x40000c00
 8001f2c:	40014000 	.word	0x40014000

08001f30 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	6839      	ldr	r1, [r7, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fdac 	bl	8002aa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a29      	ldr	r2, [pc, #164]	; (8001ff4 <HAL_TIM_PWM_Stop+0xc4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d117      	bne.n	8001f82 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6a1a      	ldr	r2, [r3, #32]
 8001f58:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10f      	bne.n	8001f82 <HAL_TIM_PWM_Stop+0x52>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6a1a      	ldr	r2, [r3, #32]
 8001f68:	f240 4344 	movw	r3, #1092	; 0x444
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d107      	bne.n	8001f82 <HAL_TIM_PWM_Stop+0x52>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6a1a      	ldr	r2, [r3, #32]
 8001f88:	f241 1311 	movw	r3, #4369	; 0x1111
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10f      	bne.n	8001fb2 <HAL_TIM_PWM_Stop+0x82>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6a1a      	ldr	r2, [r3, #32]
 8001f98:	f240 4344 	movw	r3, #1092	; 0x444
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d107      	bne.n	8001fb2 <HAL_TIM_PWM_Stop+0x82>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0201 	bic.w	r2, r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d104      	bne.n	8001fc2 <HAL_TIM_PWM_Stop+0x92>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fc0:	e013      	b.n	8001fea <HAL_TIM_PWM_Stop+0xba>
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d104      	bne.n	8001fd2 <HAL_TIM_PWM_Stop+0xa2>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fd0:	e00b      	b.n	8001fea <HAL_TIM_PWM_Stop+0xba>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d104      	bne.n	8001fe2 <HAL_TIM_PWM_Stop+0xb2>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fe0:	e003      	b.n	8001fea <HAL_TIM_PWM_Stop+0xba>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40010000 	.word	0x40010000

08001ff8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b02      	cmp	r3, #2
 800200c:	d122      	bne.n	8002054 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b02      	cmp	r3, #2
 800201a:	d11b      	bne.n	8002054 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0202 	mvn.w	r2, #2
 8002024:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fa6c 	bl	8002518 <HAL_TIM_IC_CaptureCallback>
 8002040:	e005      	b.n	800204e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fa5e 	bl	8002504 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 fa6f 	bl	800252c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	2b04      	cmp	r3, #4
 8002060:	d122      	bne.n	80020a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b04      	cmp	r3, #4
 800206e:	d11b      	bne.n	80020a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0204 	mvn.w	r2, #4
 8002078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2202      	movs	r2, #2
 800207e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fa42 	bl	8002518 <HAL_TIM_IC_CaptureCallback>
 8002094:	e005      	b.n	80020a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fa34 	bl	8002504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 fa45 	bl	800252c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d122      	bne.n	80020fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d11b      	bne.n	80020fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0208 	mvn.w	r2, #8
 80020cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2204      	movs	r2, #4
 80020d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fa18 	bl	8002518 <HAL_TIM_IC_CaptureCallback>
 80020e8:	e005      	b.n	80020f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fa0a 	bl	8002504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 fa1b 	bl	800252c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	2b10      	cmp	r3, #16
 8002108:	d122      	bne.n	8002150 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b10      	cmp	r3, #16
 8002116:	d11b      	bne.n	8002150 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0210 	mvn.w	r2, #16
 8002120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2208      	movs	r2, #8
 8002126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f9ee 	bl	8002518 <HAL_TIM_IC_CaptureCallback>
 800213c:	e005      	b.n	800214a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f9e0 	bl	8002504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f9f1 	bl	800252c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b01      	cmp	r3, #1
 800215c:	d10e      	bne.n	800217c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	d107      	bne.n	800217c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0201 	mvn.w	r2, #1
 8002174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7fe fc68 	bl	8000a4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	2b80      	cmp	r3, #128	; 0x80
 8002188:	d10e      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002194:	2b80      	cmp	r3, #128	; 0x80
 8002196:	d107      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 fd6c 	bl	8002c80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b2:	2b40      	cmp	r3, #64	; 0x40
 80021b4:	d10e      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c0:	2b40      	cmp	r3, #64	; 0x40
 80021c2:	d107      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f9b6 	bl	8002540 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	2b20      	cmp	r3, #32
 80021e0:	d10e      	bne.n	8002200 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0320 	and.w	r3, r3, #32
 80021ec:	2b20      	cmp	r3, #32
 80021ee:	d107      	bne.n	8002200 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0220 	mvn.w	r2, #32
 80021f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fd36 	bl	8002c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800221e:	2b01      	cmp	r3, #1
 8002220:	d101      	bne.n	8002226 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002222:	2302      	movs	r3, #2
 8002224:	e0ae      	b.n	8002384 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b0c      	cmp	r3, #12
 8002232:	f200 809f 	bhi.w	8002374 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002236:	a201      	add	r2, pc, #4	; (adr r2, 800223c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223c:	08002271 	.word	0x08002271
 8002240:	08002375 	.word	0x08002375
 8002244:	08002375 	.word	0x08002375
 8002248:	08002375 	.word	0x08002375
 800224c:	080022b1 	.word	0x080022b1
 8002250:	08002375 	.word	0x08002375
 8002254:	08002375 	.word	0x08002375
 8002258:	08002375 	.word	0x08002375
 800225c:	080022f3 	.word	0x080022f3
 8002260:	08002375 	.word	0x08002375
 8002264:	08002375 	.word	0x08002375
 8002268:	08002375 	.word	0x08002375
 800226c:	08002333 	.word	0x08002333
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f9ec 	bl	8002654 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699a      	ldr	r2, [r3, #24]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0208 	orr.w	r2, r2, #8
 800228a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699a      	ldr	r2, [r3, #24]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0204 	bic.w	r2, r2, #4
 800229a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6999      	ldr	r1, [r3, #24]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	619a      	str	r2, [r3, #24]
      break;
 80022ae:	e064      	b.n	800237a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 fa32 	bl	8002720 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6999      	ldr	r1, [r3, #24]
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	021a      	lsls	r2, r3, #8
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	619a      	str	r2, [r3, #24]
      break;
 80022f0:	e043      	b.n	800237a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68b9      	ldr	r1, [r7, #8]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fa7d 	bl	80027f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	69da      	ldr	r2, [r3, #28]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0208 	orr.w	r2, r2, #8
 800230c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69da      	ldr	r2, [r3, #28]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0204 	bic.w	r2, r2, #4
 800231c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69d9      	ldr	r1, [r3, #28]
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	430a      	orrs	r2, r1
 800232e:	61da      	str	r2, [r3, #28]
      break;
 8002330:	e023      	b.n	800237a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68b9      	ldr	r1, [r7, #8]
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fac7 	bl	80028cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69da      	ldr	r2, [r3, #28]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800234c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	69da      	ldr	r2, [r3, #28]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800235c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	69d9      	ldr	r1, [r3, #28]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	021a      	lsls	r2, r3, #8
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	61da      	str	r2, [r3, #28]
      break;
 8002372:	e002      	b.n	800237a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	75fb      	strb	r3, [r7, #23]
      break;
 8002378:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002382:	7dfb      	ldrb	r3, [r7, #23]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_TIM_ConfigClockSource+0x1c>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e0a9      	b.n	80024fc <HAL_TIM_ConfigClockSource+0x170>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2b40      	cmp	r3, #64	; 0x40
 80023de:	d067      	beq.n	80024b0 <HAL_TIM_ConfigClockSource+0x124>
 80023e0:	2b40      	cmp	r3, #64	; 0x40
 80023e2:	d80b      	bhi.n	80023fc <HAL_TIM_ConfigClockSource+0x70>
 80023e4:	2b10      	cmp	r3, #16
 80023e6:	d073      	beq.n	80024d0 <HAL_TIM_ConfigClockSource+0x144>
 80023e8:	2b10      	cmp	r3, #16
 80023ea:	d802      	bhi.n	80023f2 <HAL_TIM_ConfigClockSource+0x66>
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d06f      	beq.n	80024d0 <HAL_TIM_ConfigClockSource+0x144>
 80023f0:	e077      	b.n	80024e2 <HAL_TIM_ConfigClockSource+0x156>
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	d06c      	beq.n	80024d0 <HAL_TIM_ConfigClockSource+0x144>
 80023f6:	2b30      	cmp	r3, #48	; 0x30
 80023f8:	d06a      	beq.n	80024d0 <HAL_TIM_ConfigClockSource+0x144>
 80023fa:	e072      	b.n	80024e2 <HAL_TIM_ConfigClockSource+0x156>
 80023fc:	2b70      	cmp	r3, #112	; 0x70
 80023fe:	d00d      	beq.n	800241c <HAL_TIM_ConfigClockSource+0x90>
 8002400:	2b70      	cmp	r3, #112	; 0x70
 8002402:	d804      	bhi.n	800240e <HAL_TIM_ConfigClockSource+0x82>
 8002404:	2b50      	cmp	r3, #80	; 0x50
 8002406:	d033      	beq.n	8002470 <HAL_TIM_ConfigClockSource+0xe4>
 8002408:	2b60      	cmp	r3, #96	; 0x60
 800240a:	d041      	beq.n	8002490 <HAL_TIM_ConfigClockSource+0x104>
 800240c:	e069      	b.n	80024e2 <HAL_TIM_ConfigClockSource+0x156>
 800240e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002412:	d069      	beq.n	80024e8 <HAL_TIM_ConfigClockSource+0x15c>
 8002414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002418:	d017      	beq.n	800244a <HAL_TIM_ConfigClockSource+0xbe>
 800241a:	e062      	b.n	80024e2 <HAL_TIM_ConfigClockSource+0x156>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	6899      	ldr	r1, [r3, #8]
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f000 fb18 	bl	8002a60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800243e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	609a      	str	r2, [r3, #8]
      break;
 8002448:	e04f      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x15e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6899      	ldr	r1, [r3, #8]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f000 fb01 	bl	8002a60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800246c:	609a      	str	r2, [r3, #8]
      break;
 800246e:	e03c      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	461a      	mov	r2, r3
 800247e:	f000 fa75 	bl	800296c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2150      	movs	r1, #80	; 0x50
 8002488:	4618      	mov	r0, r3
 800248a:	f000 face 	bl	8002a2a <TIM_ITRx_SetConfig>
      break;
 800248e:	e02c      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6859      	ldr	r1, [r3, #4]
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	461a      	mov	r2, r3
 800249e:	f000 fa94 	bl	80029ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2160      	movs	r1, #96	; 0x60
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fabe 	bl	8002a2a <TIM_ITRx_SetConfig>
      break;
 80024ae:	e01c      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	6859      	ldr	r1, [r3, #4]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	461a      	mov	r2, r3
 80024be:	f000 fa55 	bl	800296c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2140      	movs	r1, #64	; 0x40
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 faae 	bl	8002a2a <TIM_ITRx_SetConfig>
      break;
 80024ce:	e00c      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x15e>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4619      	mov	r1, r3
 80024da:	4610      	mov	r0, r2
 80024dc:	f000 faa5 	bl	8002a2a <TIM_ITRx_SetConfig>
      break;
 80024e0:	e003      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x15e>
    }

    default:
      status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	73fb      	strb	r3, [r7, #15]
      break;
 80024e6:	e000      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80024e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a34      	ldr	r2, [pc, #208]	; (8002638 <TIM_Base_SetConfig+0xe4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00f      	beq.n	800258c <TIM_Base_SetConfig+0x38>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002572:	d00b      	beq.n	800258c <TIM_Base_SetConfig+0x38>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a31      	ldr	r2, [pc, #196]	; (800263c <TIM_Base_SetConfig+0xe8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d007      	beq.n	800258c <TIM_Base_SetConfig+0x38>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	4a30      	ldr	r2, [pc, #192]	; (8002640 <TIM_Base_SetConfig+0xec>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d003      	beq.n	800258c <TIM_Base_SetConfig+0x38>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a2f      	ldr	r2, [pc, #188]	; (8002644 <TIM_Base_SetConfig+0xf0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d108      	bne.n	800259e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a25      	ldr	r2, [pc, #148]	; (8002638 <TIM_Base_SetConfig+0xe4>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01b      	beq.n	80025de <TIM_Base_SetConfig+0x8a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ac:	d017      	beq.n	80025de <TIM_Base_SetConfig+0x8a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a22      	ldr	r2, [pc, #136]	; (800263c <TIM_Base_SetConfig+0xe8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d013      	beq.n	80025de <TIM_Base_SetConfig+0x8a>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a21      	ldr	r2, [pc, #132]	; (8002640 <TIM_Base_SetConfig+0xec>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00f      	beq.n	80025de <TIM_Base_SetConfig+0x8a>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a20      	ldr	r2, [pc, #128]	; (8002644 <TIM_Base_SetConfig+0xf0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00b      	beq.n	80025de <TIM_Base_SetConfig+0x8a>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a1f      	ldr	r2, [pc, #124]	; (8002648 <TIM_Base_SetConfig+0xf4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d007      	beq.n	80025de <TIM_Base_SetConfig+0x8a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a1e      	ldr	r2, [pc, #120]	; (800264c <TIM_Base_SetConfig+0xf8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d003      	beq.n	80025de <TIM_Base_SetConfig+0x8a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <TIM_Base_SetConfig+0xfc>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d108      	bne.n	80025f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a08      	ldr	r2, [pc, #32]	; (8002638 <TIM_Base_SetConfig+0xe4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d103      	bne.n	8002624 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	615a      	str	r2, [r3, #20]
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40010000 	.word	0x40010000
 800263c:	40000400 	.word	0x40000400
 8002640:	40000800 	.word	0x40000800
 8002644:	40000c00 	.word	0x40000c00
 8002648:	40014000 	.word	0x40014000
 800264c:	40014400 	.word	0x40014400
 8002650:	40014800 	.word	0x40014800

08002654 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002654:	b480      	push	{r7}
 8002656:	b087      	sub	sp, #28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	f023 0201 	bic.w	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f023 0303 	bic.w	r3, r3, #3
 800268a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f023 0302 	bic.w	r3, r3, #2
 800269c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a1c      	ldr	r2, [pc, #112]	; (800271c <TIM_OC1_SetConfig+0xc8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d10c      	bne.n	80026ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f023 0308 	bic.w	r3, r3, #8
 80026b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	4313      	orrs	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f023 0304 	bic.w	r3, r3, #4
 80026c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a13      	ldr	r2, [pc, #76]	; (800271c <TIM_OC1_SetConfig+0xc8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d111      	bne.n	80026f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	621a      	str	r2, [r3, #32]
}
 8002710:	bf00      	nop
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40010000 	.word	0x40010000

08002720 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	f023 0210 	bic.w	r2, r3, #16
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800274e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f023 0320 	bic.w	r3, r3, #32
 800276a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4313      	orrs	r3, r2
 8002776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a1e      	ldr	r2, [pc, #120]	; (80027f4 <TIM_OC2_SetConfig+0xd4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d10d      	bne.n	800279c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800279a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a15      	ldr	r2, [pc, #84]	; (80027f4 <TIM_OC2_SetConfig+0xd4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d113      	bne.n	80027cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	621a      	str	r2, [r3, #32]
}
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40010000 	.word	0x40010000

080027f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b087      	sub	sp, #28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69db      	ldr	r3, [r3, #28]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f023 0303 	bic.w	r3, r3, #3
 800282e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	021b      	lsls	r3, r3, #8
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a1d      	ldr	r2, [pc, #116]	; (80028c8 <TIM_OC3_SetConfig+0xd0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d10d      	bne.n	8002872 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800285c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	021b      	lsls	r3, r3, #8
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	4313      	orrs	r3, r2
 8002868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <TIM_OC3_SetConfig+0xd0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d113      	bne.n	80028a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	621a      	str	r2, [r3, #32]
}
 80028bc:	bf00      	nop
 80028be:	371c      	adds	r7, #28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	40010000 	.word	0x40010000

080028cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4313      	orrs	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002916:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	031b      	lsls	r3, r3, #12
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4313      	orrs	r3, r2
 8002922:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a10      	ldr	r2, [pc, #64]	; (8002968 <TIM_OC4_SetConfig+0x9c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d109      	bne.n	8002940 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002932:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	019b      	lsls	r3, r3, #6
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	4313      	orrs	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	621a      	str	r2, [r3, #32]
}
 800295a:	bf00      	nop
 800295c:	371c      	adds	r7, #28
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40010000 	.word	0x40010000

0800296c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	f023 0201 	bic.w	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f023 030a 	bic.w	r3, r3, #10
 80029a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	621a      	str	r2, [r3, #32]
}
 80029be:	bf00      	nop
 80029c0:	371c      	adds	r7, #28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b087      	sub	sp, #28
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	f023 0210 	bic.w	r2, r3, #16
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	031b      	lsls	r3, r3, #12
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	621a      	str	r2, [r3, #32]
}
 8002a1e:	bf00      	nop
 8002a20:	371c      	adds	r7, #28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b085      	sub	sp, #20
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f043 0307 	orr.w	r3, r3, #7
 8002a4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	609a      	str	r2, [r3, #8]
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
 8002a6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	021a      	lsls	r2, r3, #8
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	609a      	str	r2, [r3, #8]
}
 8002a94:	bf00      	nop
 8002a96:	371c      	adds	r7, #28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a1a      	ldr	r2, [r3, #32]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a1a      	ldr	r2, [r3, #32]
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	f003 031f 	and.w	r3, r3, #31
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	621a      	str	r2, [r3, #32]
}
 8002ade:	bf00      	nop
 8002ae0:	371c      	adds	r7, #28
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e050      	b.n	8002ba6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a1c      	ldr	r2, [pc, #112]	; (8002bb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d018      	beq.n	8002b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b50:	d013      	beq.n	8002b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a18      	ldr	r2, [pc, #96]	; (8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00e      	beq.n	8002b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a16      	ldr	r2, [pc, #88]	; (8002bbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d009      	beq.n	8002b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d004      	beq.n	8002b7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a13      	ldr	r2, [pc, #76]	; (8002bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d10c      	bne.n	8002b94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40010000 	.word	0x40010000
 8002bb8:	40000400 	.word	0x40000400
 8002bbc:	40000800 	.word	0x40000800
 8002bc0:	40000c00 	.word	0x40000c00
 8002bc4:	40014000 	.word	0x40014000

08002bc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e03d      	b.n	8002c60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <__NVIC_SetPriority>:
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	6039      	str	r1, [r7, #0]
 8002c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	db0a      	blt.n	8002cbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	490c      	ldr	r1, [pc, #48]	; (8002ce0 <__NVIC_SetPriority+0x4c>)
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	0112      	lsls	r2, r2, #4
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002cbc:	e00a      	b.n	8002cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4908      	ldr	r1, [pc, #32]	; (8002ce4 <__NVIC_SetPriority+0x50>)
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	3b04      	subs	r3, #4
 8002ccc:	0112      	lsls	r2, r2, #4
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	761a      	strb	r2, [r3, #24]
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000e100 	.word	0xe000e100
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <SysTick_Handler+0x1c>)
 8002cee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002cf0:	f001 fd04 	bl	80046fc <xTaskGetSchedulerState>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d001      	beq.n	8002cfe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002cfa:	f002 fad5 	bl	80052a8 <xPortSysTickHandler>
  }
}
 8002cfe:	bf00      	nop
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	e000e010 	.word	0xe000e010

08002d08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	f06f 0004 	mvn.w	r0, #4
 8002d12:	f7ff ffbf 	bl	8002c94 <__NVIC_SetPriority>
#endif
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
	...

08002d1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d22:	f3ef 8305 	mrs	r3, IPSR
 8002d26:	603b      	str	r3, [r7, #0]
  return(result);
 8002d28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002d2e:	f06f 0305 	mvn.w	r3, #5
 8002d32:	607b      	str	r3, [r7, #4]
 8002d34:	e00c      	b.n	8002d50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <osKernelInitialize+0x44>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d105      	bne.n	8002d4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <osKernelInitialize+0x44>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	607b      	str	r3, [r7, #4]
 8002d48:	e002      	b.n	8002d50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002d50:	687b      	ldr	r3, [r7, #4]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000094 	.word	0x20000094

08002d64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d6a:	f3ef 8305 	mrs	r3, IPSR
 8002d6e:	603b      	str	r3, [r7, #0]
  return(result);
 8002d70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002d76:	f06f 0305 	mvn.w	r3, #5
 8002d7a:	607b      	str	r3, [r7, #4]
 8002d7c:	e010      	b.n	8002da0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <osKernelStart+0x48>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d109      	bne.n	8002d9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002d86:	f7ff ffbf 	bl	8002d08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <osKernelStart+0x48>)
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002d90:	f001 f866 	bl	8003e60 <vTaskStartScheduler>
      stat = osOK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	607b      	str	r3, [r7, #4]
 8002d98:	e002      	b.n	8002da0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002da0:	687b      	ldr	r3, [r7, #4]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000094 	.word	0x20000094

08002db0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08e      	sub	sp, #56	; 0x38
 8002db4:	af04      	add	r7, sp, #16
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dc0:	f3ef 8305 	mrs	r3, IPSR
 8002dc4:	617b      	str	r3, [r7, #20]
  return(result);
 8002dc6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d17e      	bne.n	8002eca <osThreadNew+0x11a>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d07b      	beq.n	8002eca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002dd6:	2318      	movs	r3, #24
 8002dd8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002dde:	f04f 33ff 	mov.w	r3, #4294967295
 8002de2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d045      	beq.n	8002e76 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <osThreadNew+0x48>
        name = attr->name;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d002      	beq.n	8002e06 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699b      	ldr	r3, [r3, #24]
 8002e04:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <osThreadNew+0x6e>
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	2b38      	cmp	r3, #56	; 0x38
 8002e10:	d805      	bhi.n	8002e1e <osThreadNew+0x6e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <osThreadNew+0x72>
        return (NULL);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e054      	b.n	8002ecc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	089b      	lsrs	r3, r3, #2
 8002e30:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00e      	beq.n	8002e58 <osThreadNew+0xa8>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	2bbb      	cmp	r3, #187	; 0xbb
 8002e40:	d90a      	bls.n	8002e58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d006      	beq.n	8002e58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d002      	beq.n	8002e58 <osThreadNew+0xa8>
        mem = 1;
 8002e52:	2301      	movs	r3, #1
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	e010      	b.n	8002e7a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10c      	bne.n	8002e7a <osThreadNew+0xca>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d108      	bne.n	8002e7a <osThreadNew+0xca>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d104      	bne.n	8002e7a <osThreadNew+0xca>
          mem = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	e001      	b.n	8002e7a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d110      	bne.n	8002ea2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e88:	9202      	str	r2, [sp, #8]
 8002e8a:	9301      	str	r3, [sp, #4]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	6a3a      	ldr	r2, [r7, #32]
 8002e94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fdf8 	bl	8003a8c <xTaskCreateStatic>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	613b      	str	r3, [r7, #16]
 8002ea0:	e013      	b.n	8002eca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d110      	bne.n	8002eca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	f107 0310 	add.w	r3, r7, #16
 8002eb0:	9301      	str	r3, [sp, #4]
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 fe40 	bl	8003b40 <xTaskCreate>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d001      	beq.n	8002eca <osThreadNew+0x11a>
            hTask = NULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002eca:	693b      	ldr	r3, [r7, #16]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3728      	adds	r7, #40	; 0x28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002edc:	f3ef 8305 	mrs	r3, IPSR
 8002ee0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <osDelay+0x1c>
    stat = osErrorISR;
 8002ee8:	f06f 0305 	mvn.w	r3, #5
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	e007      	b.n	8002f00 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 ff7c 	bl	8003df8 <vTaskDelay>
    }
  }

  return (stat);
 8002f00:	68fb      	ldr	r3, [r7, #12]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4a07      	ldr	r2, [pc, #28]	; (8002f38 <vApplicationGetIdleTaskMemory+0x2c>)
 8002f1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	4a06      	ldr	r2, [pc, #24]	; (8002f3c <vApplicationGetIdleTaskMemory+0x30>)
 8002f22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2280      	movs	r2, #128	; 0x80
 8002f28:	601a      	str	r2, [r3, #0]
}
 8002f2a:	bf00      	nop
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000098 	.word	0x20000098
 8002f3c:	20000154 	.word	0x20000154

08002f40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4a07      	ldr	r2, [pc, #28]	; (8002f6c <vApplicationGetTimerTaskMemory+0x2c>)
 8002f50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4a06      	ldr	r2, [pc, #24]	; (8002f70 <vApplicationGetTimerTaskMemory+0x30>)
 8002f56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f5e:	601a      	str	r2, [r3, #0]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	20000354 	.word	0x20000354
 8002f70:	20000410 	.word	0x20000410

08002f74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f103 0208 	add.w	r2, r3, #8
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f04f 32ff 	mov.w	r2, #4294967295
 8002f8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f103 0208 	add.w	r2, r3, #8
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f103 0208 	add.w	r2, r3, #8
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b085      	sub	sp, #20
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	601a      	str	r2, [r3, #0]
}
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr

08003016 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003016:	b480      	push	{r7}
 8003018:	b085      	sub	sp, #20
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d103      	bne.n	8003036 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	60fb      	str	r3, [r7, #12]
 8003034:	e00c      	b.n	8003050 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3308      	adds	r3, #8
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	e002      	b.n	8003044 <vListInsert+0x2e>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	429a      	cmp	r2, r3
 800304e:	d2f6      	bcs.n	800303e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	601a      	str	r2, [r3, #0]
}
 800307c:	bf00      	nop
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6892      	ldr	r2, [r2, #8]
 800309e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	6852      	ldr	r2, [r2, #4]
 80030a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d103      	bne.n	80030bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	1e5a      	subs	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d109      	bne.n	8003104 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80030f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	e7fe      	b.n	8003102 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003104:	f002 f842 	bl	800518c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003110:	68f9      	ldr	r1, [r7, #12]
 8003112:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	441a      	add	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003134:	3b01      	subs	r3, #1
 8003136:	68f9      	ldr	r1, [r7, #12]
 8003138:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800313a:	fb01 f303 	mul.w	r3, r1, r3
 800313e:	441a      	add	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	22ff      	movs	r2, #255	; 0xff
 8003148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	22ff      	movs	r2, #255	; 0xff
 8003150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d114      	bne.n	8003184 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d01a      	beq.n	8003198 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	3310      	adds	r3, #16
 8003166:	4618      	mov	r0, r3
 8003168:	f001 f90c 	bl	8004384 <xTaskRemoveFromEventList>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d012      	beq.n	8003198 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003172:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <xQueueGenericReset+0xcc>)
 8003174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003178:	601a      	str	r2, [r3, #0]
 800317a:	f3bf 8f4f 	dsb	sy
 800317e:	f3bf 8f6f 	isb	sy
 8003182:	e009      	b.n	8003198 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	3310      	adds	r3, #16
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fef3 	bl	8002f74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	3324      	adds	r3, #36	; 0x24
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff feee 	bl	8002f74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003198:	f002 f826 	bl	80051e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800319c:	2301      	movs	r3, #1
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	e000ed04 	.word	0xe000ed04

080031ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08e      	sub	sp, #56	; 0x38
 80031b0:	af02      	add	r7, sp, #8
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d109      	bne.n	80031d4 <xQueueGenericCreateStatic+0x28>
 80031c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c4:	f383 8811 	msr	BASEPRI, r3
 80031c8:	f3bf 8f6f 	isb	sy
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d2:	e7fe      	b.n	80031d2 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <xQueueGenericCreateStatic+0x42>
 80031da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
 80031ec:	e7fe      	b.n	80031ec <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <xQueueGenericCreateStatic+0x4e>
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <xQueueGenericCreateStatic+0x52>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <xQueueGenericCreateStatic+0x54>
 80031fe:	2300      	movs	r3, #0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d109      	bne.n	8003218 <xQueueGenericCreateStatic+0x6c>
 8003204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	623b      	str	r3, [r7, #32]
 8003216:	e7fe      	b.n	8003216 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d102      	bne.n	8003224 <xQueueGenericCreateStatic+0x78>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <xQueueGenericCreateStatic+0x7c>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <xQueueGenericCreateStatic+0x7e>
 8003228:	2300      	movs	r3, #0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <xQueueGenericCreateStatic+0x96>
 800322e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003232:	f383 8811 	msr	BASEPRI, r3
 8003236:	f3bf 8f6f 	isb	sy
 800323a:	f3bf 8f4f 	dsb	sy
 800323e:	61fb      	str	r3, [r7, #28]
 8003240:	e7fe      	b.n	8003240 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003242:	2350      	movs	r3, #80	; 0x50
 8003244:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2b50      	cmp	r3, #80	; 0x50
 800324a:	d009      	beq.n	8003260 <xQueueGenericCreateStatic+0xb4>
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	e7fe      	b.n	800325e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003260:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00d      	beq.n	8003288 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800326c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003274:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	4613      	mov	r3, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f805 	bl	8003292 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800328a:	4618      	mov	r0, r3
 800328c:	3730      	adds	r7, #48	; 0x30
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b084      	sub	sp, #16
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	607a      	str	r2, [r7, #4]
 800329e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d103      	bne.n	80032ae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	e002      	b.n	80032b4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032c0:	2101      	movs	r1, #1
 80032c2:	69b8      	ldr	r0, [r7, #24]
 80032c4:	f7ff ff0a 	bl	80030dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80032d0:	bf00      	nop
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08e      	sub	sp, #56	; 0x38
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80032e6:	2300      	movs	r3, #0
 80032e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d109      	bne.n	8003308 <xQueueGenericSend+0x30>
 80032f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f8:	f383 8811 	msr	BASEPRI, r3
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	f3bf 8f4f 	dsb	sy
 8003304:	62bb      	str	r3, [r7, #40]	; 0x28
 8003306:	e7fe      	b.n	8003306 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d103      	bne.n	8003316 <xQueueGenericSend+0x3e>
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <xQueueGenericSend+0x42>
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <xQueueGenericSend+0x44>
 800331a:	2300      	movs	r3, #0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d109      	bne.n	8003334 <xQueueGenericSend+0x5c>
 8003320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
 8003332:	e7fe      	b.n	8003332 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d103      	bne.n	8003342 <xQueueGenericSend+0x6a>
 800333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <xQueueGenericSend+0x6e>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <xQueueGenericSend+0x70>
 8003346:	2300      	movs	r3, #0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d109      	bne.n	8003360 <xQueueGenericSend+0x88>
 800334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	623b      	str	r3, [r7, #32]
 800335e:	e7fe      	b.n	800335e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003360:	f001 f9cc 	bl	80046fc <xTaskGetSchedulerState>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d102      	bne.n	8003370 <xQueueGenericSend+0x98>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <xQueueGenericSend+0x9c>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <xQueueGenericSend+0x9e>
 8003374:	2300      	movs	r3, #0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <xQueueGenericSend+0xb6>
 800337a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337e:	f383 8811 	msr	BASEPRI, r3
 8003382:	f3bf 8f6f 	isb	sy
 8003386:	f3bf 8f4f 	dsb	sy
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	e7fe      	b.n	800338c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800338e:	f001 fefd 	bl	800518c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339a:	429a      	cmp	r2, r3
 800339c:	d302      	bcc.n	80033a4 <xQueueGenericSend+0xcc>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d129      	bne.n	80033f8 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033aa:	f000 fa03 	bl	80037b4 <prvCopyDataToQueue>
 80033ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d010      	beq.n	80033da <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ba:	3324      	adds	r3, #36	; 0x24
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 ffe1 	bl	8004384 <xTaskRemoveFromEventList>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d013      	beq.n	80033f0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80033c8:	4b3f      	ldr	r3, [pc, #252]	; (80034c8 <xQueueGenericSend+0x1f0>)
 80033ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	f3bf 8f6f 	isb	sy
 80033d8:	e00a      	b.n	80033f0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80033e0:	4b39      	ldr	r3, [pc, #228]	; (80034c8 <xQueueGenericSend+0x1f0>)
 80033e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80033f0:	f001 fefa 	bl	80051e8 <vPortExitCritical>
				return pdPASS;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e063      	b.n	80034c0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d103      	bne.n	8003406 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033fe:	f001 fef3 	bl	80051e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003402:	2300      	movs	r3, #0
 8003404:	e05c      	b.n	80034c0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003408:	2b00      	cmp	r3, #0
 800340a:	d106      	bne.n	800341a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	4618      	mov	r0, r3
 8003412:	f001 f819 	bl	8004448 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003416:	2301      	movs	r3, #1
 8003418:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800341a:	f001 fee5 	bl	80051e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800341e:	f000 fd8d 	bl	8003f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003422:	f001 feb3 	bl	800518c <vPortEnterCritical>
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800342c:	b25b      	sxtb	r3, r3
 800342e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003432:	d103      	bne.n	800343c <xQueueGenericSend+0x164>
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003442:	b25b      	sxtb	r3, r3
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d103      	bne.n	8003452 <xQueueGenericSend+0x17a>
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003452:	f001 fec9 	bl	80051e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003456:	1d3a      	adds	r2, r7, #4
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	4611      	mov	r1, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f001 f808 	bl	8004474 <xTaskCheckForTimeOut>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d124      	bne.n	80034b4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800346a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800346c:	f000 fa9a 	bl	80039a4 <prvIsQueueFull>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d018      	beq.n	80034a8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003478:	3310      	adds	r3, #16
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	4611      	mov	r1, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f000 ff32 	bl	80042e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003486:	f000 fa25 	bl	80038d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800348a:	f000 fd65 	bl	8003f58 <xTaskResumeAll>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	f47f af7c 	bne.w	800338e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003496:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <xQueueGenericSend+0x1f0>)
 8003498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	e772      	b.n	800338e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80034a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034aa:	f000 fa13 	bl	80038d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034ae:	f000 fd53 	bl	8003f58 <xTaskResumeAll>
 80034b2:	e76c      	b.n	800338e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80034b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034b6:	f000 fa0d 	bl	80038d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034ba:	f000 fd4d 	bl	8003f58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80034be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3738      	adds	r7, #56	; 0x38
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	e000ed04 	.word	0xe000ed04

080034cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b090      	sub	sp, #64	; 0x40
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
 80034d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80034de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d109      	bne.n	80034f8 <xQueueGenericSendFromISR+0x2c>
 80034e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e8:	f383 8811 	msr	BASEPRI, r3
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	f3bf 8f4f 	dsb	sy
 80034f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034f6:	e7fe      	b.n	80034f6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d103      	bne.n	8003506 <xQueueGenericSendFromISR+0x3a>
 80034fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <xQueueGenericSendFromISR+0x3e>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <xQueueGenericSendFromISR+0x40>
 800350a:	2300      	movs	r3, #0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d109      	bne.n	8003524 <xQueueGenericSendFromISR+0x58>
 8003510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
 8003522:	e7fe      	b.n	8003522 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d103      	bne.n	8003532 <xQueueGenericSendFromISR+0x66>
 800352a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800352c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <xQueueGenericSendFromISR+0x6a>
 8003532:	2301      	movs	r3, #1
 8003534:	e000      	b.n	8003538 <xQueueGenericSendFromISR+0x6c>
 8003536:	2300      	movs	r3, #0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d109      	bne.n	8003550 <xQueueGenericSendFromISR+0x84>
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	623b      	str	r3, [r7, #32]
 800354e:	e7fe      	b.n	800354e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003550:	f001 fef8 	bl	8005344 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003554:	f3ef 8211 	mrs	r2, BASEPRI
 8003558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	61fa      	str	r2, [r7, #28]
 800356a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800356c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800356e:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003578:	429a      	cmp	r2, r3
 800357a:	d302      	bcc.n	8003582 <xQueueGenericSendFromISR+0xb6>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d12f      	bne.n	80035e2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003588:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800358c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003598:	f000 f90c 	bl	80037b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800359c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d112      	bne.n	80035cc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d016      	beq.n	80035dc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b0:	3324      	adds	r3, #36	; 0x24
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fee6 	bl	8004384 <xTaskRemoveFromEventList>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00e      	beq.n	80035dc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00b      	beq.n	80035dc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	e007      	b.n	80035dc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80035cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80035d0:	3301      	adds	r3, #1
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	b25a      	sxtb	r2, r3
 80035d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80035dc:	2301      	movs	r3, #1
 80035de:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80035e0:	e001      	b.n	80035e6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80035f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3740      	adds	r7, #64	; 0x40
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	; 0x30
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003608:	2300      	movs	r3, #0
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <xQueueReceive+0x2e>
	__asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	623b      	str	r3, [r7, #32]
 8003628:	e7fe      	b.n	8003628 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d103      	bne.n	8003638 <xQueueReceive+0x3c>
 8003630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <xQueueReceive+0x40>
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <xQueueReceive+0x42>
 800363c:	2300      	movs	r3, #0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <xQueueReceive+0x5a>
 8003642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	61fb      	str	r3, [r7, #28]
 8003654:	e7fe      	b.n	8003654 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003656:	f001 f851 	bl	80046fc <xTaskGetSchedulerState>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <xQueueReceive+0x6a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <xQueueReceive+0x6e>
 8003666:	2301      	movs	r3, #1
 8003668:	e000      	b.n	800366c <xQueueReceive+0x70>
 800366a:	2300      	movs	r3, #0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d109      	bne.n	8003684 <xQueueReceive+0x88>
 8003670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	61bb      	str	r3, [r7, #24]
 8003682:	e7fe      	b.n	8003682 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003684:	f001 fd82 	bl	800518c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	2b00      	cmp	r3, #0
 8003692:	d01f      	beq.n	80036d4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003694:	68b9      	ldr	r1, [r7, #8]
 8003696:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003698:	f000 f8f6 	bl	8003888 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	1e5a      	subs	r2, r3, #1
 80036a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00f      	beq.n	80036cc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ae:	3310      	adds	r3, #16
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fe67 	bl	8004384 <xTaskRemoveFromEventList>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d007      	beq.n	80036cc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80036bc:	4b3c      	ldr	r3, [pc, #240]	; (80037b0 <xQueueReceive+0x1b4>)
 80036be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80036cc:	f001 fd8c 	bl	80051e8 <vPortExitCritical>
				return pdPASS;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e069      	b.n	80037a8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d103      	bne.n	80036e2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80036da:	f001 fd85 	bl	80051e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80036de:	2300      	movs	r3, #0
 80036e0:	e062      	b.n	80037a8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d106      	bne.n	80036f6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036e8:	f107 0310 	add.w	r3, r7, #16
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 feab 	bl	8004448 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036f2:	2301      	movs	r3, #1
 80036f4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036f6:	f001 fd77 	bl	80051e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036fa:	f000 fc1f 	bl	8003f3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036fe:	f001 fd45 	bl	800518c <vPortEnterCritical>
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003704:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003708:	b25b      	sxtb	r3, r3
 800370a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370e:	d103      	bne.n	8003718 <xQueueReceive+0x11c>
 8003710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800371e:	b25b      	sxtb	r3, r3
 8003720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003724:	d103      	bne.n	800372e <xQueueReceive+0x132>
 8003726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800372e:	f001 fd5b 	bl	80051e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003732:	1d3a      	adds	r2, r7, #4
 8003734:	f107 0310 	add.w	r3, r7, #16
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f000 fe9a 	bl	8004474 <xTaskCheckForTimeOut>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d123      	bne.n	800378e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003748:	f000 f916 	bl	8003978 <prvIsQueueEmpty>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d017      	beq.n	8003782 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003754:	3324      	adds	r3, #36	; 0x24
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fdc4 	bl	80042e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003762:	f000 f8b7 	bl	80038d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003766:	f000 fbf7 	bl	8003f58 <xTaskResumeAll>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d189      	bne.n	8003684 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003770:	4b0f      	ldr	r3, [pc, #60]	; (80037b0 <xQueueReceive+0x1b4>)
 8003772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	e780      	b.n	8003684 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003782:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003784:	f000 f8a6 	bl	80038d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003788:	f000 fbe6 	bl	8003f58 <xTaskResumeAll>
 800378c:	e77a      	b.n	8003684 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800378e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003790:	f000 f8a0 	bl	80038d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003794:	f000 fbe0 	bl	8003f58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800379a:	f000 f8ed 	bl	8003978 <prvIsQueueEmpty>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f43f af6f 	beq.w	8003684 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80037a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3730      	adds	r7, #48	; 0x30
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	e000ed04 	.word	0xe000ed04

080037b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10d      	bne.n	80037ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d14d      	bne.n	8003876 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 ffaa 	bl	8004738 <xTaskPriorityDisinherit>
 80037e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	e043      	b.n	8003876 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d119      	bne.n	8003828 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6858      	ldr	r0, [r3, #4]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	461a      	mov	r2, r3
 80037fe:	68b9      	ldr	r1, [r7, #8]
 8003800:	f001 ffe6 	bl	80057d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	441a      	add	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	429a      	cmp	r2, r3
 800381c:	d32b      	bcc.n	8003876 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	605a      	str	r2, [r3, #4]
 8003826:	e026      	b.n	8003876 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	68d8      	ldr	r0, [r3, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	461a      	mov	r2, r3
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	f001 ffcc 	bl	80057d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	425b      	negs	r3, r3
 8003842:	441a      	add	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d207      	bcs.n	8003864 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	425b      	negs	r3, r3
 800385e:	441a      	add	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d105      	bne.n	8003876 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	3b01      	subs	r3, #1
 8003874:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800387e:	697b      	ldr	r3, [r7, #20]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d018      	beq.n	80038cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	441a      	add	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68da      	ldr	r2, [r3, #12]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d303      	bcc.n	80038bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68d9      	ldr	r1, [r3, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	461a      	mov	r2, r3
 80038c6:	6838      	ldr	r0, [r7, #0]
 80038c8:	f001 ff82 	bl	80057d0 <memcpy>
	}
}
 80038cc:	bf00      	nop
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80038dc:	f001 fc56 	bl	800518c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038e8:	e011      	b.n	800390e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d012      	beq.n	8003918 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3324      	adds	r3, #36	; 0x24
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fd44 	bl	8004384 <xTaskRemoveFromEventList>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003902:	f000 fe17 	bl	8004534 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	3b01      	subs	r3, #1
 800390a:	b2db      	uxtb	r3, r3
 800390c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800390e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003912:	2b00      	cmp	r3, #0
 8003914:	dce9      	bgt.n	80038ea <prvUnlockQueue+0x16>
 8003916:	e000      	b.n	800391a <prvUnlockQueue+0x46>
					break;
 8003918:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	22ff      	movs	r2, #255	; 0xff
 800391e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003922:	f001 fc61 	bl	80051e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003926:	f001 fc31 	bl	800518c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003930:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003932:	e011      	b.n	8003958 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d012      	beq.n	8003962 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3310      	adds	r3, #16
 8003940:	4618      	mov	r0, r3
 8003942:	f000 fd1f 	bl	8004384 <xTaskRemoveFromEventList>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800394c:	f000 fdf2 	bl	8004534 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003950:	7bbb      	ldrb	r3, [r7, #14]
 8003952:	3b01      	subs	r3, #1
 8003954:	b2db      	uxtb	r3, r3
 8003956:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800395c:	2b00      	cmp	r3, #0
 800395e:	dce9      	bgt.n	8003934 <prvUnlockQueue+0x60>
 8003960:	e000      	b.n	8003964 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003962:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	22ff      	movs	r2, #255	; 0xff
 8003968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800396c:	f001 fc3c 	bl	80051e8 <vPortExitCritical>
}
 8003970:	bf00      	nop
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003980:	f001 fc04 	bl	800518c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	2b00      	cmp	r3, #0
 800398a:	d102      	bne.n	8003992 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800398c:	2301      	movs	r3, #1
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	e001      	b.n	8003996 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003996:	f001 fc27 	bl	80051e8 <vPortExitCritical>

	return xReturn;
 800399a:	68fb      	ldr	r3, [r7, #12]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039ac:	f001 fbee 	bl	800518c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d102      	bne.n	80039c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80039bc:	2301      	movs	r3, #1
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	e001      	b.n	80039c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80039c6:	f001 fc0f 	bl	80051e8 <vPortExitCritical>

	return xReturn;
 80039ca:	68fb      	ldr	r3, [r7, #12]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	e014      	b.n	8003a0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80039e4:	4a0e      	ldr	r2, [pc, #56]	; (8003a20 <vQueueAddToRegistry+0x4c>)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80039f0:	490b      	ldr	r1, [pc, #44]	; (8003a20 <vQueueAddToRegistry+0x4c>)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80039fa:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <vQueueAddToRegistry+0x4c>)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a06:	e005      	b.n	8003a14 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b07      	cmp	r3, #7
 8003a12:	d9e7      	bls.n	80039e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	20004b48 	.word	0x20004b48

08003a24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a34:	f001 fbaa 	bl	800518c <vPortEnterCritical>
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a3e:	b25b      	sxtb	r3, r3
 8003a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a44:	d103      	bne.n	8003a4e <vQueueWaitForMessageRestricted+0x2a>
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a54:	b25b      	sxtb	r3, r3
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5a:	d103      	bne.n	8003a64 <vQueueWaitForMessageRestricted+0x40>
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a64:	f001 fbc0 	bl	80051e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d106      	bne.n	8003a7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	3324      	adds	r3, #36	; 0x24
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fc59 	bl	8004330 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a7e:	6978      	ldr	r0, [r7, #20]
 8003a80:	f7ff ff28 	bl	80038d4 <prvUnlockQueue>
	}
 8003a84:	bf00      	nop
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08e      	sub	sp, #56	; 0x38
 8003a90:	af04      	add	r7, sp, #16
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d109      	bne.n	8003ab4 <xTaskCreateStatic+0x28>
 8003aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	623b      	str	r3, [r7, #32]
 8003ab2:	e7fe      	b.n	8003ab2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d109      	bne.n	8003ace <xTaskCreateStatic+0x42>
 8003aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abe:	f383 8811 	msr	BASEPRI, r3
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	f3bf 8f4f 	dsb	sy
 8003aca:	61fb      	str	r3, [r7, #28]
 8003acc:	e7fe      	b.n	8003acc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ace:	23bc      	movs	r3, #188	; 0xbc
 8003ad0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2bbc      	cmp	r3, #188	; 0xbc
 8003ad6:	d009      	beq.n	8003aec <xTaskCreateStatic+0x60>
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	e7fe      	b.n	8003aea <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003aec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01e      	beq.n	8003b32 <xTaskCreateStatic+0xa6>
 8003af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d01b      	beq.n	8003b32 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b02:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	9303      	str	r3, [sp, #12]
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	9302      	str	r3, [sp, #8]
 8003b14:	f107 0314 	add.w	r3, r7, #20
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	68b9      	ldr	r1, [r7, #8]
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 f851 	bl	8003bcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b2c:	f000 f8f4 	bl	8003d18 <prvAddNewTaskToReadyList>
 8003b30:	e001      	b.n	8003b36 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b36:	697b      	ldr	r3, [r7, #20]
	}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3728      	adds	r7, #40	; 0x28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08c      	sub	sp, #48	; 0x30
 8003b44:	af04      	add	r7, sp, #16
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f001 fc33 	bl	80053c0 <pvPortMalloc>
 8003b5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00e      	beq.n	8003b80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b62:	20bc      	movs	r0, #188	; 0xbc
 8003b64:	f001 fc2c 	bl	80053c0 <pvPortMalloc>
 8003b68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30
 8003b76:	e005      	b.n	8003b84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b78:	6978      	ldr	r0, [r7, #20]
 8003b7a:	f001 fce9 	bl	8005550 <vPortFree>
 8003b7e:	e001      	b.n	8003b84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d017      	beq.n	8003bba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b92:	88fa      	ldrh	r2, [r7, #6]
 8003b94:	2300      	movs	r3, #0
 8003b96:	9303      	str	r3, [sp, #12]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	9302      	str	r3, [sp, #8]
 8003b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68b9      	ldr	r1, [r7, #8]
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f80f 	bl	8003bcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bae:	69f8      	ldr	r0, [r7, #28]
 8003bb0:	f000 f8b2 	bl	8003d18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	61bb      	str	r3, [r7, #24]
 8003bb8:	e002      	b.n	8003bc0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003bba:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003bc0:	69bb      	ldr	r3, [r7, #24]
	}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3720      	adds	r7, #32
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bdc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	461a      	mov	r2, r3
 8003be4:	21a5      	movs	r1, #165	; 0xa5
 8003be6:	f001 fdfe 	bl	80057e6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	f023 0307 	bic.w	r3, r3, #7
 8003c02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <prvInitialiseNewTask+0x56>
 8003c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c12:	f383 8811 	msr	BASEPRI, r3
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	f3bf 8f4f 	dsb	sy
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e7fe      	b.n	8003c20 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01f      	beq.n	8003c68 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61fb      	str	r3, [r7, #28]
 8003c2c:	e012      	b.n	8003c54 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c2e:	68ba      	ldr	r2, [r7, #8]
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	4413      	add	r3, r2
 8003c34:	7819      	ldrb	r1, [r3, #0]
 8003c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	3334      	adds	r3, #52	; 0x34
 8003c3e:	460a      	mov	r2, r1
 8003c40:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	4413      	add	r3, r2
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d006      	beq.n	8003c5c <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	3301      	adds	r3, #1
 8003c52:	61fb      	str	r3, [r7, #28]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	2b0f      	cmp	r3, #15
 8003c58:	d9e9      	bls.n	8003c2e <prvInitialiseNewTask+0x62>
 8003c5a:	e000      	b.n	8003c5e <prvInitialiseNewTask+0x92>
			{
				break;
 8003c5c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c66:	e003      	b.n	8003c70 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c72:	2b37      	cmp	r3, #55	; 0x37
 8003c74:	d901      	bls.n	8003c7a <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c76:	2337      	movs	r3, #55	; 0x37
 8003c78:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c84:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	2200      	movs	r2, #0
 8003c8a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8e:	3304      	adds	r3, #4
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff f98f 	bl	8002fb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	3318      	adds	r3, #24
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7ff f98a 	bl	8002fb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc8:	3354      	adds	r3, #84	; 0x54
 8003cca:	2260      	movs	r2, #96	; 0x60
 8003ccc:	2100      	movs	r1, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f001 fd89 	bl	80057e6 <memset>
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd6:	4a0d      	ldr	r2, [pc, #52]	; (8003d0c <prvInitialiseNewTask+0x140>)
 8003cd8:	659a      	str	r2, [r3, #88]	; 0x58
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	4a0c      	ldr	r2, [pc, #48]	; (8003d10 <prvInitialiseNewTask+0x144>)
 8003cde:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce2:	4a0c      	ldr	r2, [pc, #48]	; (8003d14 <prvInitialiseNewTask+0x148>)
 8003ce4:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	68f9      	ldr	r1, [r7, #12]
 8003cea:	69b8      	ldr	r0, [r7, #24]
 8003cec:	f001 f92a 	bl	8004f44 <pxPortInitialiseStack>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <prvInitialiseNewTask+0x136>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d02:	bf00      	nop
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	08005a04 	.word	0x08005a04
 8003d10:	08005a24 	.word	0x08005a24
 8003d14:	080059e4 	.word	0x080059e4

08003d18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d20:	f001 fa34 	bl	800518c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d24:	4b2d      	ldr	r3, [pc, #180]	; (8003ddc <prvAddNewTaskToReadyList+0xc4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	4a2c      	ldr	r2, [pc, #176]	; (8003ddc <prvAddNewTaskToReadyList+0xc4>)
 8003d2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d2e:	4b2c      	ldr	r3, [pc, #176]	; (8003de0 <prvAddNewTaskToReadyList+0xc8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d36:	4a2a      	ldr	r2, [pc, #168]	; (8003de0 <prvAddNewTaskToReadyList+0xc8>)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d3c:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <prvAddNewTaskToReadyList+0xc4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d110      	bne.n	8003d66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d44:	f000 fc1a 	bl	800457c <prvInitialiseTaskLists>
 8003d48:	e00d      	b.n	8003d66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d4a:	4b26      	ldr	r3, [pc, #152]	; (8003de4 <prvAddNewTaskToReadyList+0xcc>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d109      	bne.n	8003d66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d52:	4b23      	ldr	r3, [pc, #140]	; (8003de0 <prvAddNewTaskToReadyList+0xc8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d802      	bhi.n	8003d66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d60:	4a1f      	ldr	r2, [pc, #124]	; (8003de0 <prvAddNewTaskToReadyList+0xc8>)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d66:	4b20      	ldr	r3, [pc, #128]	; (8003de8 <prvAddNewTaskToReadyList+0xd0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	4a1e      	ldr	r2, [pc, #120]	; (8003de8 <prvAddNewTaskToReadyList+0xd0>)
 8003d6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d70:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <prvAddNewTaskToReadyList+0xd0>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <prvAddNewTaskToReadyList+0xd4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d903      	bls.n	8003d8c <prvAddNewTaskToReadyList+0x74>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	4a18      	ldr	r2, [pc, #96]	; (8003dec <prvAddNewTaskToReadyList+0xd4>)
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d90:	4613      	mov	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4a15      	ldr	r2, [pc, #84]	; (8003df0 <prvAddNewTaskToReadyList+0xd8>)
 8003d9a:	441a      	add	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	4619      	mov	r1, r3
 8003da2:	4610      	mov	r0, r2
 8003da4:	f7ff f913 	bl	8002fce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003da8:	f001 fa1e 	bl	80051e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003dac:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <prvAddNewTaskToReadyList+0xcc>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00e      	beq.n	8003dd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003db4:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <prvAddNewTaskToReadyList+0xc8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d207      	bcs.n	8003dd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	; (8003df4 <prvAddNewTaskToReadyList+0xdc>)
 8003dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000ce4 	.word	0x20000ce4
 8003de0:	20000810 	.word	0x20000810
 8003de4:	20000cf0 	.word	0x20000cf0
 8003de8:	20000d00 	.word	0x20000d00
 8003dec:	20000cec 	.word	0x20000cec
 8003df0:	20000814 	.word	0x20000814
 8003df4:	e000ed04 	.word	0xe000ed04

08003df8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d016      	beq.n	8003e38 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e0a:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <vTaskDelay+0x60>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d009      	beq.n	8003e26 <vTaskDelay+0x2e>
 8003e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	e7fe      	b.n	8003e24 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003e26:	f000 f889 	bl	8003f3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fcef 	bl	8004810 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e32:	f000 f891 	bl	8003f58 <xTaskResumeAll>
 8003e36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d107      	bne.n	8003e4e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003e3e:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <vTaskDelay+0x64>)
 8003e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000d0c 	.word	0x20000d0c
 8003e5c:	e000ed04 	.word	0xe000ed04

08003e60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	; 0x28
 8003e64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e6e:	463a      	mov	r2, r7
 8003e70:	1d39      	adds	r1, r7, #4
 8003e72:	f107 0308 	add.w	r3, r7, #8
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff f848 	bl	8002f0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e7c:	6839      	ldr	r1, [r7, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	9202      	str	r2, [sp, #8]
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	2300      	movs	r3, #0
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	460a      	mov	r2, r1
 8003e8e:	4923      	ldr	r1, [pc, #140]	; (8003f1c <vTaskStartScheduler+0xbc>)
 8003e90:	4823      	ldr	r0, [pc, #140]	; (8003f20 <vTaskStartScheduler+0xc0>)
 8003e92:	f7ff fdfb 	bl	8003a8c <xTaskCreateStatic>
 8003e96:	4602      	mov	r2, r0
 8003e98:	4b22      	ldr	r3, [pc, #136]	; (8003f24 <vTaskStartScheduler+0xc4>)
 8003e9a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e9c:	4b21      	ldr	r3, [pc, #132]	; (8003f24 <vTaskStartScheduler+0xc4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	e001      	b.n	8003eae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d102      	bne.n	8003eba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003eb4:	f000 fd00 	bl	80048b8 <xTimerCreateTimerTask>
 8003eb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d11a      	bne.n	8003ef6 <vTaskStartScheduler+0x96>
 8003ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	613b      	str	r3, [r7, #16]
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ed2:	4b15      	ldr	r3, [pc, #84]	; (8003f28 <vTaskStartScheduler+0xc8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	3354      	adds	r3, #84	; 0x54
 8003ed8:	4a14      	ldr	r2, [pc, #80]	; (8003f2c <vTaskStartScheduler+0xcc>)
 8003eda:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003edc:	4b14      	ldr	r3, [pc, #80]	; (8003f30 <vTaskStartScheduler+0xd0>)
 8003ede:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ee4:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <vTaskStartScheduler+0xd4>)
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003eea:	4b13      	ldr	r3, [pc, #76]	; (8003f38 <vTaskStartScheduler+0xd8>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ef0:	f001 f8ae 	bl	8005050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ef4:	e00d      	b.n	8003f12 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d109      	bne.n	8003f12 <vTaskStartScheduler+0xb2>
 8003efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f02:	f383 8811 	msr	BASEPRI, r3
 8003f06:	f3bf 8f6f 	isb	sy
 8003f0a:	f3bf 8f4f 	dsb	sy
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	e7fe      	b.n	8003f10 <vTaskStartScheduler+0xb0>
}
 8003f12:	bf00      	nop
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	08005990 	.word	0x08005990
 8003f20:	0800454d 	.word	0x0800454d
 8003f24:	20000d08 	.word	0x20000d08
 8003f28:	20000810 	.word	0x20000810
 8003f2c:	20000010 	.word	0x20000010
 8003f30:	20000d04 	.word	0x20000d04
 8003f34:	20000cf0 	.word	0x20000cf0
 8003f38:	20000ce8 	.word	0x20000ce8

08003f3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <vTaskSuspendAll+0x18>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3301      	adds	r3, #1
 8003f46:	4a03      	ldr	r2, [pc, #12]	; (8003f54 <vTaskSuspendAll+0x18>)
 8003f48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003f4a:	bf00      	nop
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	20000d0c 	.word	0x20000d0c

08003f58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f66:	4b41      	ldr	r3, [pc, #260]	; (800406c <xTaskResumeAll+0x114>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <xTaskResumeAll+0x2a>
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	e7fe      	b.n	8003f80 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f82:	f001 f903 	bl	800518c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f86:	4b39      	ldr	r3, [pc, #228]	; (800406c <xTaskResumeAll+0x114>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	4a37      	ldr	r2, [pc, #220]	; (800406c <xTaskResumeAll+0x114>)
 8003f8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f90:	4b36      	ldr	r3, [pc, #216]	; (800406c <xTaskResumeAll+0x114>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d162      	bne.n	800405e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f98:	4b35      	ldr	r3, [pc, #212]	; (8004070 <xTaskResumeAll+0x118>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d05e      	beq.n	800405e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fa0:	e02f      	b.n	8004002 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fa2:	4b34      	ldr	r3, [pc, #208]	; (8004074 <xTaskResumeAll+0x11c>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3318      	adds	r3, #24
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff f86a 	bl	8003088 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff f865 	bl	8003088 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc2:	4b2d      	ldr	r3, [pc, #180]	; (8004078 <xTaskResumeAll+0x120>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d903      	bls.n	8003fd2 <xTaskResumeAll+0x7a>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	4a2a      	ldr	r2, [pc, #168]	; (8004078 <xTaskResumeAll+0x120>)
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4a27      	ldr	r2, [pc, #156]	; (800407c <xTaskResumeAll+0x124>)
 8003fe0:	441a      	add	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4610      	mov	r0, r2
 8003fea:	f7fe fff0 	bl	8002fce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff2:	4b23      	ldr	r3, [pc, #140]	; (8004080 <xTaskResumeAll+0x128>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d302      	bcc.n	8004002 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003ffc:	4b21      	ldr	r3, [pc, #132]	; (8004084 <xTaskResumeAll+0x12c>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004002:	4b1c      	ldr	r3, [pc, #112]	; (8004074 <xTaskResumeAll+0x11c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1cb      	bne.n	8003fa2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004010:	f000 fb54 	bl	80046bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004014:	4b1c      	ldr	r3, [pc, #112]	; (8004088 <xTaskResumeAll+0x130>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d010      	beq.n	8004042 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004020:	f000 f846 	bl	80040b0 <xTaskIncrementTick>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800402a:	4b16      	ldr	r3, [pc, #88]	; (8004084 <xTaskResumeAll+0x12c>)
 800402c:	2201      	movs	r2, #1
 800402e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3b01      	subs	r3, #1
 8004034:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1f1      	bne.n	8004020 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800403c:	4b12      	ldr	r3, [pc, #72]	; (8004088 <xTaskResumeAll+0x130>)
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004042:	4b10      	ldr	r3, [pc, #64]	; (8004084 <xTaskResumeAll+0x12c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d009      	beq.n	800405e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800404a:	2301      	movs	r3, #1
 800404c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800404e:	4b0f      	ldr	r3, [pc, #60]	; (800408c <xTaskResumeAll+0x134>)
 8004050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800405e:	f001 f8c3 	bl	80051e8 <vPortExitCritical>

	return xAlreadyYielded;
 8004062:	68bb      	ldr	r3, [r7, #8]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20000d0c 	.word	0x20000d0c
 8004070:	20000ce4 	.word	0x20000ce4
 8004074:	20000ca4 	.word	0x20000ca4
 8004078:	20000cec 	.word	0x20000cec
 800407c:	20000814 	.word	0x20000814
 8004080:	20000810 	.word	0x20000810
 8004084:	20000cf8 	.word	0x20000cf8
 8004088:	20000cf4 	.word	0x20000cf4
 800408c:	e000ed04 	.word	0xe000ed04

08004090 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004096:	4b05      	ldr	r3, [pc, #20]	; (80040ac <xTaskGetTickCount+0x1c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800409c:	687b      	ldr	r3, [r7, #4]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	370c      	adds	r7, #12
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	20000ce8 	.word	0x20000ce8

080040b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040ba:	4b4e      	ldr	r3, [pc, #312]	; (80041f4 <xTaskIncrementTick+0x144>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f040 808e 	bne.w	80041e0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040c4:	4b4c      	ldr	r3, [pc, #304]	; (80041f8 <xTaskIncrementTick+0x148>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3301      	adds	r3, #1
 80040ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040cc:	4a4a      	ldr	r2, [pc, #296]	; (80041f8 <xTaskIncrementTick+0x148>)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d11f      	bne.n	8004118 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80040d8:	4b48      	ldr	r3, [pc, #288]	; (80041fc <xTaskIncrementTick+0x14c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d009      	beq.n	80040f6 <xTaskIncrementTick+0x46>
 80040e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	e7fe      	b.n	80040f4 <xTaskIncrementTick+0x44>
 80040f6:	4b41      	ldr	r3, [pc, #260]	; (80041fc <xTaskIncrementTick+0x14c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	4b40      	ldr	r3, [pc, #256]	; (8004200 <xTaskIncrementTick+0x150>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a3e      	ldr	r2, [pc, #248]	; (80041fc <xTaskIncrementTick+0x14c>)
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	4a3e      	ldr	r2, [pc, #248]	; (8004200 <xTaskIncrementTick+0x150>)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b3e      	ldr	r3, [pc, #248]	; (8004204 <xTaskIncrementTick+0x154>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3301      	adds	r3, #1
 8004110:	4a3c      	ldr	r2, [pc, #240]	; (8004204 <xTaskIncrementTick+0x154>)
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	f000 fad2 	bl	80046bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004118:	4b3b      	ldr	r3, [pc, #236]	; (8004208 <xTaskIncrementTick+0x158>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	429a      	cmp	r2, r3
 8004120:	d349      	bcc.n	80041b6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004122:	4b36      	ldr	r3, [pc, #216]	; (80041fc <xTaskIncrementTick+0x14c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d104      	bne.n	8004136 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800412c:	4b36      	ldr	r3, [pc, #216]	; (8004208 <xTaskIncrementTick+0x158>)
 800412e:	f04f 32ff 	mov.w	r2, #4294967295
 8004132:	601a      	str	r2, [r3, #0]
					break;
 8004134:	e03f      	b.n	80041b6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004136:	4b31      	ldr	r3, [pc, #196]	; (80041fc <xTaskIncrementTick+0x14c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	429a      	cmp	r2, r3
 800414c:	d203      	bcs.n	8004156 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800414e:	4a2e      	ldr	r2, [pc, #184]	; (8004208 <xTaskIncrementTick+0x158>)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004154:	e02f      	b.n	80041b6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	3304      	adds	r3, #4
 800415a:	4618      	mov	r0, r3
 800415c:	f7fe ff94 	bl	8003088 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004164:	2b00      	cmp	r3, #0
 8004166:	d004      	beq.n	8004172 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	3318      	adds	r3, #24
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe ff8b 	bl	8003088 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004176:	4b25      	ldr	r3, [pc, #148]	; (800420c <xTaskIncrementTick+0x15c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d903      	bls.n	8004186 <xTaskIncrementTick+0xd6>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	4a22      	ldr	r2, [pc, #136]	; (800420c <xTaskIncrementTick+0x15c>)
 8004184:	6013      	str	r3, [r2, #0]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4a1f      	ldr	r2, [pc, #124]	; (8004210 <xTaskIncrementTick+0x160>)
 8004194:	441a      	add	r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	3304      	adds	r3, #4
 800419a:	4619      	mov	r1, r3
 800419c:	4610      	mov	r0, r2
 800419e:	f7fe ff16 	bl	8002fce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a6:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <xTaskIncrementTick+0x164>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d3b8      	bcc.n	8004122 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80041b0:	2301      	movs	r3, #1
 80041b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041b4:	e7b5      	b.n	8004122 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041b6:	4b17      	ldr	r3, [pc, #92]	; (8004214 <xTaskIncrementTick+0x164>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041bc:	4914      	ldr	r1, [pc, #80]	; (8004210 <xTaskIncrementTick+0x160>)
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d901      	bls.n	80041d2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80041ce:	2301      	movs	r3, #1
 80041d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80041d2:	4b11      	ldr	r3, [pc, #68]	; (8004218 <xTaskIncrementTick+0x168>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d007      	beq.n	80041ea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80041da:	2301      	movs	r3, #1
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	e004      	b.n	80041ea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80041e0:	4b0e      	ldr	r3, [pc, #56]	; (800421c <xTaskIncrementTick+0x16c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3301      	adds	r3, #1
 80041e6:	4a0d      	ldr	r2, [pc, #52]	; (800421c <xTaskIncrementTick+0x16c>)
 80041e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80041ea:	697b      	ldr	r3, [r7, #20]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000d0c 	.word	0x20000d0c
 80041f8:	20000ce8 	.word	0x20000ce8
 80041fc:	20000c9c 	.word	0x20000c9c
 8004200:	20000ca0 	.word	0x20000ca0
 8004204:	20000cfc 	.word	0x20000cfc
 8004208:	20000d04 	.word	0x20000d04
 800420c:	20000cec 	.word	0x20000cec
 8004210:	20000814 	.word	0x20000814
 8004214:	20000810 	.word	0x20000810
 8004218:	20000cf8 	.word	0x20000cf8
 800421c:	20000cf4 	.word	0x20000cf4

08004220 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004226:	4b2a      	ldr	r3, [pc, #168]	; (80042d0 <vTaskSwitchContext+0xb0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800422e:	4b29      	ldr	r3, [pc, #164]	; (80042d4 <vTaskSwitchContext+0xb4>)
 8004230:	2201      	movs	r2, #1
 8004232:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004234:	e045      	b.n	80042c2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004236:	4b27      	ldr	r3, [pc, #156]	; (80042d4 <vTaskSwitchContext+0xb4>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800423c:	4b26      	ldr	r3, [pc, #152]	; (80042d8 <vTaskSwitchContext+0xb8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	e00f      	b.n	8004264 <vTaskSwitchContext+0x44>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <vTaskSwitchContext+0x3e>
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	607b      	str	r3, [r7, #4]
 800425c:	e7fe      	b.n	800425c <vTaskSwitchContext+0x3c>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3b01      	subs	r3, #1
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	491d      	ldr	r1, [pc, #116]	; (80042dc <vTaskSwitchContext+0xbc>)
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0e5      	beq.n	8004244 <vTaskSwitchContext+0x24>
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4613      	mov	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	4a16      	ldr	r2, [pc, #88]	; (80042dc <vTaskSwitchContext+0xbc>)
 8004284:	4413      	add	r3, r2
 8004286:	60bb      	str	r3, [r7, #8]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	605a      	str	r2, [r3, #4]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	3308      	adds	r3, #8
 800429a:	429a      	cmp	r2, r3
 800429c:	d104      	bne.n	80042a8 <vTaskSwitchContext+0x88>
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	605a      	str	r2, [r3, #4]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	4a0c      	ldr	r2, [pc, #48]	; (80042e0 <vTaskSwitchContext+0xc0>)
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	4a09      	ldr	r2, [pc, #36]	; (80042d8 <vTaskSwitchContext+0xb8>)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80042b8:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <vTaskSwitchContext+0xc0>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3354      	adds	r3, #84	; 0x54
 80042be:	4a09      	ldr	r2, [pc, #36]	; (80042e4 <vTaskSwitchContext+0xc4>)
 80042c0:	6013      	str	r3, [r2, #0]
}
 80042c2:	bf00      	nop
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	20000d0c 	.word	0x20000d0c
 80042d4:	20000cf8 	.word	0x20000cf8
 80042d8:	20000cec 	.word	0x20000cec
 80042dc:	20000814 	.word	0x20000814
 80042e0:	20000810 	.word	0x20000810
 80042e4:	20000010 	.word	0x20000010

080042e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d109      	bne.n	800430c <vTaskPlaceOnEventList+0x24>
 80042f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fc:	f383 8811 	msr	BASEPRI, r3
 8004300:	f3bf 8f6f 	isb	sy
 8004304:	f3bf 8f4f 	dsb	sy
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	e7fe      	b.n	800430a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800430c:	4b07      	ldr	r3, [pc, #28]	; (800432c <vTaskPlaceOnEventList+0x44>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3318      	adds	r3, #24
 8004312:	4619      	mov	r1, r3
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f7fe fe7e 	bl	8003016 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800431a:	2101      	movs	r1, #1
 800431c:	6838      	ldr	r0, [r7, #0]
 800431e:	f000 fa77 	bl	8004810 <prvAddCurrentTaskToDelayedList>
}
 8004322:	bf00      	nop
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000810 	.word	0x20000810

08004330 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <vTaskPlaceOnEventListRestricted+0x26>
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	e7fe      	b.n	8004354 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004356:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <vTaskPlaceOnEventListRestricted+0x50>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3318      	adds	r3, #24
 800435c:	4619      	mov	r1, r3
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f7fe fe35 	bl	8002fce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800436a:	f04f 33ff 	mov.w	r3, #4294967295
 800436e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	68b8      	ldr	r0, [r7, #8]
 8004374:	f000 fa4c 	bl	8004810 <prvAddCurrentTaskToDelayedList>
	}
 8004378:	bf00      	nop
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	20000810 	.word	0x20000810

08004384 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <xTaskRemoveFromEventList+0x2a>
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	e7fe      	b.n	80043ac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	3318      	adds	r3, #24
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fe fe68 	bl	8003088 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043b8:	4b1d      	ldr	r3, [pc, #116]	; (8004430 <xTaskRemoveFromEventList+0xac>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d11d      	bne.n	80043fc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fe fe5f 	bl	8003088 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ce:	4b19      	ldr	r3, [pc, #100]	; (8004434 <xTaskRemoveFromEventList+0xb0>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d903      	bls.n	80043de <xTaskRemoveFromEventList+0x5a>
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043da:	4a16      	ldr	r2, [pc, #88]	; (8004434 <xTaskRemoveFromEventList+0xb0>)
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4a13      	ldr	r2, [pc, #76]	; (8004438 <xTaskRemoveFromEventList+0xb4>)
 80043ec:	441a      	add	r2, r3
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	3304      	adds	r3, #4
 80043f2:	4619      	mov	r1, r3
 80043f4:	4610      	mov	r0, r2
 80043f6:	f7fe fdea 	bl	8002fce <vListInsertEnd>
 80043fa:	e005      	b.n	8004408 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	3318      	adds	r3, #24
 8004400:	4619      	mov	r1, r3
 8004402:	480e      	ldr	r0, [pc, #56]	; (800443c <xTaskRemoveFromEventList+0xb8>)
 8004404:	f7fe fde3 	bl	8002fce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440c:	4b0c      	ldr	r3, [pc, #48]	; (8004440 <xTaskRemoveFromEventList+0xbc>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004412:	429a      	cmp	r2, r3
 8004414:	d905      	bls.n	8004422 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004416:	2301      	movs	r3, #1
 8004418:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800441a:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <xTaskRemoveFromEventList+0xc0>)
 800441c:	2201      	movs	r2, #1
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	e001      	b.n	8004426 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004426:	697b      	ldr	r3, [r7, #20]
}
 8004428:	4618      	mov	r0, r3
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	20000d0c 	.word	0x20000d0c
 8004434:	20000cec 	.word	0x20000cec
 8004438:	20000814 	.word	0x20000814
 800443c:	20000ca4 	.word	0x20000ca4
 8004440:	20000810 	.word	0x20000810
 8004444:	20000cf8 	.word	0x20000cf8

08004448 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <vTaskInternalSetTimeOutState+0x24>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <vTaskInternalSetTimeOutState+0x28>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	605a      	str	r2, [r3, #4]
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	20000cfc 	.word	0x20000cfc
 8004470:	20000ce8 	.word	0x20000ce8

08004474 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d109      	bne.n	8004498 <xTaskCheckForTimeOut+0x24>
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	e7fe      	b.n	8004496 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <xTaskCheckForTimeOut+0x3e>
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	e7fe      	b.n	80044b0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80044b2:	f000 fe6b 	bl	800518c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80044b6:	4b1d      	ldr	r3, [pc, #116]	; (800452c <xTaskCheckForTimeOut+0xb8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ce:	d102      	bne.n	80044d6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80044d0:	2300      	movs	r3, #0
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	e023      	b.n	800451e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	4b15      	ldr	r3, [pc, #84]	; (8004530 <xTaskCheckForTimeOut+0xbc>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d007      	beq.n	80044f2 <xTaskCheckForTimeOut+0x7e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d302      	bcc.n	80044f2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80044ec:	2301      	movs	r3, #1
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	e015      	b.n	800451e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d20b      	bcs.n	8004514 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	1ad2      	subs	r2, r2, r3
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f7ff ff9d 	bl	8004448 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800450e:	2300      	movs	r3, #0
 8004510:	61fb      	str	r3, [r7, #28]
 8004512:	e004      	b.n	800451e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800451a:	2301      	movs	r3, #1
 800451c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800451e:	f000 fe63 	bl	80051e8 <vPortExitCritical>

	return xReturn;
 8004522:	69fb      	ldr	r3, [r7, #28]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3720      	adds	r7, #32
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000ce8 	.word	0x20000ce8
 8004530:	20000cfc 	.word	0x20000cfc

08004534 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004538:	4b03      	ldr	r3, [pc, #12]	; (8004548 <vTaskMissedYield+0x14>)
 800453a:	2201      	movs	r2, #1
 800453c:	601a      	str	r2, [r3, #0]
}
 800453e:	bf00      	nop
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	20000cf8 	.word	0x20000cf8

0800454c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004554:	f000 f852 	bl	80045fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004558:	4b06      	ldr	r3, [pc, #24]	; (8004574 <prvIdleTask+0x28>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d9f9      	bls.n	8004554 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <prvIdleTask+0x2c>)
 8004562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004570:	e7f0      	b.n	8004554 <prvIdleTask+0x8>
 8004572:	bf00      	nop
 8004574:	20000814 	.word	0x20000814
 8004578:	e000ed04 	.word	0xe000ed04

0800457c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004582:	2300      	movs	r3, #0
 8004584:	607b      	str	r3, [r7, #4]
 8004586:	e00c      	b.n	80045a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	4613      	mov	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4a12      	ldr	r2, [pc, #72]	; (80045dc <prvInitialiseTaskLists+0x60>)
 8004594:	4413      	add	r3, r2
 8004596:	4618      	mov	r0, r3
 8004598:	f7fe fcec 	bl	8002f74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3301      	adds	r3, #1
 80045a0:	607b      	str	r3, [r7, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b37      	cmp	r3, #55	; 0x37
 80045a6:	d9ef      	bls.n	8004588 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045a8:	480d      	ldr	r0, [pc, #52]	; (80045e0 <prvInitialiseTaskLists+0x64>)
 80045aa:	f7fe fce3 	bl	8002f74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045ae:	480d      	ldr	r0, [pc, #52]	; (80045e4 <prvInitialiseTaskLists+0x68>)
 80045b0:	f7fe fce0 	bl	8002f74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80045b4:	480c      	ldr	r0, [pc, #48]	; (80045e8 <prvInitialiseTaskLists+0x6c>)
 80045b6:	f7fe fcdd 	bl	8002f74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80045ba:	480c      	ldr	r0, [pc, #48]	; (80045ec <prvInitialiseTaskLists+0x70>)
 80045bc:	f7fe fcda 	bl	8002f74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80045c0:	480b      	ldr	r0, [pc, #44]	; (80045f0 <prvInitialiseTaskLists+0x74>)
 80045c2:	f7fe fcd7 	bl	8002f74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80045c6:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <prvInitialiseTaskLists+0x78>)
 80045c8:	4a05      	ldr	r2, [pc, #20]	; (80045e0 <prvInitialiseTaskLists+0x64>)
 80045ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80045cc:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <prvInitialiseTaskLists+0x7c>)
 80045ce:	4a05      	ldr	r2, [pc, #20]	; (80045e4 <prvInitialiseTaskLists+0x68>)
 80045d0:	601a      	str	r2, [r3, #0]
}
 80045d2:	bf00      	nop
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000814 	.word	0x20000814
 80045e0:	20000c74 	.word	0x20000c74
 80045e4:	20000c88 	.word	0x20000c88
 80045e8:	20000ca4 	.word	0x20000ca4
 80045ec:	20000cb8 	.word	0x20000cb8
 80045f0:	20000cd0 	.word	0x20000cd0
 80045f4:	20000c9c 	.word	0x20000c9c
 80045f8:	20000ca0 	.word	0x20000ca0

080045fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004602:	e019      	b.n	8004638 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004604:	f000 fdc2 	bl	800518c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004608:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <prvCheckTasksWaitingTermination+0x4c>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3304      	adds	r3, #4
 8004614:	4618      	mov	r0, r3
 8004616:	f7fe fd37 	bl	8003088 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800461a:	4b0c      	ldr	r3, [pc, #48]	; (800464c <prvCheckTasksWaitingTermination+0x50>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3b01      	subs	r3, #1
 8004620:	4a0a      	ldr	r2, [pc, #40]	; (800464c <prvCheckTasksWaitingTermination+0x50>)
 8004622:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004624:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <prvCheckTasksWaitingTermination+0x54>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3b01      	subs	r3, #1
 800462a:	4a09      	ldr	r2, [pc, #36]	; (8004650 <prvCheckTasksWaitingTermination+0x54>)
 800462c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800462e:	f000 fddb 	bl	80051e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f80e 	bl	8004654 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004638:	4b05      	ldr	r3, [pc, #20]	; (8004650 <prvCheckTasksWaitingTermination+0x54>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e1      	bne.n	8004604 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004640:	bf00      	nop
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	20000cb8 	.word	0x20000cb8
 800464c:	20000ce4 	.word	0x20000ce4
 8004650:	20000ccc 	.word	0x20000ccc

08004654 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3354      	adds	r3, #84	; 0x54
 8004660:	4618      	mov	r0, r3
 8004662:	f001 f8d5 	bl	8005810 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800466c:	2b00      	cmp	r3, #0
 800466e:	d108      	bne.n	8004682 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004674:	4618      	mov	r0, r3
 8004676:	f000 ff6b 	bl	8005550 <vPortFree>
				vPortFree( pxTCB );
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 ff68 	bl	8005550 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004680:	e017      	b.n	80046b2 <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004688:	2b01      	cmp	r3, #1
 800468a:	d103      	bne.n	8004694 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 ff5f 	bl	8005550 <vPortFree>
	}
 8004692:	e00e      	b.n	80046b2 <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800469a:	2b02      	cmp	r3, #2
 800469c:	d009      	beq.n	80046b2 <prvDeleteTCB+0x5e>
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	e7fe      	b.n	80046b0 <prvDeleteTCB+0x5c>
	}
 80046b2:	bf00      	nop
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046c2:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <prvResetNextTaskUnblockTime+0x38>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d104      	bne.n	80046d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80046cc:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <prvResetNextTaskUnblockTime+0x3c>)
 80046ce:	f04f 32ff 	mov.w	r2, #4294967295
 80046d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046d4:	e008      	b.n	80046e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046d6:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <prvResetNextTaskUnblockTime+0x38>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	4a04      	ldr	r2, [pc, #16]	; (80046f8 <prvResetNextTaskUnblockTime+0x3c>)
 80046e6:	6013      	str	r3, [r2, #0]
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	20000c9c 	.word	0x20000c9c
 80046f8:	20000d04 	.word	0x20000d04

080046fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004702:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <xTaskGetSchedulerState+0x34>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d102      	bne.n	8004710 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800470a:	2301      	movs	r3, #1
 800470c:	607b      	str	r3, [r7, #4]
 800470e:	e008      	b.n	8004722 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004710:	4b08      	ldr	r3, [pc, #32]	; (8004734 <xTaskGetSchedulerState+0x38>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d102      	bne.n	800471e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004718:	2302      	movs	r3, #2
 800471a:	607b      	str	r3, [r7, #4]
 800471c:	e001      	b.n	8004722 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800471e:	2300      	movs	r3, #0
 8004720:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004722:	687b      	ldr	r3, [r7, #4]
	}
 8004724:	4618      	mov	r0, r3
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	20000cf0 	.word	0x20000cf0
 8004734:	20000d0c 	.word	0x20000d0c

08004738 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d054      	beq.n	80047f8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800474e:	4b2d      	ldr	r3, [pc, #180]	; (8004804 <xTaskPriorityDisinherit+0xcc>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	429a      	cmp	r2, r3
 8004756:	d009      	beq.n	800476c <xTaskPriorityDisinherit+0x34>
 8004758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	e7fe      	b.n	800476a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004770:	2b00      	cmp	r3, #0
 8004772:	d109      	bne.n	8004788 <xTaskPriorityDisinherit+0x50>
 8004774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004778:	f383 8811 	msr	BASEPRI, r3
 800477c:	f3bf 8f6f 	isb	sy
 8004780:	f3bf 8f4f 	dsb	sy
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	e7fe      	b.n	8004786 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800478c:	1e5a      	subs	r2, r3, #1
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800479a:	429a      	cmp	r2, r3
 800479c:	d02c      	beq.n	80047f8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d128      	bne.n	80047f8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	3304      	adds	r3, #4
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fe fc6c 	bl	8003088 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c8:	4b0f      	ldr	r3, [pc, #60]	; (8004808 <xTaskPriorityDisinherit+0xd0>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d903      	bls.n	80047d8 <xTaskPriorityDisinherit+0xa0>
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	4a0c      	ldr	r2, [pc, #48]	; (8004808 <xTaskPriorityDisinherit+0xd0>)
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4a09      	ldr	r2, [pc, #36]	; (800480c <xTaskPriorityDisinherit+0xd4>)
 80047e6:	441a      	add	r2, r3
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	3304      	adds	r3, #4
 80047ec:	4619      	mov	r1, r3
 80047ee:	4610      	mov	r0, r2
 80047f0:	f7fe fbed 	bl	8002fce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047f4:	2301      	movs	r3, #1
 80047f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047f8:	697b      	ldr	r3, [r7, #20]
	}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000810 	.word	0x20000810
 8004808:	20000cec 	.word	0x20000cec
 800480c:	20000814 	.word	0x20000814

08004810 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800481a:	4b21      	ldr	r3, [pc, #132]	; (80048a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004820:	4b20      	ldr	r3, [pc, #128]	; (80048a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3304      	adds	r3, #4
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe fc2e 	bl	8003088 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004832:	d10a      	bne.n	800484a <prvAddCurrentTaskToDelayedList+0x3a>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d007      	beq.n	800484a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800483a:	4b1a      	ldr	r3, [pc, #104]	; (80048a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3304      	adds	r3, #4
 8004840:	4619      	mov	r1, r3
 8004842:	4819      	ldr	r0, [pc, #100]	; (80048a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004844:	f7fe fbc3 	bl	8002fce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004848:	e026      	b.n	8004898 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4413      	add	r3, r2
 8004850:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004852:	4b14      	ldr	r3, [pc, #80]	; (80048a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	429a      	cmp	r2, r3
 8004860:	d209      	bcs.n	8004876 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004862:	4b12      	ldr	r3, [pc, #72]	; (80048ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4b0f      	ldr	r3, [pc, #60]	; (80048a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3304      	adds	r3, #4
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f7fe fbd1 	bl	8003016 <vListInsert>
}
 8004874:	e010      	b.n	8004898 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004876:	4b0e      	ldr	r3, [pc, #56]	; (80048b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	3304      	adds	r3, #4
 8004880:	4619      	mov	r1, r3
 8004882:	4610      	mov	r0, r2
 8004884:	f7fe fbc7 	bl	8003016 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	429a      	cmp	r2, r3
 8004890:	d202      	bcs.n	8004898 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004892:	4a08      	ldr	r2, [pc, #32]	; (80048b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	6013      	str	r3, [r2, #0]
}
 8004898:	bf00      	nop
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	20000ce8 	.word	0x20000ce8
 80048a4:	20000810 	.word	0x20000810
 80048a8:	20000cd0 	.word	0x20000cd0
 80048ac:	20000ca0 	.word	0x20000ca0
 80048b0:	20000c9c 	.word	0x20000c9c
 80048b4:	20000d04 	.word	0x20000d04

080048b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08a      	sub	sp, #40	; 0x28
 80048bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80048c2:	f000 faff 	bl	8004ec4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80048c6:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <xTimerCreateTimerTask+0x80>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d021      	beq.n	8004912 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80048d6:	1d3a      	adds	r2, r7, #4
 80048d8:	f107 0108 	add.w	r1, r7, #8
 80048dc:	f107 030c 	add.w	r3, r7, #12
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fe fb2d 	bl	8002f40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	9202      	str	r2, [sp, #8]
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	2302      	movs	r3, #2
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2300      	movs	r3, #0
 80048f6:	460a      	mov	r2, r1
 80048f8:	4910      	ldr	r1, [pc, #64]	; (800493c <xTimerCreateTimerTask+0x84>)
 80048fa:	4811      	ldr	r0, [pc, #68]	; (8004940 <xTimerCreateTimerTask+0x88>)
 80048fc:	f7ff f8c6 	bl	8003a8c <xTaskCreateStatic>
 8004900:	4602      	mov	r2, r0
 8004902:	4b10      	ldr	r3, [pc, #64]	; (8004944 <xTimerCreateTimerTask+0x8c>)
 8004904:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004906:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <xTimerCreateTimerTask+0x8c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800490e:	2301      	movs	r3, #1
 8004910:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d109      	bne.n	800492c <xTimerCreateTimerTask+0x74>
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	e7fe      	b.n	800492a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800492c:	697b      	ldr	r3, [r7, #20]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000d40 	.word	0x20000d40
 800493c:	08005998 	.word	0x08005998
 8004940:	08004a79 	.word	0x08004a79
 8004944:	20000d44 	.word	0x20000d44

08004948 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004956:	2300      	movs	r3, #0
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d109      	bne.n	8004974 <xTimerGenericCommand+0x2c>
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	623b      	str	r3, [r7, #32]
 8004972:	e7fe      	b.n	8004972 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004974:	4b19      	ldr	r3, [pc, #100]	; (80049dc <xTimerGenericCommand+0x94>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d02a      	beq.n	80049d2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b05      	cmp	r3, #5
 800498c:	dc18      	bgt.n	80049c0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800498e:	f7ff feb5 	bl	80046fc <xTaskGetSchedulerState>
 8004992:	4603      	mov	r3, r0
 8004994:	2b02      	cmp	r3, #2
 8004996:	d109      	bne.n	80049ac <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004998:	4b10      	ldr	r3, [pc, #64]	; (80049dc <xTimerGenericCommand+0x94>)
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	f107 0110 	add.w	r1, r7, #16
 80049a0:	2300      	movs	r3, #0
 80049a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049a4:	f7fe fc98 	bl	80032d8 <xQueueGenericSend>
 80049a8:	6278      	str	r0, [r7, #36]	; 0x24
 80049aa:	e012      	b.n	80049d2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <xTimerGenericCommand+0x94>)
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	f107 0110 	add.w	r1, r7, #16
 80049b4:	2300      	movs	r3, #0
 80049b6:	2200      	movs	r2, #0
 80049b8:	f7fe fc8e 	bl	80032d8 <xQueueGenericSend>
 80049bc:	6278      	str	r0, [r7, #36]	; 0x24
 80049be:	e008      	b.n	80049d2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80049c0:	4b06      	ldr	r3, [pc, #24]	; (80049dc <xTimerGenericCommand+0x94>)
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	f107 0110 	add.w	r1, r7, #16
 80049c8:	2300      	movs	r3, #0
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	f7fe fd7e 	bl	80034cc <xQueueGenericSendFromISR>
 80049d0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80049d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3728      	adds	r7, #40	; 0x28
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	20000d40 	.word	0x20000d40

080049e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ea:	4b22      	ldr	r3, [pc, #136]	; (8004a74 <prvProcessExpiredTimer+0x94>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	3304      	adds	r3, #4
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fe fb45 	bl	8003088 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d021      	beq.n	8004a50 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	699a      	ldr	r2, [r3, #24]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	18d1      	adds	r1, r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	6978      	ldr	r0, [r7, #20]
 8004a1a:	f000 f8d1 	bl	8004bc0 <prvInsertTimerInActiveList>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d01e      	beq.n	8004a62 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a24:	2300      	movs	r3, #0
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	2300      	movs	r3, #0
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	6978      	ldr	r0, [r7, #20]
 8004a30:	f7ff ff8a 	bl	8004948 <xTimerGenericCommand>
 8004a34:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d112      	bne.n	8004a62 <prvProcessExpiredTimer+0x82>
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	e7fe      	b.n	8004a4e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a56:	f023 0301 	bic.w	r3, r3, #1
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	6978      	ldr	r0, [r7, #20]
 8004a68:	4798      	blx	r3
}
 8004a6a:	bf00      	nop
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20000d38 	.word	0x20000d38

08004a78 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a80:	f107 0308 	add.w	r3, r7, #8
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 f857 	bl	8004b38 <prvGetNextExpireTime>
 8004a8a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	4619      	mov	r1, r3
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 f803 	bl	8004a9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a96:	f000 f8d5 	bl	8004c44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a9a:	e7f1      	b.n	8004a80 <prvTimerTask+0x8>

08004a9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004aa6:	f7ff fa49 	bl	8003f3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004aaa:	f107 0308 	add.w	r3, r7, #8
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 f866 	bl	8004b80 <prvSampleTimeNow>
 8004ab4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d130      	bne.n	8004b1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10a      	bne.n	8004ad8 <prvProcessTimerOrBlockTask+0x3c>
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d806      	bhi.n	8004ad8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004aca:	f7ff fa45 	bl	8003f58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ace:	68f9      	ldr	r1, [r7, #12]
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff ff85 	bl	80049e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ad6:	e024      	b.n	8004b22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d008      	beq.n	8004af0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ade:	4b13      	ldr	r3, [pc, #76]	; (8004b2c <prvProcessTimerOrBlockTask+0x90>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <prvProcessTimerOrBlockTask+0x50>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e000      	b.n	8004aee <prvProcessTimerOrBlockTask+0x52>
 8004aec:	2300      	movs	r3, #0
 8004aee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004af0:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <prvProcessTimerOrBlockTask+0x94>)
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	4619      	mov	r1, r3
 8004afe:	f7fe ff91 	bl	8003a24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004b02:	f7ff fa29 	bl	8003f58 <xTaskResumeAll>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004b0c:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <prvProcessTimerOrBlockTask+0x98>)
 8004b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	f3bf 8f6f 	isb	sy
}
 8004b1c:	e001      	b.n	8004b22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b1e:	f7ff fa1b 	bl	8003f58 <xTaskResumeAll>
}
 8004b22:	bf00      	nop
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	20000d3c 	.word	0x20000d3c
 8004b30:	20000d40 	.word	0x20000d40
 8004b34:	e000ed04 	.word	0xe000ed04

08004b38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b40:	4b0e      	ldr	r3, [pc, #56]	; (8004b7c <prvGetNextExpireTime+0x44>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <prvGetNextExpireTime+0x16>
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	e000      	b.n	8004b50 <prvGetNextExpireTime+0x18>
 8004b4e:	2200      	movs	r2, #0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d105      	bne.n	8004b68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b5c:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <prvGetNextExpireTime+0x44>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	e001      	b.n	8004b6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	20000d38 	.word	0x20000d38

08004b80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b88:	f7ff fa82 	bl	8004090 <xTaskGetTickCount>
 8004b8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b8e:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <prvSampleTimeNow+0x3c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d205      	bcs.n	8004ba4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b98:	f000 f930 	bl	8004dfc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	e002      	b.n	8004baa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004baa:	4a04      	ldr	r2, [pc, #16]	; (8004bbc <prvSampleTimeNow+0x3c>)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	20000d48 	.word	0x20000d48

08004bc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d812      	bhi.n	8004c0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	1ad2      	subs	r2, r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d302      	bcc.n	8004bfa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	e01b      	b.n	8004c32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004bfa:	4b10      	ldr	r3, [pc, #64]	; (8004c3c <prvInsertTimerInActiveList+0x7c>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	3304      	adds	r3, #4
 8004c02:	4619      	mov	r1, r3
 8004c04:	4610      	mov	r0, r2
 8004c06:	f7fe fa06 	bl	8003016 <vListInsert>
 8004c0a:	e012      	b.n	8004c32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d206      	bcs.n	8004c22 <prvInsertTimerInActiveList+0x62>
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d302      	bcc.n	8004c22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	e007      	b.n	8004c32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c22:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <prvInsertTimerInActiveList+0x80>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	f7fe f9f2 	bl	8003016 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c32:	697b      	ldr	r3, [r7, #20]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	20000d3c 	.word	0x20000d3c
 8004c40:	20000d38 	.word	0x20000d38

08004c44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08e      	sub	sp, #56	; 0x38
 8004c48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c4a:	e0c6      	b.n	8004dda <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	da17      	bge.n	8004c82 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c52:	1d3b      	adds	r3, r7, #4
 8004c54:	3304      	adds	r3, #4
 8004c56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <prvProcessReceivedCommands+0x2e>
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	61fb      	str	r3, [r7, #28]
 8004c70:	e7fe      	b.n	8004c70 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c78:	6850      	ldr	r0, [r2, #4]
 8004c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c7c:	6892      	ldr	r2, [r2, #8]
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f2c0 80a7 	blt.w	8004dd8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d004      	beq.n	8004ca0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	3304      	adds	r3, #4
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fe f9f4 	bl	8003088 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ca0:	463b      	mov	r3, r7
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7ff ff6c 	bl	8004b80 <prvSampleTimeNow>
 8004ca8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b09      	cmp	r3, #9
 8004cae:	f200 8094 	bhi.w	8004dda <prvProcessReceivedCommands+0x196>
 8004cb2:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <prvProcessReceivedCommands+0x74>)
 8004cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb8:	08004ce1 	.word	0x08004ce1
 8004cbc:	08004ce1 	.word	0x08004ce1
 8004cc0:	08004ce1 	.word	0x08004ce1
 8004cc4:	08004d53 	.word	0x08004d53
 8004cc8:	08004d67 	.word	0x08004d67
 8004ccc:	08004daf 	.word	0x08004daf
 8004cd0:	08004ce1 	.word	0x08004ce1
 8004cd4:	08004ce1 	.word	0x08004ce1
 8004cd8:	08004d53 	.word	0x08004d53
 8004cdc:	08004d67 	.word	0x08004d67
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	18d1      	adds	r1, r2, r3
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d00:	f7ff ff5e 	bl	8004bc0 <prvInsertTimerInActiveList>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d067      	beq.n	8004dda <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d05c      	beq.n	8004dda <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	441a      	add	r2, r3
 8004d28:	2300      	movs	r3, #0
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	2100      	movs	r1, #0
 8004d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d32:	f7ff fe09 	bl	8004948 <xTimerGenericCommand>
 8004d36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d14d      	bne.n	8004dda <prvProcessReceivedCommands+0x196>
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	61bb      	str	r3, [r7, #24]
 8004d50:	e7fe      	b.n	8004d50 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	b2da      	uxtb	r2, r3
 8004d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004d64:	e039      	b.n	8004dda <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d6c:	f043 0301 	orr.w	r3, r3, #1
 8004d70:	b2da      	uxtb	r2, r3
 8004d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d109      	bne.n	8004d9a <prvProcessReceivedCommands+0x156>
 8004d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8a:	f383 8811 	msr	BASEPRI, r3
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	e7fe      	b.n	8004d98 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da0:	18d1      	adds	r1, r2, r3
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004da8:	f7ff ff0a 	bl	8004bc0 <prvInsertTimerInActiveList>
					break;
 8004dac:	e015      	b.n	8004dda <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d103      	bne.n	8004dc4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dbe:	f000 fbc7 	bl	8005550 <vPortFree>
 8004dc2:	e00a      	b.n	8004dda <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dca:	f023 0301 	bic.w	r3, r3, #1
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004dd6:	e000      	b.n	8004dda <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004dd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004dda:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <prvProcessReceivedCommands+0x1b4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	1d39      	adds	r1, r7, #4
 8004de0:	2200      	movs	r2, #0
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fe fc0a 	bl	80035fc <xQueueReceive>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f47f af2e 	bne.w	8004c4c <prvProcessReceivedCommands+0x8>
	}
}
 8004df0:	bf00      	nop
 8004df2:	3730      	adds	r7, #48	; 0x30
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20000d40 	.word	0x20000d40

08004dfc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b088      	sub	sp, #32
 8004e00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e02:	e047      	b.n	8004e94 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e04:	4b2d      	ldr	r3, [pc, #180]	; (8004ebc <prvSwitchTimerLists+0xc0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e0e:	4b2b      	ldr	r3, [pc, #172]	; (8004ebc <prvSwitchTimerLists+0xc0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fe f933 	bl	8003088 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d02d      	beq.n	8004e94 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d90e      	bls.n	8004e68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e56:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <prvSwitchTimerLists+0xc0>)
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4610      	mov	r0, r2
 8004e62:	f7fe f8d8 	bl	8003016 <vListInsert>
 8004e66:	e015      	b.n	8004e94 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e68:	2300      	movs	r3, #0
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	2100      	movs	r1, #0
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f7ff fd68 	bl	8004948 <xTimerGenericCommand>
 8004e78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d109      	bne.n	8004e94 <prvSwitchTimerLists+0x98>
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	603b      	str	r3, [r7, #0]
 8004e92:	e7fe      	b.n	8004e92 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e94:	4b09      	ldr	r3, [pc, #36]	; (8004ebc <prvSwitchTimerLists+0xc0>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d1b2      	bne.n	8004e04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e9e:	4b07      	ldr	r3, [pc, #28]	; (8004ebc <prvSwitchTimerLists+0xc0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ea4:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <prvSwitchTimerLists+0xc4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a04      	ldr	r2, [pc, #16]	; (8004ebc <prvSwitchTimerLists+0xc0>)
 8004eaa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004eac:	4a04      	ldr	r2, [pc, #16]	; (8004ec0 <prvSwitchTimerLists+0xc4>)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	6013      	str	r3, [r2, #0]
}
 8004eb2:	bf00      	nop
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000d38 	.word	0x20000d38
 8004ec0:	20000d3c 	.word	0x20000d3c

08004ec4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004eca:	f000 f95f 	bl	800518c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ece:	4b15      	ldr	r3, [pc, #84]	; (8004f24 <prvCheckForValidListAndQueue+0x60>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d120      	bne.n	8004f18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ed6:	4814      	ldr	r0, [pc, #80]	; (8004f28 <prvCheckForValidListAndQueue+0x64>)
 8004ed8:	f7fe f84c 	bl	8002f74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004edc:	4813      	ldr	r0, [pc, #76]	; (8004f2c <prvCheckForValidListAndQueue+0x68>)
 8004ede:	f7fe f849 	bl	8002f74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ee2:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <prvCheckForValidListAndQueue+0x6c>)
 8004ee4:	4a10      	ldr	r2, [pc, #64]	; (8004f28 <prvCheckForValidListAndQueue+0x64>)
 8004ee6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ee8:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <prvCheckForValidListAndQueue+0x70>)
 8004eea:	4a10      	ldr	r2, [pc, #64]	; (8004f2c <prvCheckForValidListAndQueue+0x68>)
 8004eec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004eee:	2300      	movs	r3, #0
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	4b11      	ldr	r3, [pc, #68]	; (8004f38 <prvCheckForValidListAndQueue+0x74>)
 8004ef4:	4a11      	ldr	r2, [pc, #68]	; (8004f3c <prvCheckForValidListAndQueue+0x78>)
 8004ef6:	2110      	movs	r1, #16
 8004ef8:	200a      	movs	r0, #10
 8004efa:	f7fe f957 	bl	80031ac <xQueueGenericCreateStatic>
 8004efe:	4602      	mov	r2, r0
 8004f00:	4b08      	ldr	r3, [pc, #32]	; (8004f24 <prvCheckForValidListAndQueue+0x60>)
 8004f02:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f04:	4b07      	ldr	r3, [pc, #28]	; (8004f24 <prvCheckForValidListAndQueue+0x60>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <prvCheckForValidListAndQueue+0x60>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	490b      	ldr	r1, [pc, #44]	; (8004f40 <prvCheckForValidListAndQueue+0x7c>)
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe fd5e 	bl	80039d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f18:	f000 f966 	bl	80051e8 <vPortExitCritical>
}
 8004f1c:	bf00      	nop
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20000d40 	.word	0x20000d40
 8004f28:	20000d10 	.word	0x20000d10
 8004f2c:	20000d24 	.word	0x20000d24
 8004f30:	20000d38 	.word	0x20000d38
 8004f34:	20000d3c 	.word	0x20000d3c
 8004f38:	20000dec 	.word	0x20000dec
 8004f3c:	20000d4c 	.word	0x20000d4c
 8004f40:	080059a0 	.word	0x080059a0

08004f44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	3b04      	subs	r3, #4
 8004f54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3b04      	subs	r3, #4
 8004f62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f023 0201 	bic.w	r2, r3, #1
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3b04      	subs	r3, #4
 8004f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f74:	4a0c      	ldr	r2, [pc, #48]	; (8004fa8 <pxPortInitialiseStack+0x64>)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3b14      	subs	r3, #20
 8004f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3b04      	subs	r3, #4
 8004f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f06f 0202 	mvn.w	r2, #2
 8004f92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3b20      	subs	r3, #32
 8004f98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	08004fad 	.word	0x08004fad

08004fac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004fb6:	4b11      	ldr	r3, [pc, #68]	; (8004ffc <prvTaskExitError+0x50>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d009      	beq.n	8004fd4 <prvTaskExitError+0x28>
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	e7fe      	b.n	8004fd2 <prvTaskExitError+0x26>
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fe6:	bf00      	nop
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0fc      	beq.n	8004fe8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	2000000c 	.word	0x2000000c

08005000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005000:	4b07      	ldr	r3, [pc, #28]	; (8005020 <pxCurrentTCBConst2>)
 8005002:	6819      	ldr	r1, [r3, #0]
 8005004:	6808      	ldr	r0, [r1, #0]
 8005006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500a:	f380 8809 	msr	PSP, r0
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f04f 0000 	mov.w	r0, #0
 8005016:	f380 8811 	msr	BASEPRI, r0
 800501a:	4770      	bx	lr
 800501c:	f3af 8000 	nop.w

08005020 <pxCurrentTCBConst2>:
 8005020:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop

08005028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005028:	4808      	ldr	r0, [pc, #32]	; (800504c <prvPortStartFirstTask+0x24>)
 800502a:	6800      	ldr	r0, [r0, #0]
 800502c:	6800      	ldr	r0, [r0, #0]
 800502e:	f380 8808 	msr	MSP, r0
 8005032:	f04f 0000 	mov.w	r0, #0
 8005036:	f380 8814 	msr	CONTROL, r0
 800503a:	b662      	cpsie	i
 800503c:	b661      	cpsie	f
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	df00      	svc	0
 8005048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800504a:	bf00      	nop
 800504c:	e000ed08 	.word	0xe000ed08

08005050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005056:	4b44      	ldr	r3, [pc, #272]	; (8005168 <xPortStartScheduler+0x118>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a44      	ldr	r2, [pc, #272]	; (800516c <xPortStartScheduler+0x11c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d109      	bne.n	8005074 <xPortStartScheduler+0x24>
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	e7fe      	b.n	8005072 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005074:	4b3c      	ldr	r3, [pc, #240]	; (8005168 <xPortStartScheduler+0x118>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a3d      	ldr	r2, [pc, #244]	; (8005170 <xPortStartScheduler+0x120>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d109      	bne.n	8005092 <xPortStartScheduler+0x42>
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	e7fe      	b.n	8005090 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005092:	4b38      	ldr	r3, [pc, #224]	; (8005174 <xPortStartScheduler+0x124>)
 8005094:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	b2db      	uxtb	r3, r3
 800509c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	22ff      	movs	r2, #255	; 0xff
 80050a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050ac:	78fb      	ldrb	r3, [r7, #3]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	4b30      	ldr	r3, [pc, #192]	; (8005178 <xPortStartScheduler+0x128>)
 80050b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050ba:	4b30      	ldr	r3, [pc, #192]	; (800517c <xPortStartScheduler+0x12c>)
 80050bc:	2207      	movs	r2, #7
 80050be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050c0:	e009      	b.n	80050d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80050c2:	4b2e      	ldr	r3, [pc, #184]	; (800517c <xPortStartScheduler+0x12c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	4a2c      	ldr	r2, [pc, #176]	; (800517c <xPortStartScheduler+0x12c>)
 80050ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050d6:	78fb      	ldrb	r3, [r7, #3]
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050de:	2b80      	cmp	r3, #128	; 0x80
 80050e0:	d0ef      	beq.n	80050c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050e2:	4b26      	ldr	r3, [pc, #152]	; (800517c <xPortStartScheduler+0x12c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f1c3 0307 	rsb	r3, r3, #7
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d009      	beq.n	8005102 <xPortStartScheduler+0xb2>
 80050ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	60bb      	str	r3, [r7, #8]
 8005100:	e7fe      	b.n	8005100 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005102:	4b1e      	ldr	r3, [pc, #120]	; (800517c <xPortStartScheduler+0x12c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	021b      	lsls	r3, r3, #8
 8005108:	4a1c      	ldr	r2, [pc, #112]	; (800517c <xPortStartScheduler+0x12c>)
 800510a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800510c:	4b1b      	ldr	r3, [pc, #108]	; (800517c <xPortStartScheduler+0x12c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005114:	4a19      	ldr	r2, [pc, #100]	; (800517c <xPortStartScheduler+0x12c>)
 8005116:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	b2da      	uxtb	r2, r3
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005120:	4b17      	ldr	r3, [pc, #92]	; (8005180 <xPortStartScheduler+0x130>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a16      	ldr	r2, [pc, #88]	; (8005180 <xPortStartScheduler+0x130>)
 8005126:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800512a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800512c:	4b14      	ldr	r3, [pc, #80]	; (8005180 <xPortStartScheduler+0x130>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a13      	ldr	r2, [pc, #76]	; (8005180 <xPortStartScheduler+0x130>)
 8005132:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005136:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005138:	f000 f8d6 	bl	80052e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800513c:	4b11      	ldr	r3, [pc, #68]	; (8005184 <xPortStartScheduler+0x134>)
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005142:	f000 f8f5 	bl	8005330 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005146:	4b10      	ldr	r3, [pc, #64]	; (8005188 <xPortStartScheduler+0x138>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a0f      	ldr	r2, [pc, #60]	; (8005188 <xPortStartScheduler+0x138>)
 800514c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005150:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005152:	f7ff ff69 	bl	8005028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005156:	f7ff f863 	bl	8004220 <vTaskSwitchContext>
	prvTaskExitError();
 800515a:	f7ff ff27 	bl	8004fac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	e000ed00 	.word	0xe000ed00
 800516c:	410fc271 	.word	0x410fc271
 8005170:	410fc270 	.word	0x410fc270
 8005174:	e000e400 	.word	0xe000e400
 8005178:	20000e3c 	.word	0x20000e3c
 800517c:	20000e40 	.word	0x20000e40
 8005180:	e000ed20 	.word	0xe000ed20
 8005184:	2000000c 	.word	0x2000000c
 8005188:	e000ef34 	.word	0xe000ef34

0800518c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051a4:	4b0e      	ldr	r3, [pc, #56]	; (80051e0 <vPortEnterCritical+0x54>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3301      	adds	r3, #1
 80051aa:	4a0d      	ldr	r2, [pc, #52]	; (80051e0 <vPortEnterCritical+0x54>)
 80051ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051ae:	4b0c      	ldr	r3, [pc, #48]	; (80051e0 <vPortEnterCritical+0x54>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d10e      	bne.n	80051d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051b6:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <vPortEnterCritical+0x58>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d009      	beq.n	80051d4 <vPortEnterCritical+0x48>
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	603b      	str	r3, [r7, #0]
 80051d2:	e7fe      	b.n	80051d2 <vPortEnterCritical+0x46>
	}
}
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	2000000c 	.word	0x2000000c
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051ee:	4b11      	ldr	r3, [pc, #68]	; (8005234 <vPortExitCritical+0x4c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d109      	bne.n	800520a <vPortExitCritical+0x22>
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	607b      	str	r3, [r7, #4]
 8005208:	e7fe      	b.n	8005208 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800520a:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <vPortExitCritical+0x4c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3b01      	subs	r3, #1
 8005210:	4a08      	ldr	r2, [pc, #32]	; (8005234 <vPortExitCritical+0x4c>)
 8005212:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005214:	4b07      	ldr	r3, [pc, #28]	; (8005234 <vPortExitCritical+0x4c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d104      	bne.n	8005226 <vPortExitCritical+0x3e>
 800521c:	2300      	movs	r3, #0
 800521e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005226:	bf00      	nop
 8005228:	370c      	adds	r7, #12
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	2000000c 	.word	0x2000000c
	...

08005240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005240:	f3ef 8009 	mrs	r0, PSP
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	4b15      	ldr	r3, [pc, #84]	; (80052a0 <pxCurrentTCBConst>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	f01e 0f10 	tst.w	lr, #16
 8005250:	bf08      	it	eq
 8005252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525a:	6010      	str	r0, [r2, #0]
 800525c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005264:	f380 8811 	msr	BASEPRI, r0
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	f3bf 8f6f 	isb	sy
 8005270:	f7fe ffd6 	bl	8004220 <vTaskSwitchContext>
 8005274:	f04f 0000 	mov.w	r0, #0
 8005278:	f380 8811 	msr	BASEPRI, r0
 800527c:	bc09      	pop	{r0, r3}
 800527e:	6819      	ldr	r1, [r3, #0]
 8005280:	6808      	ldr	r0, [r1, #0]
 8005282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005286:	f01e 0f10 	tst.w	lr, #16
 800528a:	bf08      	it	eq
 800528c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005290:	f380 8809 	msr	PSP, r0
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	f3af 8000 	nop.w

080052a0 <pxCurrentTCBConst>:
 80052a0:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80052a4:	bf00      	nop
 80052a6:	bf00      	nop

080052a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052c0:	f7fe fef6 	bl	80040b0 <xTaskIncrementTick>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80052ca:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <xPortSysTickHandler+0x3c>)
 80052cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	2300      	movs	r3, #0
 80052d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80052dc:	bf00      	nop
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	e000ed04 	.word	0xe000ed04

080052e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052ec:	4b0b      	ldr	r3, [pc, #44]	; (800531c <vPortSetupTimerInterrupt+0x34>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052f2:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <vPortSetupTimerInterrupt+0x38>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052f8:	4b0a      	ldr	r3, [pc, #40]	; (8005324 <vPortSetupTimerInterrupt+0x3c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a0a      	ldr	r2, [pc, #40]	; (8005328 <vPortSetupTimerInterrupt+0x40>)
 80052fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005302:	099b      	lsrs	r3, r3, #6
 8005304:	4a09      	ldr	r2, [pc, #36]	; (800532c <vPortSetupTimerInterrupt+0x44>)
 8005306:	3b01      	subs	r3, #1
 8005308:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800530a:	4b04      	ldr	r3, [pc, #16]	; (800531c <vPortSetupTimerInterrupt+0x34>)
 800530c:	2207      	movs	r2, #7
 800530e:	601a      	str	r2, [r3, #0]
}
 8005310:	bf00      	nop
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	e000e010 	.word	0xe000e010
 8005320:	e000e018 	.word	0xe000e018
 8005324:	20000000 	.word	0x20000000
 8005328:	10624dd3 	.word	0x10624dd3
 800532c:	e000e014 	.word	0xe000e014

08005330 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005330:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005340 <vPortEnableVFP+0x10>
 8005334:	6801      	ldr	r1, [r0, #0]
 8005336:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800533a:	6001      	str	r1, [r0, #0]
 800533c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800533e:	bf00      	nop
 8005340:	e000ed88 	.word	0xe000ed88

08005344 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800534a:	f3ef 8305 	mrs	r3, IPSR
 800534e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2b0f      	cmp	r3, #15
 8005354:	d913      	bls.n	800537e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005356:	4a16      	ldr	r2, [pc, #88]	; (80053b0 <vPortValidateInterruptPriority+0x6c>)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005360:	4b14      	ldr	r3, [pc, #80]	; (80053b4 <vPortValidateInterruptPriority+0x70>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	7afa      	ldrb	r2, [r7, #11]
 8005366:	429a      	cmp	r2, r3
 8005368:	d209      	bcs.n	800537e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	607b      	str	r3, [r7, #4]
 800537c:	e7fe      	b.n	800537c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800537e:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <vPortValidateInterruptPriority+0x74>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005386:	4b0d      	ldr	r3, [pc, #52]	; (80053bc <vPortValidateInterruptPriority+0x78>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d909      	bls.n	80053a2 <vPortValidateInterruptPriority+0x5e>
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	603b      	str	r3, [r7, #0]
 80053a0:	e7fe      	b.n	80053a0 <vPortValidateInterruptPriority+0x5c>
	}
 80053a2:	bf00      	nop
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	e000e3f0 	.word	0xe000e3f0
 80053b4:	20000e3c 	.word	0x20000e3c
 80053b8:	e000ed0c 	.word	0xe000ed0c
 80053bc:	20000e40 	.word	0x20000e40

080053c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08a      	sub	sp, #40	; 0x28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053c8:	2300      	movs	r3, #0
 80053ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053cc:	f7fe fdb6 	bl	8003f3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053d0:	4b59      	ldr	r3, [pc, #356]	; (8005538 <pvPortMalloc+0x178>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053d8:	f000 f91a 	bl	8005610 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053dc:	4b57      	ldr	r3, [pc, #348]	; (800553c <pvPortMalloc+0x17c>)
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4013      	ands	r3, r2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f040 8091 	bne.w	800550c <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01c      	beq.n	800542a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80053f0:	2208      	movs	r2, #8
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4413      	add	r3, r2
 80053f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d013      	beq.n	800542a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f023 0307 	bic.w	r3, r3, #7
 8005408:	3308      	adds	r3, #8
 800540a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	2b00      	cmp	r3, #0
 8005414:	d009      	beq.n	800542a <pvPortMalloc+0x6a>
 8005416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541a:	f383 8811 	msr	BASEPRI, r3
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	e7fe      	b.n	8005428 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d06d      	beq.n	800550c <pvPortMalloc+0x14c>
 8005430:	4b43      	ldr	r3, [pc, #268]	; (8005540 <pvPortMalloc+0x180>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	429a      	cmp	r2, r3
 8005438:	d868      	bhi.n	800550c <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800543a:	4b42      	ldr	r3, [pc, #264]	; (8005544 <pvPortMalloc+0x184>)
 800543c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800543e:	4b41      	ldr	r3, [pc, #260]	; (8005544 <pvPortMalloc+0x184>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005444:	e004      	b.n	8005450 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	429a      	cmp	r2, r3
 8005458:	d903      	bls.n	8005462 <pvPortMalloc+0xa2>
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f1      	bne.n	8005446 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005462:	4b35      	ldr	r3, [pc, #212]	; (8005538 <pvPortMalloc+0x178>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005468:	429a      	cmp	r2, r3
 800546a:	d04f      	beq.n	800550c <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2208      	movs	r2, #8
 8005472:	4413      	add	r3, r2
 8005474:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	1ad2      	subs	r2, r2, r3
 8005486:	2308      	movs	r3, #8
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	429a      	cmp	r2, r3
 800548c:	d91e      	bls.n	80054cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800548e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4413      	add	r3, r2
 8005494:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <pvPortMalloc+0xf4>
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	e7fe      	b.n	80054b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	1ad2      	subs	r2, r2, r3
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054c6:	69b8      	ldr	r0, [r7, #24]
 80054c8:	f000 f904 	bl	80056d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054cc:	4b1c      	ldr	r3, [pc, #112]	; (8005540 <pvPortMalloc+0x180>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	4a1a      	ldr	r2, [pc, #104]	; (8005540 <pvPortMalloc+0x180>)
 80054d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054da:	4b19      	ldr	r3, [pc, #100]	; (8005540 <pvPortMalloc+0x180>)
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <pvPortMalloc+0x188>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d203      	bcs.n	80054ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054e6:	4b16      	ldr	r3, [pc, #88]	; (8005540 <pvPortMalloc+0x180>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a17      	ldr	r2, [pc, #92]	; (8005548 <pvPortMalloc+0x188>)
 80054ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	4b12      	ldr	r3, [pc, #72]	; (800553c <pvPortMalloc+0x17c>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005502:	4b12      	ldr	r3, [pc, #72]	; (800554c <pvPortMalloc+0x18c>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3301      	adds	r3, #1
 8005508:	4a10      	ldr	r2, [pc, #64]	; (800554c <pvPortMalloc+0x18c>)
 800550a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800550c:	f7fe fd24 	bl	8003f58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	2b00      	cmp	r3, #0
 8005518:	d009      	beq.n	800552e <pvPortMalloc+0x16e>
 800551a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	e7fe      	b.n	800552c <pvPortMalloc+0x16c>
	return pvReturn;
 800552e:	69fb      	ldr	r3, [r7, #28]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3728      	adds	r7, #40	; 0x28
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	20004a4c 	.word	0x20004a4c
 800553c:	20004a60 	.word	0x20004a60
 8005540:	20004a50 	.word	0x20004a50
 8005544:	20004a44 	.word	0x20004a44
 8005548:	20004a54 	.word	0x20004a54
 800554c:	20004a58 	.word	0x20004a58

08005550 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d04b      	beq.n	80055fa <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005562:	2308      	movs	r3, #8
 8005564:	425b      	negs	r3, r3
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4413      	add	r3, r2
 800556a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	4b23      	ldr	r3, [pc, #140]	; (8005604 <vPortFree+0xb4>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4013      	ands	r3, r2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d109      	bne.n	8005592 <vPortFree+0x42>
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	e7fe      	b.n	8005590 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <vPortFree+0x5e>
 800559a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	60bb      	str	r3, [r7, #8]
 80055ac:	e7fe      	b.n	80055ac <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	4b14      	ldr	r3, [pc, #80]	; (8005604 <vPortFree+0xb4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4013      	ands	r3, r2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d01e      	beq.n	80055fa <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d11a      	bne.n	80055fa <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	4b0e      	ldr	r3, [pc, #56]	; (8005604 <vPortFree+0xb4>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	43db      	mvns	r3, r3
 80055ce:	401a      	ands	r2, r3
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055d4:	f7fe fcb2 	bl	8003f3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <vPortFree+0xb8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4413      	add	r3, r2
 80055e2:	4a09      	ldr	r2, [pc, #36]	; (8005608 <vPortFree+0xb8>)
 80055e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055e6:	6938      	ldr	r0, [r7, #16]
 80055e8:	f000 f874 	bl	80056d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80055ec:	4b07      	ldr	r3, [pc, #28]	; (800560c <vPortFree+0xbc>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3301      	adds	r3, #1
 80055f2:	4a06      	ldr	r2, [pc, #24]	; (800560c <vPortFree+0xbc>)
 80055f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80055f6:	f7fe fcaf 	bl	8003f58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055fa:	bf00      	nop
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20004a60 	.word	0x20004a60
 8005608:	20004a50 	.word	0x20004a50
 800560c:	20004a5c 	.word	0x20004a5c

08005610 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005616:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800561a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800561c:	4b27      	ldr	r3, [pc, #156]	; (80056bc <prvHeapInit+0xac>)
 800561e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00c      	beq.n	8005644 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3307      	adds	r3, #7
 800562e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0307 	bic.w	r3, r3, #7
 8005636:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	4a1f      	ldr	r2, [pc, #124]	; (80056bc <prvHeapInit+0xac>)
 8005640:	4413      	add	r3, r2
 8005642:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005648:	4a1d      	ldr	r2, [pc, #116]	; (80056c0 <prvHeapInit+0xb0>)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800564e:	4b1c      	ldr	r3, [pc, #112]	; (80056c0 <prvHeapInit+0xb0>)
 8005650:	2200      	movs	r2, #0
 8005652:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	4413      	add	r3, r2
 800565a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800565c:	2208      	movs	r2, #8
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0307 	bic.w	r3, r3, #7
 800566a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4a15      	ldr	r2, [pc, #84]	; (80056c4 <prvHeapInit+0xb4>)
 8005670:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005672:	4b14      	ldr	r3, [pc, #80]	; (80056c4 <prvHeapInit+0xb4>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2200      	movs	r2, #0
 8005678:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800567a:	4b12      	ldr	r3, [pc, #72]	; (80056c4 <prvHeapInit+0xb4>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	1ad2      	subs	r2, r2, r3
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005690:	4b0c      	ldr	r3, [pc, #48]	; (80056c4 <prvHeapInit+0xb4>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	4a0a      	ldr	r2, [pc, #40]	; (80056c8 <prvHeapInit+0xb8>)
 800569e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	4a09      	ldr	r2, [pc, #36]	; (80056cc <prvHeapInit+0xbc>)
 80056a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056a8:	4b09      	ldr	r3, [pc, #36]	; (80056d0 <prvHeapInit+0xc0>)
 80056aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056ae:	601a      	str	r2, [r3, #0]
}
 80056b0:	bf00      	nop
 80056b2:	3714      	adds	r7, #20
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	20000e44 	.word	0x20000e44
 80056c0:	20004a44 	.word	0x20004a44
 80056c4:	20004a4c 	.word	0x20004a4c
 80056c8:	20004a54 	.word	0x20004a54
 80056cc:	20004a50 	.word	0x20004a50
 80056d0:	20004a60 	.word	0x20004a60

080056d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056dc:	4b28      	ldr	r3, [pc, #160]	; (8005780 <prvInsertBlockIntoFreeList+0xac>)
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	e002      	b.n	80056e8 <prvInsertBlockIntoFreeList+0x14>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d8f7      	bhi.n	80056e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	4413      	add	r3, r2
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	429a      	cmp	r2, r3
 8005702:	d108      	bne.n	8005716 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	441a      	add	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	441a      	add	r2, r3
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d118      	bne.n	800575c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	4b15      	ldr	r3, [pc, #84]	; (8005784 <prvInsertBlockIntoFreeList+0xb0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	429a      	cmp	r2, r3
 8005734:	d00d      	beq.n	8005752 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	441a      	add	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	601a      	str	r2, [r3, #0]
 8005750:	e008      	b.n	8005764 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005752:	4b0c      	ldr	r3, [pc, #48]	; (8005784 <prvInsertBlockIntoFreeList+0xb0>)
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	e003      	b.n	8005764 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	429a      	cmp	r2, r3
 800576a:	d002      	beq.n	8005772 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	20004a44 	.word	0x20004a44
 8005784:	20004a4c 	.word	0x20004a4c

08005788 <__libc_init_array>:
 8005788:	b570      	push	{r4, r5, r6, lr}
 800578a:	4e0d      	ldr	r6, [pc, #52]	; (80057c0 <__libc_init_array+0x38>)
 800578c:	4c0d      	ldr	r4, [pc, #52]	; (80057c4 <__libc_init_array+0x3c>)
 800578e:	1ba4      	subs	r4, r4, r6
 8005790:	10a4      	asrs	r4, r4, #2
 8005792:	2500      	movs	r5, #0
 8005794:	42a5      	cmp	r5, r4
 8005796:	d109      	bne.n	80057ac <__libc_init_array+0x24>
 8005798:	4e0b      	ldr	r6, [pc, #44]	; (80057c8 <__libc_init_array+0x40>)
 800579a:	4c0c      	ldr	r4, [pc, #48]	; (80057cc <__libc_init_array+0x44>)
 800579c:	f000 f8e4 	bl	8005968 <_init>
 80057a0:	1ba4      	subs	r4, r4, r6
 80057a2:	10a4      	asrs	r4, r4, #2
 80057a4:	2500      	movs	r5, #0
 80057a6:	42a5      	cmp	r5, r4
 80057a8:	d105      	bne.n	80057b6 <__libc_init_array+0x2e>
 80057aa:	bd70      	pop	{r4, r5, r6, pc}
 80057ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057b0:	4798      	blx	r3
 80057b2:	3501      	adds	r5, #1
 80057b4:	e7ee      	b.n	8005794 <__libc_init_array+0xc>
 80057b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057ba:	4798      	blx	r3
 80057bc:	3501      	adds	r5, #1
 80057be:	e7f2      	b.n	80057a6 <__libc_init_array+0x1e>
 80057c0:	08005a4c 	.word	0x08005a4c
 80057c4:	08005a4c 	.word	0x08005a4c
 80057c8:	08005a4c 	.word	0x08005a4c
 80057cc:	08005a50 	.word	0x08005a50

080057d0 <memcpy>:
 80057d0:	b510      	push	{r4, lr}
 80057d2:	1e43      	subs	r3, r0, #1
 80057d4:	440a      	add	r2, r1
 80057d6:	4291      	cmp	r1, r2
 80057d8:	d100      	bne.n	80057dc <memcpy+0xc>
 80057da:	bd10      	pop	{r4, pc}
 80057dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057e4:	e7f7      	b.n	80057d6 <memcpy+0x6>

080057e6 <memset>:
 80057e6:	4402      	add	r2, r0
 80057e8:	4603      	mov	r3, r0
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d100      	bne.n	80057f0 <memset+0xa>
 80057ee:	4770      	bx	lr
 80057f0:	f803 1b01 	strb.w	r1, [r3], #1
 80057f4:	e7f9      	b.n	80057ea <memset+0x4>

080057f6 <cleanup_glue>:
 80057f6:	b538      	push	{r3, r4, r5, lr}
 80057f8:	460c      	mov	r4, r1
 80057fa:	6809      	ldr	r1, [r1, #0]
 80057fc:	4605      	mov	r5, r0
 80057fe:	b109      	cbz	r1, 8005804 <cleanup_glue+0xe>
 8005800:	f7ff fff9 	bl	80057f6 <cleanup_glue>
 8005804:	4621      	mov	r1, r4
 8005806:	4628      	mov	r0, r5
 8005808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800580c:	f000 b85e 	b.w	80058cc <_free_r>

08005810 <_reclaim_reent>:
 8005810:	4b2c      	ldr	r3, [pc, #176]	; (80058c4 <_reclaim_reent+0xb4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4283      	cmp	r3, r0
 8005816:	b570      	push	{r4, r5, r6, lr}
 8005818:	4604      	mov	r4, r0
 800581a:	d051      	beq.n	80058c0 <_reclaim_reent+0xb0>
 800581c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800581e:	b143      	cbz	r3, 8005832 <_reclaim_reent+0x22>
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d14a      	bne.n	80058bc <_reclaim_reent+0xac>
 8005826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005828:	6819      	ldr	r1, [r3, #0]
 800582a:	b111      	cbz	r1, 8005832 <_reclaim_reent+0x22>
 800582c:	4620      	mov	r0, r4
 800582e:	f000 f84d 	bl	80058cc <_free_r>
 8005832:	6961      	ldr	r1, [r4, #20]
 8005834:	b111      	cbz	r1, 800583c <_reclaim_reent+0x2c>
 8005836:	4620      	mov	r0, r4
 8005838:	f000 f848 	bl	80058cc <_free_r>
 800583c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800583e:	b111      	cbz	r1, 8005846 <_reclaim_reent+0x36>
 8005840:	4620      	mov	r0, r4
 8005842:	f000 f843 	bl	80058cc <_free_r>
 8005846:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005848:	b111      	cbz	r1, 8005850 <_reclaim_reent+0x40>
 800584a:	4620      	mov	r0, r4
 800584c:	f000 f83e 	bl	80058cc <_free_r>
 8005850:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005852:	b111      	cbz	r1, 800585a <_reclaim_reent+0x4a>
 8005854:	4620      	mov	r0, r4
 8005856:	f000 f839 	bl	80058cc <_free_r>
 800585a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800585c:	b111      	cbz	r1, 8005864 <_reclaim_reent+0x54>
 800585e:	4620      	mov	r0, r4
 8005860:	f000 f834 	bl	80058cc <_free_r>
 8005864:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005866:	b111      	cbz	r1, 800586e <_reclaim_reent+0x5e>
 8005868:	4620      	mov	r0, r4
 800586a:	f000 f82f 	bl	80058cc <_free_r>
 800586e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005870:	b111      	cbz	r1, 8005878 <_reclaim_reent+0x68>
 8005872:	4620      	mov	r0, r4
 8005874:	f000 f82a 	bl	80058cc <_free_r>
 8005878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800587a:	b111      	cbz	r1, 8005882 <_reclaim_reent+0x72>
 800587c:	4620      	mov	r0, r4
 800587e:	f000 f825 	bl	80058cc <_free_r>
 8005882:	69a3      	ldr	r3, [r4, #24]
 8005884:	b1e3      	cbz	r3, 80058c0 <_reclaim_reent+0xb0>
 8005886:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005888:	4620      	mov	r0, r4
 800588a:	4798      	blx	r3
 800588c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800588e:	b1b9      	cbz	r1, 80058c0 <_reclaim_reent+0xb0>
 8005890:	4620      	mov	r0, r4
 8005892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005896:	f7ff bfae 	b.w	80057f6 <cleanup_glue>
 800589a:	5949      	ldr	r1, [r1, r5]
 800589c:	b941      	cbnz	r1, 80058b0 <_reclaim_reent+0xa0>
 800589e:	3504      	adds	r5, #4
 80058a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058a2:	2d80      	cmp	r5, #128	; 0x80
 80058a4:	68d9      	ldr	r1, [r3, #12]
 80058a6:	d1f8      	bne.n	800589a <_reclaim_reent+0x8a>
 80058a8:	4620      	mov	r0, r4
 80058aa:	f000 f80f 	bl	80058cc <_free_r>
 80058ae:	e7ba      	b.n	8005826 <_reclaim_reent+0x16>
 80058b0:	680e      	ldr	r6, [r1, #0]
 80058b2:	4620      	mov	r0, r4
 80058b4:	f000 f80a 	bl	80058cc <_free_r>
 80058b8:	4631      	mov	r1, r6
 80058ba:	e7ef      	b.n	800589c <_reclaim_reent+0x8c>
 80058bc:	2500      	movs	r5, #0
 80058be:	e7ef      	b.n	80058a0 <_reclaim_reent+0x90>
 80058c0:	bd70      	pop	{r4, r5, r6, pc}
 80058c2:	bf00      	nop
 80058c4:	20000010 	.word	0x20000010

080058c8 <__malloc_lock>:
 80058c8:	4770      	bx	lr

080058ca <__malloc_unlock>:
 80058ca:	4770      	bx	lr

080058cc <_free_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	4605      	mov	r5, r0
 80058d0:	2900      	cmp	r1, #0
 80058d2:	d045      	beq.n	8005960 <_free_r+0x94>
 80058d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058d8:	1f0c      	subs	r4, r1, #4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	bfb8      	it	lt
 80058de:	18e4      	addlt	r4, r4, r3
 80058e0:	f7ff fff2 	bl	80058c8 <__malloc_lock>
 80058e4:	4a1f      	ldr	r2, [pc, #124]	; (8005964 <_free_r+0x98>)
 80058e6:	6813      	ldr	r3, [r2, #0]
 80058e8:	4610      	mov	r0, r2
 80058ea:	b933      	cbnz	r3, 80058fa <_free_r+0x2e>
 80058ec:	6063      	str	r3, [r4, #4]
 80058ee:	6014      	str	r4, [r2, #0]
 80058f0:	4628      	mov	r0, r5
 80058f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058f6:	f7ff bfe8 	b.w	80058ca <__malloc_unlock>
 80058fa:	42a3      	cmp	r3, r4
 80058fc:	d90c      	bls.n	8005918 <_free_r+0x4c>
 80058fe:	6821      	ldr	r1, [r4, #0]
 8005900:	1862      	adds	r2, r4, r1
 8005902:	4293      	cmp	r3, r2
 8005904:	bf04      	itt	eq
 8005906:	681a      	ldreq	r2, [r3, #0]
 8005908:	685b      	ldreq	r3, [r3, #4]
 800590a:	6063      	str	r3, [r4, #4]
 800590c:	bf04      	itt	eq
 800590e:	1852      	addeq	r2, r2, r1
 8005910:	6022      	streq	r2, [r4, #0]
 8005912:	6004      	str	r4, [r0, #0]
 8005914:	e7ec      	b.n	80058f0 <_free_r+0x24>
 8005916:	4613      	mov	r3, r2
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	b10a      	cbz	r2, 8005920 <_free_r+0x54>
 800591c:	42a2      	cmp	r2, r4
 800591e:	d9fa      	bls.n	8005916 <_free_r+0x4a>
 8005920:	6819      	ldr	r1, [r3, #0]
 8005922:	1858      	adds	r0, r3, r1
 8005924:	42a0      	cmp	r0, r4
 8005926:	d10b      	bne.n	8005940 <_free_r+0x74>
 8005928:	6820      	ldr	r0, [r4, #0]
 800592a:	4401      	add	r1, r0
 800592c:	1858      	adds	r0, r3, r1
 800592e:	4282      	cmp	r2, r0
 8005930:	6019      	str	r1, [r3, #0]
 8005932:	d1dd      	bne.n	80058f0 <_free_r+0x24>
 8005934:	6810      	ldr	r0, [r2, #0]
 8005936:	6852      	ldr	r2, [r2, #4]
 8005938:	605a      	str	r2, [r3, #4]
 800593a:	4401      	add	r1, r0
 800593c:	6019      	str	r1, [r3, #0]
 800593e:	e7d7      	b.n	80058f0 <_free_r+0x24>
 8005940:	d902      	bls.n	8005948 <_free_r+0x7c>
 8005942:	230c      	movs	r3, #12
 8005944:	602b      	str	r3, [r5, #0]
 8005946:	e7d3      	b.n	80058f0 <_free_r+0x24>
 8005948:	6820      	ldr	r0, [r4, #0]
 800594a:	1821      	adds	r1, r4, r0
 800594c:	428a      	cmp	r2, r1
 800594e:	bf04      	itt	eq
 8005950:	6811      	ldreq	r1, [r2, #0]
 8005952:	6852      	ldreq	r2, [r2, #4]
 8005954:	6062      	str	r2, [r4, #4]
 8005956:	bf04      	itt	eq
 8005958:	1809      	addeq	r1, r1, r0
 800595a:	6021      	streq	r1, [r4, #0]
 800595c:	605c      	str	r4, [r3, #4]
 800595e:	e7c7      	b.n	80058f0 <_free_r+0x24>
 8005960:	bd38      	pop	{r3, r4, r5, pc}
 8005962:	bf00      	nop
 8005964:	20004a64 	.word	0x20004a64

08005968 <_init>:
 8005968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596a:	bf00      	nop
 800596c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800596e:	bc08      	pop	{r3}
 8005970:	469e      	mov	lr, r3
 8005972:	4770      	bx	lr

08005974 <_fini>:
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005976:	bf00      	nop
 8005978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597a:	bc08      	pop	{r3}
 800597c:	469e      	mov	lr, r3
 800597e:	4770      	bx	lr
