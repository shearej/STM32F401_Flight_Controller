
STM32F401_Flight_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005030  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080051d0  080051d0  000151d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005294  08005294  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800529c  0800529c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052a0  080052a0  000152a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080052a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ac8  20000074  08005318  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b3c  08005318  00024b3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e9f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b4d  00000000  00000000  00036f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011b0  00000000  00000000  00039a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001088  00000000  00000000  0003ac40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002c9f  00000000  00000000  0003bcc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000daed  00000000  00000000  0003e967  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000941dc  00000000  00000000  0004c454  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0630  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c1c  00000000  00000000  000e06ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080051b8 	.word	0x080051b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080051b8 	.word	0x080051b8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 faf4 	bl	8000ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f818 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f91e 	bl	800072c <MX_GPIO_Init>
  MX_TIM1_Init();
 80004f0:	f000 f874 	bl	80005dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f002 f83a 	bl	800256c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of handleButton */
  handleButtonHandle = osThreadNew(HandleButton, NULL, &handleButton_attributes);
 80004f8:	4a05      	ldr	r2, [pc, #20]	; (8000510 <main+0x30>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4805      	ldr	r0, [pc, #20]	; (8000514 <main+0x34>)
 80004fe:	f002 f87f 	bl	8002600 <osThreadNew>
 8000502:	4602      	mov	r2, r0
 8000504:	4b04      	ldr	r3, [pc, #16]	; (8000518 <main+0x38>)
 8000506:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000508:	f002 f854 	bl	80025b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050c:	e7fe      	b.n	800050c <main+0x2c>
 800050e:	bf00      	nop
 8000510:	080051f8 	.word	0x080051f8
 8000514:	080007c5 	.word	0x080007c5
 8000518:	20004a64 	.word	0x20004a64

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2230      	movs	r2, #48	; 0x30
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f004 fd83 	bl	8005036 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 030c 	add.w	r3, r7, #12
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
 8000544:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <SystemClock_Config+0xb8>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a22      	ldr	r2, [pc, #136]	; (80005d4 <SystemClock_Config+0xb8>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <SystemClock_Config+0xb8>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800055c:	2300      	movs	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
 8000560:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <SystemClock_Config+0xbc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000568:	4a1b      	ldr	r2, [pc, #108]	; (80005d8 <SystemClock_Config+0xbc>)
 800056a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <SystemClock_Config+0xbc>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000584:	2310      	movs	r3, #16
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000588:	2300      	movs	r3, #0
 800058a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	4618      	mov	r0, r3
 8000592:	f000 fd67 	bl	8001064 <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800059c:	f000 f92c 	bl	80007f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 ffca 	bl	8001554 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005c6:	f000 f917 	bl	80007f8 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b092      	sub	sp, #72	; 0x48
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
 80005fc:	615a      	str	r2, [r3, #20]
 80005fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2220      	movs	r2, #32
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f004 fd15 	bl	8005036 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800060c:	4b45      	ldr	r3, [pc, #276]	; (8000724 <MX_TIM1_Init+0x148>)
 800060e:	4a46      	ldr	r2, [pc, #280]	; (8000728 <MX_TIM1_Init+0x14c>)
 8000610:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000612:	4b44      	ldr	r3, [pc, #272]	; (8000724 <MX_TIM1_Init+0x148>)
 8000614:	2200      	movs	r2, #0
 8000616:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000618:	4b42      	ldr	r3, [pc, #264]	; (8000724 <MX_TIM1_Init+0x148>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800061e:	4b41      	ldr	r3, [pc, #260]	; (8000724 <MX_TIM1_Init+0x148>)
 8000620:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000624:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000626:	4b3f      	ldr	r3, [pc, #252]	; (8000724 <MX_TIM1_Init+0x148>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800062c:	4b3d      	ldr	r3, [pc, #244]	; (8000724 <MX_TIM1_Init+0x148>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000632:	4b3c      	ldr	r3, [pc, #240]	; (8000724 <MX_TIM1_Init+0x148>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000638:	483a      	ldr	r0, [pc, #232]	; (8000724 <MX_TIM1_Init+0x148>)
 800063a:	f001 fa31 	bl	8001aa0 <HAL_TIM_PWM_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000644:	f000 f8d8 	bl	80007f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000648:	2300      	movs	r3, #0
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800064c:	2300      	movs	r3, #0
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000650:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000654:	4619      	mov	r1, r3
 8000656:	4833      	ldr	r0, [pc, #204]	; (8000724 <MX_TIM1_Init+0x148>)
 8000658:	f001 fe70 	bl	800233c <HAL_TIMEx_MasterConfigSynchronization>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000662:	f000 f8c9 	bl	80007f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000666:	2360      	movs	r3, #96	; 0x60
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800066e:	2300      	movs	r3, #0
 8000670:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000672:	2300      	movs	r3, #0
 8000674:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000676:	2300      	movs	r3, #0
 8000678:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800067a:	2300      	movs	r3, #0
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800067e:	2300      	movs	r3, #0
 8000680:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000686:	2200      	movs	r2, #0
 8000688:	4619      	mov	r1, r3
 800068a:	4826      	ldr	r0, [pc, #152]	; (8000724 <MX_TIM1_Init+0x148>)
 800068c:	f001 fb60 	bl	8001d50 <HAL_TIM_PWM_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000696:	f000 f8af 	bl	80007f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800069a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069e:	2204      	movs	r2, #4
 80006a0:	4619      	mov	r1, r3
 80006a2:	4820      	ldr	r0, [pc, #128]	; (8000724 <MX_TIM1_Init+0x148>)
 80006a4:	f001 fb54 	bl	8001d50 <HAL_TIM_PWM_ConfigChannel>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80006ae:	f000 f8a3 	bl	80007f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b6:	2208      	movs	r2, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	481a      	ldr	r0, [pc, #104]	; (8000724 <MX_TIM1_Init+0x148>)
 80006bc:	f001 fb48 	bl	8001d50 <HAL_TIM_PWM_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80006c6:	f000 f897 	bl	80007f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ce:	220c      	movs	r2, #12
 80006d0:	4619      	mov	r1, r3
 80006d2:	4814      	ldr	r0, [pc, #80]	; (8000724 <MX_TIM1_Init+0x148>)
 80006d4:	f001 fb3c 	bl	8001d50 <HAL_TIM_PWM_ConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80006de:	f000 f88b 	bl	80007f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	4619      	mov	r1, r3
 8000704:	4807      	ldr	r0, [pc, #28]	; (8000724 <MX_TIM1_Init+0x148>)
 8000706:	f001 fe87 	bl	8002418 <HAL_TIMEx_ConfigBreakDeadTime>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000710:	f000 f872 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000714:	4803      	ldr	r0, [pc, #12]	; (8000724 <MX_TIM1_Init+0x148>)
 8000716:	f000 f8c7 	bl	80008a8 <HAL_TIM_MspPostInit>

}
 800071a:	bf00      	nop
 800071c:	3748      	adds	r7, #72	; 0x48
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20004a68 	.word	0x20004a68
 8000728:	40010000 	.word	0x40010000

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <MX_GPIO_Init+0x90>)
 8000746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000748:	4a1c      	ldr	r2, [pc, #112]	; (80007bc <MX_GPIO_Init+0x90>)
 800074a:	f043 0301 	orr.w	r3, r3, #1
 800074e:	6313      	str	r3, [r2, #48]	; 0x30
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_GPIO_Init+0x90>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800075c:	23fc      	movs	r3, #252	; 0xfc
 800075e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000760:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	4619      	mov	r1, r3
 800076e:	4814      	ldr	r0, [pc, #80]	; (80007c0 <MX_GPIO_Init+0x94>)
 8000770:	f000 fad2 	bl	8000d18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2008      	movs	r0, #8
 800077a:	f000 faa3 	bl	8000cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800077e:	2008      	movs	r0, #8
 8000780:	f000 fabc 	bl	8000cfc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	2100      	movs	r1, #0
 8000788:	2009      	movs	r0, #9
 800078a:	f000 fa9b 	bl	8000cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800078e:	2009      	movs	r0, #9
 8000790:	f000 fab4 	bl	8000cfc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	2100      	movs	r1, #0
 8000798:	200a      	movs	r0, #10
 800079a:	f000 fa93 	bl	8000cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800079e:	200a      	movs	r0, #10
 80007a0:	f000 faac 	bl	8000cfc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	2017      	movs	r0, #23
 80007aa:	f000 fa8b 	bl	8000cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80007ae:	2017      	movs	r0, #23
 80007b0:	f000 faa4 	bl	8000cfc <HAL_NVIC_EnableIRQ>

}
 80007b4:	bf00      	nop
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020000 	.word	0x40020000

080007c4 <HandleButton>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_HandleButton */
void HandleButton(void *argument)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f001 ffa9 	bl	8002724 <osDelay>
 80007d2:	e7fb      	b.n	80007cc <HandleButton+0x8>

080007d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d101      	bne.n	80007ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007e6:	f000 f995 	bl	8000b14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40014400 	.word	0x40014400

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fe:	e7fe      	b.n	80007fe <Error_Handler+0x6>

08000800 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_MspInit+0x54>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	4a11      	ldr	r2, [pc, #68]	; (8000854 <HAL_MspInit+0x54>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000814:	6453      	str	r3, [r2, #68]	; 0x44
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_MspInit+0x54>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <HAL_MspInit+0x54>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <HAL_MspInit+0x54>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_MspInit+0x54>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	210f      	movs	r1, #15
 8000842:	f06f 0001 	mvn.w	r0, #1
 8000846:	f000 fa3d 	bl	8000cc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800

08000858 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <HAL_TIM_PWM_MspInit+0x48>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d115      	bne.n	8000896 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <HAL_TIM_PWM_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	4a0c      	ldr	r2, [pc, #48]	; (80008a4 <HAL_TIM_PWM_MspInit+0x4c>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6453      	str	r3, [r2, #68]	; 0x44
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <HAL_TIM_PWM_MspInit+0x4c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2105      	movs	r1, #5
 800088a:	2019      	movs	r0, #25
 800088c:	f000 fa1a 	bl	8000cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000890:	2019      	movs	r0, #25
 8000892:	f000 fa33 	bl	8000cfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40010000 	.word	0x40010000
 80008a4:	40023800 	.word	0x40023800

080008a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a12      	ldr	r2, [pc, #72]	; (8000910 <HAL_TIM_MspPostInit+0x68>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d11e      	bne.n	8000908 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_TIM_MspPostInit+0x6c>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a10      	ldr	r2, [pc, #64]	; (8000914 <HAL_TIM_MspPostInit+0x6c>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <HAL_TIM_MspPostInit+0x6c>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80008e6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80008ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	4619      	mov	r1, r3
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <HAL_TIM_MspPostInit+0x70>)
 8000904:	f000 fa08 	bl	8000d18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40010000 	.word	0x40010000
 8000914:	40023800 	.word	0x40023800
 8000918:	40020000 	.word	0x40020000

0800091c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	2019      	movs	r0, #25
 8000932:	f000 f9c7 	bl	8000cc4 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000936:	2019      	movs	r0, #25
 8000938:	f000 f9e0 	bl	8000cfc <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <HAL_InitTick+0xa0>)
 8000942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000944:	4a1d      	ldr	r2, [pc, #116]	; (80009bc <HAL_InitTick+0xa0>)
 8000946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800094a:	6453      	str	r3, [r2, #68]	; 0x44
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <HAL_InitTick+0xa0>)
 800094e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000958:	f107 0210 	add.w	r2, r7, #16
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f000 ffae 	bl	80018c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000968:	f000 ff98 	bl	800189c <HAL_RCC_GetPCLK2Freq>
 800096c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800096e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000970:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <HAL_InitTick+0xa4>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	0c9b      	lsrs	r3, r3, #18
 8000978:	3b01      	subs	r3, #1
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <HAL_InitTick+0xa8>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <HAL_InitTick+0xac>)
 8000980:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <HAL_InitTick+0xa8>)
 8000984:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000988:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800098a:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <HAL_InitTick+0xa8>)
 800098c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_InitTick+0xa8>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <HAL_InitTick+0xa8>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <HAL_InitTick+0xa8>)
 800099e:	f000 ffc3 	bl	8001928 <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d104      	bne.n	80009b2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <HAL_InitTick+0xa8>)
 80009aa:	f001 f817 	bl	80019dc <HAL_TIM_Base_Start_IT>
 80009ae:	4603      	mov	r3, r0
 80009b0:	e000      	b.n	80009b4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3730      	adds	r7, #48	; 0x30
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800
 80009c0:	431bde83 	.word	0x431bde83
 80009c4:	20004ab0 	.word	0x20004ab0
 80009c8:	40014400 	.word	0x40014400

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80009fc:	2004      	movs	r0, #4
 80009fe:	f000 fb0d 	bl	800101c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000a0a:	2008      	movs	r0, #8
 8000a0c:	f000 fb06 	bl	800101c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000a18:	2010      	movs	r0, #16
 8000a1a:	f000 faff 	bl	800101c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000a26:	2020      	movs	r0, #32
 8000a28:	f000 faf8 	bl	800101c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000a2c:	2040      	movs	r0, #64	; 0x40
 8000a2e:	f000 faf5 	bl	800101c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000a32:	2080      	movs	r0, #128	; 0x80
 8000a34:	f000 faf2 	bl	800101c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a40:	4803      	ldr	r0, [pc, #12]	; (8000a50 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8000a42:	f001 f87c 	bl	8001b3e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8000a46:	4803      	ldr	r0, [pc, #12]	; (8000a54 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000a48:	f001 f879 	bl	8001b3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20004a68 	.word	0x20004a68
 8000a54:	20004ab0 	.word	0x20004ab0

08000a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <SystemInit+0x20>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <SystemInit+0x20>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a82:	490e      	ldr	r1, [pc, #56]	; (8000abc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a84:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a98:	4c0b      	ldr	r4, [pc, #44]	; (8000ac8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aa6:	f7ff ffd7 	bl	8000a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f004 fa95 	bl	8004fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aae:	f7ff fd17 	bl	80004e0 <main>
  bx  lr    
 8000ab2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ab4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ac0:	080052a4 	.word	0x080052a4
  ldr r2, =_sbss
 8000ac4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ac8:	20004b3c 	.word	0x20004b3c

08000acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC_IRQHandler>
	...

08000ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <HAL_Init+0x40>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <HAL_Init+0x40>)
 8000ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ade:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_Init+0x40>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <HAL_Init+0x40>)
 8000ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <HAL_Init+0x40>)
 8000af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f8d8 	bl	8000cae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	2005      	movs	r0, #5
 8000b00:	f7ff ff0c 	bl	800091c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f7ff fe7c 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023c00 	.word	0x40023c00

08000b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x20>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x24>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <HAL_IncTick+0x24>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20004af8 	.word	0x20004af8

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <HAL_GetTick+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	20004af8 	.word	0x20004af8

08000b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b70:	4013      	ands	r3, r2
 8000b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <__NVIC_SetPriorityGrouping+0x44>)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	60d3      	str	r3, [r2, #12]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	0a1b      	lsrs	r3, r3, #8
 8000ba6:	f003 0307 	and.w	r3, r3, #7
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0b      	blt.n	8000be2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4907      	ldr	r1, [pc, #28]	; (8000bf0 <__NVIC_EnableIRQ+0x38>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be2:	bf00      	nop
 8000be4:	370c      	adds	r7, #12
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	; (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	; (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	; 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ff4c 	bl	8000b54 <__NVIC_SetPriorityGrouping>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
 8000cd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd6:	f7ff ff61 	bl	8000b9c <__NVIC_GetPriorityGrouping>
 8000cda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	68b9      	ldr	r1, [r7, #8]
 8000ce0:	6978      	ldr	r0, [r7, #20]
 8000ce2:	f7ff ffb1 	bl	8000c48 <NVIC_EncodePriority>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cec:	4611      	mov	r1, r2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ff80 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000cf4:	bf00      	nop
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff54 	bl	8000bb8 <__NVIC_EnableIRQ>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61fb      	str	r3, [r7, #28]
 8000d32:	e159      	b.n	8000fe8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d34:	2201      	movs	r2, #1
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	f040 8148 	bne.w	8000fe2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d005      	beq.n	8000d6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d130      	bne.n	8000dcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	68da      	ldr	r2, [r3, #12]
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da0:	2201      	movs	r2, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	69ba      	ldr	r2, [r7, #24]
 8000dac:	4013      	ands	r3, r2
 8000dae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	091b      	lsrs	r3, r3, #4
 8000db6:	f003 0201 	and.w	r2, r3, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	d017      	beq.n	8000e08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	689a      	ldr	r2, [r3, #8]
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0303 	and.w	r3, r3, #3
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d123      	bne.n	8000e5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	08da      	lsrs	r2, r3, #3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3208      	adds	r2, #8
 8000e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	f003 0307 	and.w	r3, r3, #7
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	220f      	movs	r2, #15
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	43db      	mvns	r3, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4013      	ands	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	691a      	ldr	r2, [r3, #16]
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	08da      	lsrs	r2, r3, #3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3208      	adds	r2, #8
 8000e56:	69b9      	ldr	r1, [r7, #24]
 8000e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0203 	and.w	r2, r3, #3
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f000 80a2 	beq.w	8000fe2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b56      	ldr	r3, [pc, #344]	; (8000ffc <HAL_GPIO_Init+0x2e4>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	4a55      	ldr	r2, [pc, #340]	; (8000ffc <HAL_GPIO_Init+0x2e4>)
 8000ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eac:	6453      	str	r3, [r2, #68]	; 0x44
 8000eae:	4b53      	ldr	r3, [pc, #332]	; (8000ffc <HAL_GPIO_Init+0x2e4>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eba:	4a51      	ldr	r2, [pc, #324]	; (8001000 <HAL_GPIO_Init+0x2e8>)
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	089b      	lsrs	r3, r3, #2
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4013      	ands	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a48      	ldr	r2, [pc, #288]	; (8001004 <HAL_GPIO_Init+0x2ec>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d019      	beq.n	8000f1a <HAL_GPIO_Init+0x202>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a47      	ldr	r2, [pc, #284]	; (8001008 <HAL_GPIO_Init+0x2f0>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d013      	beq.n	8000f16 <HAL_GPIO_Init+0x1fe>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a46      	ldr	r2, [pc, #280]	; (800100c <HAL_GPIO_Init+0x2f4>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d00d      	beq.n	8000f12 <HAL_GPIO_Init+0x1fa>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a45      	ldr	r2, [pc, #276]	; (8001010 <HAL_GPIO_Init+0x2f8>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d007      	beq.n	8000f0e <HAL_GPIO_Init+0x1f6>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a44      	ldr	r2, [pc, #272]	; (8001014 <HAL_GPIO_Init+0x2fc>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d101      	bne.n	8000f0a <HAL_GPIO_Init+0x1f2>
 8000f06:	2304      	movs	r3, #4
 8000f08:	e008      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	e006      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e004      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f12:	2302      	movs	r3, #2
 8000f14:	e002      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <HAL_GPIO_Init+0x204>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	69fa      	ldr	r2, [r7, #28]
 8000f1e:	f002 0203 	and.w	r2, r2, #3
 8000f22:	0092      	lsls	r2, r2, #2
 8000f24:	4093      	lsls	r3, r2
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f2c:	4934      	ldr	r1, [pc, #208]	; (8001000 <HAL_GPIO_Init+0x2e8>)
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	3302      	adds	r3, #2
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f3a:	4b37      	ldr	r3, [pc, #220]	; (8001018 <HAL_GPIO_Init+0x300>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f5e:	4a2e      	ldr	r2, [pc, #184]	; (8001018 <HAL_GPIO_Init+0x300>)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f64:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <HAL_GPIO_Init+0x300>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f88:	4a23      	ldr	r2, [pc, #140]	; (8001018 <HAL_GPIO_Init+0x300>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8e:	4b22      	ldr	r3, [pc, #136]	; (8001018 <HAL_GPIO_Init+0x300>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fb2:	4a19      	ldr	r2, [pc, #100]	; (8001018 <HAL_GPIO_Init+0x300>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <HAL_GPIO_Init+0x300>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fdc:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <HAL_GPIO_Init+0x300>)
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	61fb      	str	r3, [r7, #28]
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	f67f aea2 	bls.w	8000d34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3724      	adds	r7, #36	; 0x24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40013800 	.word	0x40013800
 8001004:	40020000 	.word	0x40020000
 8001008:	40020400 	.word	0x40020400
 800100c:	40020800 	.word	0x40020800
 8001010:	40020c00 	.word	0x40020c00
 8001014:	40021000 	.word	0x40021000
 8001018:	40013c00 	.word	0x40013c00

0800101c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001028:	695a      	ldr	r2, [r3, #20]
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	4013      	ands	r3, r2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d006      	beq.n	8001040 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001034:	88fb      	ldrh	r3, [r7, #6]
 8001036:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f806 	bl	800104c <HAL_GPIO_EXTI_Callback>
  }
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40013c00 	.word	0x40013c00

0800104c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e264      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	d075      	beq.n	800116e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001082:	4ba3      	ldr	r3, [pc, #652]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 030c 	and.w	r3, r3, #12
 800108a:	2b04      	cmp	r3, #4
 800108c:	d00c      	beq.n	80010a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800108e:	4ba0      	ldr	r3, [pc, #640]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001096:	2b08      	cmp	r3, #8
 8001098:	d112      	bne.n	80010c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800109a:	4b9d      	ldr	r3, [pc, #628]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010a6:	d10b      	bne.n	80010c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a8:	4b99      	ldr	r3, [pc, #612]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d05b      	beq.n	800116c <HAL_RCC_OscConfig+0x108>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d157      	bne.n	800116c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e23f      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c8:	d106      	bne.n	80010d8 <HAL_RCC_OscConfig+0x74>
 80010ca:	4b91      	ldr	r3, [pc, #580]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a90      	ldr	r2, [pc, #576]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80010d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	e01d      	b.n	8001114 <HAL_RCC_OscConfig+0xb0>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010e0:	d10c      	bne.n	80010fc <HAL_RCC_OscConfig+0x98>
 80010e2:	4b8b      	ldr	r3, [pc, #556]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a8a      	ldr	r2, [pc, #552]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	4b88      	ldr	r3, [pc, #544]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a87      	ldr	r2, [pc, #540]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	e00b      	b.n	8001114 <HAL_RCC_OscConfig+0xb0>
 80010fc:	4b84      	ldr	r3, [pc, #528]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a83      	ldr	r2, [pc, #524]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b81      	ldr	r3, [pc, #516]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a80      	ldr	r2, [pc, #512]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 800110e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d013      	beq.n	8001144 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111c:	f7ff fd0e 	bl	8000b3c <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001124:	f7ff fd0a 	bl	8000b3c <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b64      	cmp	r3, #100	; 0x64
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e204      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001136:	4b76      	ldr	r3, [pc, #472]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0f0      	beq.n	8001124 <HAL_RCC_OscConfig+0xc0>
 8001142:	e014      	b.n	800116e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff fcfa 	bl	8000b3c <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800114c:	f7ff fcf6 	bl	8000b3c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b64      	cmp	r3, #100	; 0x64
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e1f0      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115e:	4b6c      	ldr	r3, [pc, #432]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f0      	bne.n	800114c <HAL_RCC_OscConfig+0xe8>
 800116a:	e000      	b.n	800116e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d063      	beq.n	8001242 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800117a:	4b65      	ldr	r3, [pc, #404]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 030c 	and.w	r3, r3, #12
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00b      	beq.n	800119e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001186:	4b62      	ldr	r3, [pc, #392]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800118e:	2b08      	cmp	r3, #8
 8001190:	d11c      	bne.n	80011cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001192:	4b5f      	ldr	r3, [pc, #380]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d116      	bne.n	80011cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119e:	4b5c      	ldr	r3, [pc, #368]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d005      	beq.n	80011b6 <HAL_RCC_OscConfig+0x152>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d001      	beq.n	80011b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e1c4      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b6:	4b56      	ldr	r3, [pc, #344]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4952      	ldr	r1, [pc, #328]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ca:	e03a      	b.n	8001242 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d020      	beq.n	8001216 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d4:	4b4f      	ldr	r3, [pc, #316]	; (8001314 <HAL_RCC_OscConfig+0x2b0>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011da:	f7ff fcaf 	bl	8000b3c <HAL_GetTick>
 80011de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e0:	e008      	b.n	80011f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e2:	f7ff fcab 	bl	8000b3c <HAL_GetTick>
 80011e6:	4602      	mov	r2, r0
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d901      	bls.n	80011f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011f0:	2303      	movs	r3, #3
 80011f2:	e1a5      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f4:	4b46      	ldr	r3, [pc, #280]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0302 	and.w	r3, r3, #2
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0f0      	beq.n	80011e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001200:	4b43      	ldr	r3, [pc, #268]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	4940      	ldr	r1, [pc, #256]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001210:	4313      	orrs	r3, r2
 8001212:	600b      	str	r3, [r1, #0]
 8001214:	e015      	b.n	8001242 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001216:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <HAL_RCC_OscConfig+0x2b0>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121c:	f7ff fc8e 	bl	8000b3c <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001224:	f7ff fc8a 	bl	8000b3c <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e184      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001236:	4b36      	ldr	r3, [pc, #216]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f0      	bne.n	8001224 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	2b00      	cmp	r3, #0
 800124c:	d030      	beq.n	80012b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d016      	beq.n	8001284 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001256:	4b30      	ldr	r3, [pc, #192]	; (8001318 <HAL_RCC_OscConfig+0x2b4>)
 8001258:	2201      	movs	r2, #1
 800125a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125c:	f7ff fc6e 	bl	8000b3c <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001264:	f7ff fc6a 	bl	8000b3c <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e164      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001276:	4b26      	ldr	r3, [pc, #152]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 8001278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0x200>
 8001282:	e015      	b.n	80012b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001284:	4b24      	ldr	r3, [pc, #144]	; (8001318 <HAL_RCC_OscConfig+0x2b4>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128a:	f7ff fc57 	bl	8000b3c <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001292:	f7ff fc53 	bl	8000b3c <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e14d      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80012a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f0      	bne.n	8001292 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80a0 	beq.w	80013fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c2:	4b13      	ldr	r3, [pc, #76]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10f      	bne.n	80012ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012dc:	6413      	str	r3, [r2, #64]	; 0x40
 80012de:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ea:	2301      	movs	r3, #1
 80012ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_RCC_OscConfig+0x2b8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d121      	bne.n	800133e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_RCC_OscConfig+0x2b8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a07      	ldr	r2, [pc, #28]	; (800131c <HAL_RCC_OscConfig+0x2b8>)
 8001300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001304:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001306:	f7ff fc19 	bl	8000b3c <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130c:	e011      	b.n	8001332 <HAL_RCC_OscConfig+0x2ce>
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	42470000 	.word	0x42470000
 8001318:	42470e80 	.word	0x42470e80
 800131c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001320:	f7ff fc0c 	bl	8000b3c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e106      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001332:	4b85      	ldr	r3, [pc, #532]	; (8001548 <HAL_RCC_OscConfig+0x4e4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d106      	bne.n	8001354 <HAL_RCC_OscConfig+0x2f0>
 8001346:	4b81      	ldr	r3, [pc, #516]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134a:	4a80      	ldr	r2, [pc, #512]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6713      	str	r3, [r2, #112]	; 0x70
 8001352:	e01c      	b.n	800138e <HAL_RCC_OscConfig+0x32a>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b05      	cmp	r3, #5
 800135a:	d10c      	bne.n	8001376 <HAL_RCC_OscConfig+0x312>
 800135c:	4b7b      	ldr	r3, [pc, #492]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800135e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001360:	4a7a      	ldr	r2, [pc, #488]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6713      	str	r3, [r2, #112]	; 0x70
 8001368:	4b78      	ldr	r3, [pc, #480]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800136a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136c:	4a77      	ldr	r2, [pc, #476]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6713      	str	r3, [r2, #112]	; 0x70
 8001374:	e00b      	b.n	800138e <HAL_RCC_OscConfig+0x32a>
 8001376:	4b75      	ldr	r3, [pc, #468]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137a:	4a74      	ldr	r2, [pc, #464]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800137c:	f023 0301 	bic.w	r3, r3, #1
 8001380:	6713      	str	r3, [r2, #112]	; 0x70
 8001382:	4b72      	ldr	r3, [pc, #456]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001386:	4a71      	ldr	r2, [pc, #452]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001388:	f023 0304 	bic.w	r3, r3, #4
 800138c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d015      	beq.n	80013c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001396:	f7ff fbd1 	bl	8000b3c <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139c:	e00a      	b.n	80013b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800139e:	f7ff fbcd 	bl	8000b3c <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e0c5      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b4:	4b65      	ldr	r3, [pc, #404]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80013b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0ee      	beq.n	800139e <HAL_RCC_OscConfig+0x33a>
 80013c0:	e014      	b.n	80013ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fbbb 	bl	8000b3c <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c8:	e00a      	b.n	80013e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ca:	f7ff fbb7 	bl	8000b3c <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d8:	4293      	cmp	r3, r2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e0af      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e0:	4b5a      	ldr	r3, [pc, #360]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80013e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1ee      	bne.n	80013ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d105      	bne.n	80013fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f2:	4b56      	ldr	r3, [pc, #344]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a55      	ldr	r2, [pc, #340]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80013f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 809b 	beq.w	800153e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001408:	4b50      	ldr	r3, [pc, #320]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 030c 	and.w	r3, r3, #12
 8001410:	2b08      	cmp	r3, #8
 8001412:	d05c      	beq.n	80014ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	2b02      	cmp	r3, #2
 800141a:	d141      	bne.n	80014a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141c:	4b4c      	ldr	r3, [pc, #304]	; (8001550 <HAL_RCC_OscConfig+0x4ec>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001422:	f7ff fb8b 	bl	8000b3c <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800142a:	f7ff fb87 	bl	8000b3c <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e081      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143c:	4b43      	ldr	r3, [pc, #268]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f0      	bne.n	800142a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69da      	ldr	r2, [r3, #28]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	019b      	lsls	r3, r3, #6
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145e:	085b      	lsrs	r3, r3, #1
 8001460:	3b01      	subs	r3, #1
 8001462:	041b      	lsls	r3, r3, #16
 8001464:	431a      	orrs	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146a:	061b      	lsls	r3, r3, #24
 800146c:	4937      	ldr	r1, [pc, #220]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 800146e:	4313      	orrs	r3, r2
 8001470:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001472:	4b37      	ldr	r3, [pc, #220]	; (8001550 <HAL_RCC_OscConfig+0x4ec>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fb60 	bl	8000b3c <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001480:	f7ff fb5c 	bl	8000b3c <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e056      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001492:	4b2e      	ldr	r3, [pc, #184]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x41c>
 800149e:	e04e      	b.n	800153e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a0:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <HAL_RCC_OscConfig+0x4ec>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a6:	f7ff fb49 	bl	8000b3c <HAL_GetTick>
 80014aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ac:	e008      	b.n	80014c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ae:	f7ff fb45 	bl	8000b3c <HAL_GetTick>
 80014b2:	4602      	mov	r2, r0
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d901      	bls.n	80014c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e03f      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c0:	4b22      	ldr	r3, [pc, #136]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f0      	bne.n	80014ae <HAL_RCC_OscConfig+0x44a>
 80014cc:	e037      	b.n	800153e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e032      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <HAL_RCC_OscConfig+0x4e8>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d028      	beq.n	800153a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d121      	bne.n	800153a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001500:	429a      	cmp	r2, r3
 8001502:	d11a      	bne.n	800153a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800150a:	4013      	ands	r3, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001510:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001512:	4293      	cmp	r3, r2
 8001514:	d111      	bne.n	800153a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	085b      	lsrs	r3, r3, #1
 8001522:	3b01      	subs	r3, #1
 8001524:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001526:	429a      	cmp	r2, r3
 8001528:	d107      	bne.n	800153a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001534:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001536:	429a      	cmp	r2, r3
 8001538:	d001      	beq.n	800153e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40007000 	.word	0x40007000
 800154c:	40023800 	.word	0x40023800
 8001550:	42470060 	.word	0x42470060

08001554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0cc      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001568:	4b68      	ldr	r3, [pc, #416]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d90c      	bls.n	8001590 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001576:	4b65      	ldr	r3, [pc, #404]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157e:	4b63      	ldr	r3, [pc, #396]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0b8      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d020      	beq.n	80015de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a8:	4b59      	ldr	r3, [pc, #356]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	4a58      	ldr	r2, [pc, #352]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c0:	4b53      	ldr	r3, [pc, #332]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	4a52      	ldr	r2, [pc, #328]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015cc:	4b50      	ldr	r3, [pc, #320]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	494d      	ldr	r1, [pc, #308]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d044      	beq.n	8001674 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b47      	ldr	r3, [pc, #284]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d119      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e07f      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d003      	beq.n	8001612 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160e:	2b03      	cmp	r3, #3
 8001610:	d107      	bne.n	8001622 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001612:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d109      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e06f      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001622:	4b3b      	ldr	r3, [pc, #236]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e067      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001632:	4b37      	ldr	r3, [pc, #220]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f023 0203 	bic.w	r2, r3, #3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4934      	ldr	r1, [pc, #208]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	4313      	orrs	r3, r2
 8001642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001644:	f7ff fa7a 	bl	8000b3c <HAL_GetTick>
 8001648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800164a:	e00a      	b.n	8001662 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800164c:	f7ff fa76 	bl	8000b3c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	f241 3288 	movw	r2, #5000	; 0x1388
 800165a:	4293      	cmp	r3, r2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e04f      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001662:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 020c 	and.w	r2, r3, #12
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	429a      	cmp	r2, r3
 8001672:	d1eb      	bne.n	800164c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001674:	4b25      	ldr	r3, [pc, #148]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0307 	and.w	r3, r3, #7
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d20c      	bcs.n	800169c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001682:	4b22      	ldr	r3, [pc, #136]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e032      	b.n	8001702 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4916      	ldr	r1, [pc, #88]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	490e      	ldr	r1, [pc, #56]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016da:	f000 f821 	bl	8001720 <HAL_RCC_GetSysClockFreq>
 80016de:	4601      	mov	r1, r0
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	5cd3      	ldrb	r3, [r2, r3]
 80016ee:	fa21 f303 	lsr.w	r3, r1, r3
 80016f2:	4a09      	ldr	r2, [pc, #36]	; (8001718 <HAL_RCC_ClockConfig+0x1c4>)
 80016f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_RCC_ClockConfig+0x1c8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff f90e 	bl	800091c <HAL_InitTick>

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40023c00 	.word	0x40023c00
 8001710:	40023800 	.word	0x40023800
 8001714:	0800521c 	.word	0x0800521c
 8001718:	20000000 	.word	0x20000000
 800171c:	20000004 	.word	0x20000004

08001720 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	607b      	str	r3, [r7, #4]
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	2300      	movs	r3, #0
 8001730:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001736:	4b50      	ldr	r3, [pc, #320]	; (8001878 <HAL_RCC_GetSysClockFreq+0x158>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b04      	cmp	r3, #4
 8001740:	d007      	beq.n	8001752 <HAL_RCC_GetSysClockFreq+0x32>
 8001742:	2b08      	cmp	r3, #8
 8001744:	d008      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x38>
 8001746:	2b00      	cmp	r3, #0
 8001748:	f040 808d 	bne.w	8001866 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800174c:	4b4b      	ldr	r3, [pc, #300]	; (800187c <HAL_RCC_GetSysClockFreq+0x15c>)
 800174e:	60bb      	str	r3, [r7, #8]
       break;
 8001750:	e08c      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001752:	4b4b      	ldr	r3, [pc, #300]	; (8001880 <HAL_RCC_GetSysClockFreq+0x160>)
 8001754:	60bb      	str	r3, [r7, #8]
      break;
 8001756:	e089      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001758:	4b47      	ldr	r3, [pc, #284]	; (8001878 <HAL_RCC_GetSysClockFreq+0x158>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001760:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001762:	4b45      	ldr	r3, [pc, #276]	; (8001878 <HAL_RCC_GetSysClockFreq+0x158>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d023      	beq.n	80017b6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800176e:	4b42      	ldr	r3, [pc, #264]	; (8001878 <HAL_RCC_GetSysClockFreq+0x158>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	099b      	lsrs	r3, r3, #6
 8001774:	f04f 0400 	mov.w	r4, #0
 8001778:	f240 11ff 	movw	r1, #511	; 0x1ff
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	ea03 0501 	and.w	r5, r3, r1
 8001784:	ea04 0602 	and.w	r6, r4, r2
 8001788:	4a3d      	ldr	r2, [pc, #244]	; (8001880 <HAL_RCC_GetSysClockFreq+0x160>)
 800178a:	fb02 f106 	mul.w	r1, r2, r6
 800178e:	2200      	movs	r2, #0
 8001790:	fb02 f205 	mul.w	r2, r2, r5
 8001794:	440a      	add	r2, r1
 8001796:	493a      	ldr	r1, [pc, #232]	; (8001880 <HAL_RCC_GetSysClockFreq+0x160>)
 8001798:	fba5 0101 	umull	r0, r1, r5, r1
 800179c:	1853      	adds	r3, r2, r1
 800179e:	4619      	mov	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f04f 0400 	mov.w	r4, #0
 80017a6:	461a      	mov	r2, r3
 80017a8:	4623      	mov	r3, r4
 80017aa:	f7fe fd19 	bl	80001e0 <__aeabi_uldivmod>
 80017ae:	4603      	mov	r3, r0
 80017b0:	460c      	mov	r4, r1
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e049      	b.n	800184a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b6:	4b30      	ldr	r3, [pc, #192]	; (8001878 <HAL_RCC_GetSysClockFreq+0x158>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	099b      	lsrs	r3, r3, #6
 80017bc:	f04f 0400 	mov.w	r4, #0
 80017c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	ea03 0501 	and.w	r5, r3, r1
 80017cc:	ea04 0602 	and.w	r6, r4, r2
 80017d0:	4629      	mov	r1, r5
 80017d2:	4632      	mov	r2, r6
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	f04f 0400 	mov.w	r4, #0
 80017dc:	0154      	lsls	r4, r2, #5
 80017de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017e2:	014b      	lsls	r3, r1, #5
 80017e4:	4619      	mov	r1, r3
 80017e6:	4622      	mov	r2, r4
 80017e8:	1b49      	subs	r1, r1, r5
 80017ea:	eb62 0206 	sbc.w	r2, r2, r6
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	f04f 0400 	mov.w	r4, #0
 80017f6:	0194      	lsls	r4, r2, #6
 80017f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80017fc:	018b      	lsls	r3, r1, #6
 80017fe:	1a5b      	subs	r3, r3, r1
 8001800:	eb64 0402 	sbc.w	r4, r4, r2
 8001804:	f04f 0100 	mov.w	r1, #0
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	00e2      	lsls	r2, r4, #3
 800180e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001812:	00d9      	lsls	r1, r3, #3
 8001814:	460b      	mov	r3, r1
 8001816:	4614      	mov	r4, r2
 8001818:	195b      	adds	r3, r3, r5
 800181a:	eb44 0406 	adc.w	r4, r4, r6
 800181e:	f04f 0100 	mov.w	r1, #0
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	02a2      	lsls	r2, r4, #10
 8001828:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800182c:	0299      	lsls	r1, r3, #10
 800182e:	460b      	mov	r3, r1
 8001830:	4614      	mov	r4, r2
 8001832:	4618      	mov	r0, r3
 8001834:	4621      	mov	r1, r4
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f04f 0400 	mov.w	r4, #0
 800183c:	461a      	mov	r2, r3
 800183e:	4623      	mov	r3, r4
 8001840:	f7fe fcce 	bl	80001e0 <__aeabi_uldivmod>
 8001844:	4603      	mov	r3, r0
 8001846:	460c      	mov	r4, r1
 8001848:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <HAL_RCC_GetSysClockFreq+0x158>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	0c1b      	lsrs	r3, r3, #16
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	3301      	adds	r3, #1
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001862:	60bb      	str	r3, [r7, #8]
      break;
 8001864:	e002      	b.n	800186c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001868:	60bb      	str	r3, [r7, #8]
      break;
 800186a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800186c:	68bb      	ldr	r3, [r7, #8]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	00f42400 	.word	0x00f42400
 8001880:	017d7840 	.word	0x017d7840

08001884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <HAL_RCC_GetHCLKFreq+0x14>)
 800188a:	681b      	ldr	r3, [r3, #0]
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000000 	.word	0x20000000

0800189c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018a0:	f7ff fff0 	bl	8001884 <HAL_RCC_GetHCLKFreq>
 80018a4:	4601      	mov	r1, r0
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	0b5b      	lsrs	r3, r3, #13
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	4a03      	ldr	r2, [pc, #12]	; (80018c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018b2:	5cd3      	ldrb	r3, [r2, r3]
 80018b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800
 80018c0:	0800522c 	.word	0x0800522c

080018c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	220f      	movs	r2, #15
 80018d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_RCC_GetClockConfig+0x5c>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 0203 	and.w	r2, r3, #3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_RCC_GetClockConfig+0x5c>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_RCC_GetClockConfig+0x5c>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_RCC_GetClockConfig+0x5c>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	08db      	lsrs	r3, r3, #3
 80018fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001906:	4b07      	ldr	r3, [pc, #28]	; (8001924 <HAL_RCC_GetClockConfig+0x60>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0207 	and.w	r2, r3, #7
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	601a      	str	r2, [r3, #0]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40023c00 	.word	0x40023c00

08001928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e041      	b.n	80019be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d106      	bne.n	8001954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f839 	bl	80019c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2202      	movs	r2, #2
 8001958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3304      	adds	r3, #4
 8001964:	4619      	mov	r1, r3
 8001966:	4610      	mov	r0, r2
 8001968:	f000 fadc 	bl	8001f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d001      	beq.n	80019f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e044      	b.n	8001a7e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2202      	movs	r2, #2
 80019f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a1e      	ldr	r2, [pc, #120]	; (8001a8c <HAL_TIM_Base_Start_IT+0xb0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d018      	beq.n	8001a48 <HAL_TIM_Base_Start_IT+0x6c>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1e:	d013      	beq.n	8001a48 <HAL_TIM_Base_Start_IT+0x6c>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a1a      	ldr	r2, [pc, #104]	; (8001a90 <HAL_TIM_Base_Start_IT+0xb4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d00e      	beq.n	8001a48 <HAL_TIM_Base_Start_IT+0x6c>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a19      	ldr	r2, [pc, #100]	; (8001a94 <HAL_TIM_Base_Start_IT+0xb8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d009      	beq.n	8001a48 <HAL_TIM_Base_Start_IT+0x6c>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <HAL_TIM_Base_Start_IT+0xbc>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d004      	beq.n	8001a48 <HAL_TIM_Base_Start_IT+0x6c>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a16      	ldr	r2, [pc, #88]	; (8001a9c <HAL_TIM_Base_Start_IT+0xc0>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d111      	bne.n	8001a6c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d010      	beq.n	8001a7c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 0201 	orr.w	r2, r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a6a:	e007      	b.n	8001a7c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	40000400 	.word	0x40000400
 8001a94:	40000800 	.word	0x40000800
 8001a98:	40000c00 	.word	0x40000c00
 8001a9c:	40014000 	.word	0x40014000

08001aa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e041      	b.n	8001b36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7fe fec6 	bl	8000858 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3304      	adds	r3, #4
 8001adc:	4619      	mov	r1, r3
 8001ade:	4610      	mov	r0, r2
 8001ae0:	f000 fa20 	bl	8001f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d122      	bne.n	8001b9a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d11b      	bne.n	8001b9a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f06f 0202 	mvn.w	r2, #2
 8001b6a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f9b1 	bl	8001ee8 <HAL_TIM_IC_CaptureCallback>
 8001b86:	e005      	b.n	8001b94 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f9a3 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 f9b4 	bl	8001efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d122      	bne.n	8001bee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d11b      	bne.n	8001bee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f06f 0204 	mvn.w	r2, #4
 8001bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f987 	bl	8001ee8 <HAL_TIM_IC_CaptureCallback>
 8001bda:	e005      	b.n	8001be8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f979 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f98a 	bl	8001efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d122      	bne.n	8001c42 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d11b      	bne.n	8001c42 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f06f 0208 	mvn.w	r2, #8
 8001c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2204      	movs	r2, #4
 8001c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d003      	beq.n	8001c30 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f95d 	bl	8001ee8 <HAL_TIM_IC_CaptureCallback>
 8001c2e:	e005      	b.n	8001c3c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f94f 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 f960 	bl	8001efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	f003 0310 	and.w	r3, r3, #16
 8001c4c:	2b10      	cmp	r3, #16
 8001c4e:	d122      	bne.n	8001c96 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f003 0310 	and.w	r3, r3, #16
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d11b      	bne.n	8001c96 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f06f 0210 	mvn.w	r2, #16
 8001c66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	69db      	ldr	r3, [r3, #28]
 8001c74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 f933 	bl	8001ee8 <HAL_TIM_IC_CaptureCallback>
 8001c82:	e005      	b.n	8001c90 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f925 	bl	8001ed4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f936 	bl	8001efc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d10e      	bne.n	8001cc2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d107      	bne.n	8001cc2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f06f 0201 	mvn.w	r2, #1
 8001cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f7fe fd89 	bl	80007d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ccc:	2b80      	cmp	r3, #128	; 0x80
 8001cce:	d10e      	bne.n	8001cee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cda:	2b80      	cmp	r3, #128	; 0x80
 8001cdc:	d107      	bne.n	8001cee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fbf1 	bl	80024d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf8:	2b40      	cmp	r3, #64	; 0x40
 8001cfa:	d10e      	bne.n	8001d1a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d06:	2b40      	cmp	r3, #64	; 0x40
 8001d08:	d107      	bne.n	8001d1a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f8fb 	bl	8001f10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	f003 0320 	and.w	r3, r3, #32
 8001d24:	2b20      	cmp	r3, #32
 8001d26:	d10e      	bne.n	8001d46 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f003 0320 	and.w	r3, r3, #32
 8001d32:	2b20      	cmp	r3, #32
 8001d34:	d107      	bne.n	8001d46 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f06f 0220 	mvn.w	r2, #32
 8001d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 fbbb 	bl	80024bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e0ae      	b.n	8001ecc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b0c      	cmp	r3, #12
 8001d7a:	f200 809f 	bhi.w	8001ebc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001d7e:	a201      	add	r2, pc, #4	; (adr r2, 8001d84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d84:	08001db9 	.word	0x08001db9
 8001d88:	08001ebd 	.word	0x08001ebd
 8001d8c:	08001ebd 	.word	0x08001ebd
 8001d90:	08001ebd 	.word	0x08001ebd
 8001d94:	08001df9 	.word	0x08001df9
 8001d98:	08001ebd 	.word	0x08001ebd
 8001d9c:	08001ebd 	.word	0x08001ebd
 8001da0:	08001ebd 	.word	0x08001ebd
 8001da4:	08001e3b 	.word	0x08001e3b
 8001da8:	08001ebd 	.word	0x08001ebd
 8001dac:	08001ebd 	.word	0x08001ebd
 8001db0:	08001ebd 	.word	0x08001ebd
 8001db4:	08001e7b 	.word	0x08001e7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 f930 	bl	8002024 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	699a      	ldr	r2, [r3, #24]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0208 	orr.w	r2, r2, #8
 8001dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699a      	ldr	r2, [r3, #24]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0204 	bic.w	r2, r2, #4
 8001de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6999      	ldr	r1, [r3, #24]
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	619a      	str	r2, [r3, #24]
      break;
 8001df6:	e064      	b.n	8001ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68b9      	ldr	r1, [r7, #8]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 f976 	bl	80020f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699a      	ldr	r2, [r3, #24]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699a      	ldr	r2, [r3, #24]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6999      	ldr	r1, [r3, #24]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	021a      	lsls	r2, r3, #8
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	619a      	str	r2, [r3, #24]
      break;
 8001e38:	e043      	b.n	8001ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68b9      	ldr	r1, [r7, #8]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 f9c1 	bl	80021c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	69da      	ldr	r2, [r3, #28]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f042 0208 	orr.w	r2, r2, #8
 8001e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	69da      	ldr	r2, [r3, #28]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0204 	bic.w	r2, r2, #4
 8001e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	69d9      	ldr	r1, [r3, #28]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	61da      	str	r2, [r3, #28]
      break;
 8001e78:	e023      	b.n	8001ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68b9      	ldr	r1, [r7, #8]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fa0b 	bl	800229c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	69da      	ldr	r2, [r3, #28]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	69da      	ldr	r2, [r3, #28]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69d9      	ldr	r1, [r3, #28]
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	021a      	lsls	r2, r3, #8
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	61da      	str	r2, [r3, #28]
      break;
 8001eba:	e002      	b.n	8001ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8001ec0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a34      	ldr	r2, [pc, #208]	; (8002008 <TIM_Base_SetConfig+0xe4>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d00f      	beq.n	8001f5c <TIM_Base_SetConfig+0x38>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f42:	d00b      	beq.n	8001f5c <TIM_Base_SetConfig+0x38>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a31      	ldr	r2, [pc, #196]	; (800200c <TIM_Base_SetConfig+0xe8>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d007      	beq.n	8001f5c <TIM_Base_SetConfig+0x38>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a30      	ldr	r2, [pc, #192]	; (8002010 <TIM_Base_SetConfig+0xec>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d003      	beq.n	8001f5c <TIM_Base_SetConfig+0x38>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a2f      	ldr	r2, [pc, #188]	; (8002014 <TIM_Base_SetConfig+0xf0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d108      	bne.n	8001f6e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a25      	ldr	r2, [pc, #148]	; (8002008 <TIM_Base_SetConfig+0xe4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01b      	beq.n	8001fae <TIM_Base_SetConfig+0x8a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f7c:	d017      	beq.n	8001fae <TIM_Base_SetConfig+0x8a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a22      	ldr	r2, [pc, #136]	; (800200c <TIM_Base_SetConfig+0xe8>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d013      	beq.n	8001fae <TIM_Base_SetConfig+0x8a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a21      	ldr	r2, [pc, #132]	; (8002010 <TIM_Base_SetConfig+0xec>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00f      	beq.n	8001fae <TIM_Base_SetConfig+0x8a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a20      	ldr	r2, [pc, #128]	; (8002014 <TIM_Base_SetConfig+0xf0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00b      	beq.n	8001fae <TIM_Base_SetConfig+0x8a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a1f      	ldr	r2, [pc, #124]	; (8002018 <TIM_Base_SetConfig+0xf4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d007      	beq.n	8001fae <TIM_Base_SetConfig+0x8a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a1e      	ldr	r2, [pc, #120]	; (800201c <TIM_Base_SetConfig+0xf8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d003      	beq.n	8001fae <TIM_Base_SetConfig+0x8a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a1d      	ldr	r2, [pc, #116]	; (8002020 <TIM_Base_SetConfig+0xfc>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d108      	bne.n	8001fc0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a08      	ldr	r2, [pc, #32]	; (8002008 <TIM_Base_SetConfig+0xe4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d103      	bne.n	8001ff4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	615a      	str	r2, [r3, #20]
}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40010000 	.word	0x40010000
 800200c:	40000400 	.word	0x40000400
 8002010:	40000800 	.word	0x40000800
 8002014:	40000c00 	.word	0x40000c00
 8002018:	40014000 	.word	0x40014000
 800201c:	40014400 	.word	0x40014400
 8002020:	40014800 	.word	0x40014800

08002024 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	f023 0201 	bic.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0303 	bic.w	r3, r3, #3
 800205a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f023 0302 	bic.w	r3, r3, #2
 800206c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	4313      	orrs	r3, r2
 8002076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a1c      	ldr	r2, [pc, #112]	; (80020ec <TIM_OC1_SetConfig+0xc8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d10c      	bne.n	800209a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f023 0308 	bic.w	r3, r3, #8
 8002086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	4313      	orrs	r3, r2
 8002090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f023 0304 	bic.w	r3, r3, #4
 8002098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a13      	ldr	r2, [pc, #76]	; (80020ec <TIM_OC1_SetConfig+0xc8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d111      	bne.n	80020c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	621a      	str	r2, [r3, #32]
}
 80020e0:	bf00      	nop
 80020e2:	371c      	adds	r7, #28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	40010000 	.word	0x40010000

080020f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b087      	sub	sp, #28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	f023 0210 	bic.w	r2, r3, #16
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800211e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	4313      	orrs	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f023 0320 	bic.w	r3, r3, #32
 800213a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4313      	orrs	r3, r2
 8002146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a1e      	ldr	r2, [pc, #120]	; (80021c4 <TIM_OC2_SetConfig+0xd4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d10d      	bne.n	800216c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	4313      	orrs	r3, r2
 8002162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800216a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a15      	ldr	r2, [pc, #84]	; (80021c4 <TIM_OC2_SetConfig+0xd4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d113      	bne.n	800219c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800217a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002182:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	621a      	str	r2, [r3, #32]
}
 80021b6:	bf00      	nop
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40010000 	.word	0x40010000

080021c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0303 	bic.w	r3, r3, #3
 80021fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a1d      	ldr	r2, [pc, #116]	; (8002298 <TIM_OC3_SetConfig+0xd0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d10d      	bne.n	8002242 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800222c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	021b      	lsls	r3, r3, #8
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	4313      	orrs	r3, r2
 8002238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a14      	ldr	r2, [pc, #80]	; (8002298 <TIM_OC3_SetConfig+0xd0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d113      	bne.n	8002272 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	621a      	str	r2, [r3, #32]
}
 800228c:	bf00      	nop
 800228e:	371c      	adds	r7, #28
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	40010000 	.word	0x40010000

0800229c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800229c:	b480      	push	{r7}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	031b      	lsls	r3, r3, #12
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a10      	ldr	r2, [pc, #64]	; (8002338 <TIM_OC4_SetConfig+0x9c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d109      	bne.n	8002310 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002302:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	019b      	lsls	r3, r3, #6
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4313      	orrs	r3, r2
 800230e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	621a      	str	r2, [r3, #32]
}
 800232a:	bf00      	nop
 800232c:	371c      	adds	r7, #28
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40010000 	.word	0x40010000

0800233c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800234c:	2b01      	cmp	r3, #1
 800234e:	d101      	bne.n	8002354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002350:	2302      	movs	r3, #2
 8002352:	e050      	b.n	80023f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	4313      	orrs	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d018      	beq.n	80023ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a0:	d013      	beq.n	80023ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a18      	ldr	r2, [pc, #96]	; (8002408 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d00e      	beq.n	80023ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a16      	ldr	r2, [pc, #88]	; (800240c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d009      	beq.n	80023ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a15      	ldr	r2, [pc, #84]	; (8002410 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d004      	beq.n	80023ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a13      	ldr	r2, [pc, #76]	; (8002414 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d10c      	bne.n	80023e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40010000 	.word	0x40010000
 8002408:	40000400 	.word	0x40000400
 800240c:	40000800 	.word	0x40000800
 8002410:	40000c00 	.word	0x40000c00
 8002414:	40014000 	.word	0x40014000

08002418 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002430:	2302      	movs	r3, #2
 8002432:	e03d      	b.n	80024b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	4313      	orrs	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4313      	orrs	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4313      	orrs	r3, r2
 8002472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	4313      	orrs	r3, r2
 8002480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	4313      	orrs	r3, r2
 800248e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <__NVIC_SetPriority>:
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	6039      	str	r1, [r7, #0]
 80024ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	db0a      	blt.n	800250e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	490c      	ldr	r1, [pc, #48]	; (8002530 <__NVIC_SetPriority+0x4c>)
 80024fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002502:	0112      	lsls	r2, r2, #4
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	440b      	add	r3, r1
 8002508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800250c:	e00a      	b.n	8002524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4908      	ldr	r1, [pc, #32]	; (8002534 <__NVIC_SetPriority+0x50>)
 8002514:	79fb      	ldrb	r3, [r7, #7]
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	3b04      	subs	r3, #4
 800251c:	0112      	lsls	r2, r2, #4
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	440b      	add	r3, r1
 8002522:	761a      	strb	r2, [r3, #24]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000e100 	.word	0xe000e100
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <SysTick_Handler+0x1c>)
 800253e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002540:	f001 fd04 	bl	8003f4c <xTaskGetSchedulerState>
 8002544:	4603      	mov	r3, r0
 8002546:	2b01      	cmp	r3, #1
 8002548:	d001      	beq.n	800254e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800254a:	f002 fad5 	bl	8004af8 <xPortSysTickHandler>
  }
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	e000e010 	.word	0xe000e010

08002558 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800255c:	2100      	movs	r1, #0
 800255e:	f06f 0004 	mvn.w	r0, #4
 8002562:	f7ff ffbf 	bl	80024e4 <__NVIC_SetPriority>
#endif
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002572:	f3ef 8305 	mrs	r3, IPSR
 8002576:	603b      	str	r3, [r7, #0]
  return(result);
 8002578:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800257e:	f06f 0305 	mvn.w	r3, #5
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	e00c      	b.n	80025a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <osKernelInitialize+0x44>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800258e:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <osKernelInitialize+0x44>)
 8002590:	2201      	movs	r2, #1
 8002592:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002594:	2300      	movs	r3, #0
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	e002      	b.n	80025a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800259a:	f04f 33ff 	mov.w	r3, #4294967295
 800259e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80025a0:	687b      	ldr	r3, [r7, #4]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000090 	.word	0x20000090

080025b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025ba:	f3ef 8305 	mrs	r3, IPSR
 80025be:	603b      	str	r3, [r7, #0]
  return(result);
 80025c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80025c6:	f06f 0305 	mvn.w	r3, #5
 80025ca:	607b      	str	r3, [r7, #4]
 80025cc:	e010      	b.n	80025f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <osKernelStart+0x48>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d109      	bne.n	80025ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80025d6:	f7ff ffbf 	bl	8002558 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <osKernelStart+0x48>)
 80025dc:	2202      	movs	r2, #2
 80025de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80025e0:	f001 f866 	bl	80036b0 <vTaskStartScheduler>
      stat = osOK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	e002      	b.n	80025f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80025f0:	687b      	ldr	r3, [r7, #4]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000090 	.word	0x20000090

08002600 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b08e      	sub	sp, #56	; 0x38
 8002604:	af04      	add	r7, sp, #16
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800260c:	2300      	movs	r3, #0
 800260e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002610:	f3ef 8305 	mrs	r3, IPSR
 8002614:	617b      	str	r3, [r7, #20]
  return(result);
 8002616:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002618:	2b00      	cmp	r3, #0
 800261a:	d17e      	bne.n	800271a <osThreadNew+0x11a>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d07b      	beq.n	800271a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002626:	2318      	movs	r3, #24
 8002628:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800262e:	f04f 33ff 	mov.w	r3, #4294967295
 8002632:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d045      	beq.n	80026c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <osThreadNew+0x48>
        name = attr->name;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <osThreadNew+0x6e>
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	2b38      	cmp	r3, #56	; 0x38
 8002660:	d805      	bhi.n	800266e <osThreadNew+0x6e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <osThreadNew+0x72>
        return (NULL);
 800266e:	2300      	movs	r3, #0
 8002670:	e054      	b.n	800271c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	089b      	lsrs	r3, r3, #2
 8002680:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00e      	beq.n	80026a8 <osThreadNew+0xa8>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2bbb      	cmp	r3, #187	; 0xbb
 8002690:	d90a      	bls.n	80026a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002696:	2b00      	cmp	r3, #0
 8002698:	d006      	beq.n	80026a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <osThreadNew+0xa8>
        mem = 1;
 80026a2:	2301      	movs	r3, #1
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	e010      	b.n	80026ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10c      	bne.n	80026ca <osThreadNew+0xca>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d108      	bne.n	80026ca <osThreadNew+0xca>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d104      	bne.n	80026ca <osThreadNew+0xca>
          mem = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	e001      	b.n	80026ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d110      	bne.n	80026f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026d8:	9202      	str	r2, [sp, #8]
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	6a3a      	ldr	r2, [r7, #32]
 80026e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fdf8 	bl	80032dc <xTaskCreateStatic>
 80026ec:	4603      	mov	r3, r0
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	e013      	b.n	800271a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d110      	bne.n	800271a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	f107 0310 	add.w	r3, r7, #16
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 fe40 	bl	8003390 <xTaskCreate>
 8002710:	4603      	mov	r3, r0
 8002712:	2b01      	cmp	r3, #1
 8002714:	d001      	beq.n	800271a <osThreadNew+0x11a>
            hTask = NULL;
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800271a:	693b      	ldr	r3, [r7, #16]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3728      	adds	r7, #40	; 0x28
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800272c:	f3ef 8305 	mrs	r3, IPSR
 8002730:	60bb      	str	r3, [r7, #8]
  return(result);
 8002732:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <osDelay+0x1c>
    stat = osErrorISR;
 8002738:	f06f 0305 	mvn.w	r3, #5
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	e007      	b.n	8002750 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <osDelay+0x2c>
      vTaskDelay(ticks);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 ff7c 	bl	8003648 <vTaskDelay>
    }
  }

  return (stat);
 8002750:	68fb      	ldr	r3, [r7, #12]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4a07      	ldr	r2, [pc, #28]	; (8002788 <vApplicationGetIdleTaskMemory+0x2c>)
 800276c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	4a06      	ldr	r2, [pc, #24]	; (800278c <vApplicationGetIdleTaskMemory+0x30>)
 8002772:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2280      	movs	r2, #128	; 0x80
 8002778:	601a      	str	r2, [r3, #0]
}
 800277a:	bf00      	nop
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000094 	.word	0x20000094
 800278c:	20000150 	.word	0x20000150

08002790 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4a07      	ldr	r2, [pc, #28]	; (80027bc <vApplicationGetTimerTaskMemory+0x2c>)
 80027a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	4a06      	ldr	r2, [pc, #24]	; (80027c0 <vApplicationGetTimerTaskMemory+0x30>)
 80027a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ae:	601a      	str	r2, [r3, #0]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	20000350 	.word	0x20000350
 80027c0:	2000040c 	.word	0x2000040c

080027c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f103 0208 	add.w	r2, r3, #8
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f04f 32ff 	mov.w	r2, #4294967295
 80027dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f103 0208 	add.w	r2, r3, #8
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f103 0208 	add.w	r2, r3, #8
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800281e:	b480      	push	{r7}
 8002820:	b085      	sub	sp, #20
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	601a      	str	r2, [r3, #0]
}
 800285a:	bf00      	nop
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002866:	b480      	push	{r7}
 8002868:	b085      	sub	sp, #20
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287c:	d103      	bne.n	8002886 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	e00c      	b.n	80028a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3308      	adds	r3, #8
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	e002      	b.n	8002894 <vListInsert+0x2e>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	429a      	cmp	r2, r3
 800289e:	d2f6      	bcs.n	800288e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	601a      	str	r2, [r3, #0]
}
 80028cc:	bf00      	nop
 80028ce:	3714      	adds	r7, #20
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6892      	ldr	r2, [r2, #8]
 80028ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6852      	ldr	r2, [r2, #4]
 80028f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	d103      	bne.n	800290c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	1e5a      	subs	r2, r3, #1
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d109      	bne.n	8002954 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002944:	f383 8811 	msr	BASEPRI, r3
 8002948:	f3bf 8f6f 	isb	sy
 800294c:	f3bf 8f4f 	dsb	sy
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	e7fe      	b.n	8002952 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002954:	f002 f842 	bl	80049dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002960:	68f9      	ldr	r1, [r7, #12]
 8002962:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	441a      	add	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002984:	3b01      	subs	r3, #1
 8002986:	68f9      	ldr	r1, [r7, #12]
 8002988:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800298a:	fb01 f303 	mul.w	r3, r1, r3
 800298e:	441a      	add	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	22ff      	movs	r2, #255	; 0xff
 8002998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	22ff      	movs	r2, #255	; 0xff
 80029a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d114      	bne.n	80029d4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01a      	beq.n	80029e8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	3310      	adds	r3, #16
 80029b6:	4618      	mov	r0, r3
 80029b8:	f001 f90c 	bl	8003bd4 <xTaskRemoveFromEventList>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d012      	beq.n	80029e8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80029c2:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <xQueueGenericReset+0xcc>)
 80029c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	e009      	b.n	80029e8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	3310      	adds	r3, #16
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fef3 	bl	80027c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3324      	adds	r3, #36	; 0x24
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff feee 	bl	80027c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80029e8:	f002 f826 	bl	8004a38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80029ec:	2301      	movs	r3, #1
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	e000ed04 	.word	0xe000ed04

080029fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08e      	sub	sp, #56	; 0x38
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d109      	bne.n	8002a24 <xQueueGenericCreateStatic+0x28>
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a22:	e7fe      	b.n	8002a22 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <xQueueGenericCreateStatic+0x42>
 8002a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2e:	f383 8811 	msr	BASEPRI, r3
 8002a32:	f3bf 8f6f 	isb	sy
 8002a36:	f3bf 8f4f 	dsb	sy
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3c:	e7fe      	b.n	8002a3c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <xQueueGenericCreateStatic+0x4e>
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <xQueueGenericCreateStatic+0x52>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <xQueueGenericCreateStatic+0x54>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d109      	bne.n	8002a68 <xQueueGenericCreateStatic+0x6c>
 8002a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a58:	f383 8811 	msr	BASEPRI, r3
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	623b      	str	r3, [r7, #32]
 8002a66:	e7fe      	b.n	8002a66 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d102      	bne.n	8002a74 <xQueueGenericCreateStatic+0x78>
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <xQueueGenericCreateStatic+0x7c>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <xQueueGenericCreateStatic+0x7e>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <xQueueGenericCreateStatic+0x96>
 8002a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a82:	f383 8811 	msr	BASEPRI, r3
 8002a86:	f3bf 8f6f 	isb	sy
 8002a8a:	f3bf 8f4f 	dsb	sy
 8002a8e:	61fb      	str	r3, [r7, #28]
 8002a90:	e7fe      	b.n	8002a90 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a92:	2350      	movs	r3, #80	; 0x50
 8002a94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b50      	cmp	r3, #80	; 0x50
 8002a9a:	d009      	beq.n	8002ab0 <xQueueGenericCreateStatic+0xb4>
 8002a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa0:	f383 8811 	msr	BASEPRI, r3
 8002aa4:	f3bf 8f6f 	isb	sy
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	e7fe      	b.n	8002aae <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ab0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00d      	beq.n	8002ad8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ac4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	4613      	mov	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f805 	bl	8002ae2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3730      	adds	r7, #48	; 0x30
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d103      	bne.n	8002afe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	e002      	b.n	8002b04 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b10:	2101      	movs	r1, #1
 8002b12:	69b8      	ldr	r0, [r7, #24]
 8002b14:	f7ff ff0a 	bl	800292c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08e      	sub	sp, #56	; 0x38
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b36:	2300      	movs	r3, #0
 8002b38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d109      	bne.n	8002b58 <xQueueGenericSend+0x30>
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b56:	e7fe      	b.n	8002b56 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d103      	bne.n	8002b66 <xQueueGenericSend+0x3e>
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <xQueueGenericSend+0x42>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <xQueueGenericSend+0x44>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d109      	bne.n	8002b84 <xQueueGenericSend+0x5c>
 8002b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
 8002b82:	e7fe      	b.n	8002b82 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d103      	bne.n	8002b92 <xQueueGenericSend+0x6a>
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <xQueueGenericSend+0x6e>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <xQueueGenericSend+0x70>
 8002b96:	2300      	movs	r3, #0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <xQueueGenericSend+0x88>
 8002b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba0:	f383 8811 	msr	BASEPRI, r3
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	623b      	str	r3, [r7, #32]
 8002bae:	e7fe      	b.n	8002bae <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bb0:	f001 f9cc 	bl	8003f4c <xTaskGetSchedulerState>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d102      	bne.n	8002bc0 <xQueueGenericSend+0x98>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <xQueueGenericSend+0x9c>
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <xQueueGenericSend+0x9e>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <xQueueGenericSend+0xb6>
 8002bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bce:	f383 8811 	msr	BASEPRI, r3
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	f3bf 8f4f 	dsb	sy
 8002bda:	61fb      	str	r3, [r7, #28]
 8002bdc:	e7fe      	b.n	8002bdc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bde:	f001 fefd 	bl	80049dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d302      	bcc.n	8002bf4 <xQueueGenericSend+0xcc>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d129      	bne.n	8002c48 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	68b9      	ldr	r1, [r7, #8]
 8002bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bfa:	f000 fa03 	bl	8003004 <prvCopyDataToQueue>
 8002bfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d010      	beq.n	8002c2a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c0a:	3324      	adds	r3, #36	; 0x24
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 ffe1 	bl	8003bd4 <xTaskRemoveFromEventList>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d013      	beq.n	8002c40 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c18:	4b3f      	ldr	r3, [pc, #252]	; (8002d18 <xQueueGenericSend+0x1f0>)
 8002c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	f3bf 8f6f 	isb	sy
 8002c28:	e00a      	b.n	8002c40 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d007      	beq.n	8002c40 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c30:	4b39      	ldr	r3, [pc, #228]	; (8002d18 <xQueueGenericSend+0x1f0>)
 8002c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c40:	f001 fefa 	bl	8004a38 <vPortExitCritical>
				return pdPASS;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e063      	b.n	8002d10 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d103      	bne.n	8002c56 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c4e:	f001 fef3 	bl	8004a38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	e05c      	b.n	8002d10 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d106      	bne.n	8002c6a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c5c:	f107 0314 	add.w	r3, r7, #20
 8002c60:	4618      	mov	r0, r3
 8002c62:	f001 f819 	bl	8003c98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c66:	2301      	movs	r3, #1
 8002c68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c6a:	f001 fee5 	bl	8004a38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c6e:	f000 fd8d 	bl	800378c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c72:	f001 feb3 	bl	80049dc <vPortEnterCritical>
 8002c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c7c:	b25b      	sxtb	r3, r3
 8002c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c82:	d103      	bne.n	8002c8c <xQueueGenericSend+0x164>
 8002c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c92:	b25b      	sxtb	r3, r3
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c98:	d103      	bne.n	8002ca2 <xQueueGenericSend+0x17a>
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ca2:	f001 fec9 	bl	8004a38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ca6:	1d3a      	adds	r2, r7, #4
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	4611      	mov	r1, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 f808 	bl	8003cc4 <xTaskCheckForTimeOut>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d124      	bne.n	8002d04 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002cba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cbc:	f000 fa9a 	bl	80031f4 <prvIsQueueFull>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d018      	beq.n	8002cf8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	3310      	adds	r3, #16
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 ff32 	bl	8003b38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cd6:	f000 fa25 	bl	8003124 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cda:	f000 fd65 	bl	80037a8 <xTaskResumeAll>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f47f af7c 	bne.w	8002bde <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002ce6:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <xQueueGenericSend+0x1f0>)
 8002ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	f3bf 8f6f 	isb	sy
 8002cf6:	e772      	b.n	8002bde <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cfa:	f000 fa13 	bl	8003124 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cfe:	f000 fd53 	bl	80037a8 <xTaskResumeAll>
 8002d02:	e76c      	b.n	8002bde <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d06:	f000 fa0d 	bl	8003124 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d0a:	f000 fd4d 	bl	80037a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3738      	adds	r7, #56	; 0x38
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	e000ed04 	.word	0xe000ed04

08002d1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b090      	sub	sp, #64	; 0x40
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]
 8002d28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d109      	bne.n	8002d48 <xQueueGenericSendFromISR+0x2c>
 8002d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d38:	f383 8811 	msr	BASEPRI, r3
 8002d3c:	f3bf 8f6f 	isb	sy
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d46:	e7fe      	b.n	8002d46 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d103      	bne.n	8002d56 <xQueueGenericSendFromISR+0x3a>
 8002d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <xQueueGenericSendFromISR+0x3e>
 8002d56:	2301      	movs	r3, #1
 8002d58:	e000      	b.n	8002d5c <xQueueGenericSendFromISR+0x40>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d109      	bne.n	8002d74 <xQueueGenericSendFromISR+0x58>
 8002d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
 8002d72:	e7fe      	b.n	8002d72 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d103      	bne.n	8002d82 <xQueueGenericSendFromISR+0x66>
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d101      	bne.n	8002d86 <xQueueGenericSendFromISR+0x6a>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e000      	b.n	8002d88 <xQueueGenericSendFromISR+0x6c>
 8002d86:	2300      	movs	r3, #0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <xQueueGenericSendFromISR+0x84>
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	623b      	str	r3, [r7, #32]
 8002d9e:	e7fe      	b.n	8002d9e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002da0:	f001 fef8 	bl	8004b94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002da4:	f3ef 8211 	mrs	r2, BASEPRI
 8002da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dac:	f383 8811 	msr	BASEPRI, r3
 8002db0:	f3bf 8f6f 	isb	sy
 8002db4:	f3bf 8f4f 	dsb	sy
 8002db8:	61fa      	str	r2, [r7, #28]
 8002dba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002dbc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002dbe:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d302      	bcc.n	8002dd2 <xQueueGenericSendFromISR+0xb6>
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d12f      	bne.n	8002e32 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002de8:	f000 f90c 	bl	8003004 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002dec:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d112      	bne.n	8002e1c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d016      	beq.n	8002e2c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e00:	3324      	adds	r3, #36	; 0x24
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fee6 	bl	8003bd4 <xTaskRemoveFromEventList>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00e      	beq.n	8002e2c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00b      	beq.n	8002e2c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e007      	b.n	8002e2c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e20:	3301      	adds	r3, #1
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	b25a      	sxtb	r2, r3
 8002e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002e30:	e001      	b.n	8002e36 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e38:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3740      	adds	r7, #64	; 0x40
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08c      	sub	sp, #48	; 0x30
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d109      	bne.n	8002e7a <xQueueReceive+0x2e>
	__asm volatile
 8002e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6a:	f383 8811 	msr	BASEPRI, r3
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	623b      	str	r3, [r7, #32]
 8002e78:	e7fe      	b.n	8002e78 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d103      	bne.n	8002e88 <xQueueReceive+0x3c>
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d101      	bne.n	8002e8c <xQueueReceive+0x40>
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <xQueueReceive+0x42>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <xQueueReceive+0x5a>
 8002e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e96:	f383 8811 	msr	BASEPRI, r3
 8002e9a:	f3bf 8f6f 	isb	sy
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	61fb      	str	r3, [r7, #28]
 8002ea4:	e7fe      	b.n	8002ea4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ea6:	f001 f851 	bl	8003f4c <xTaskGetSchedulerState>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d102      	bne.n	8002eb6 <xQueueReceive+0x6a>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <xQueueReceive+0x6e>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <xQueueReceive+0x70>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <xQueueReceive+0x88>
 8002ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	e7fe      	b.n	8002ed2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ed4:	f001 fd82 	bl	80049dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d01f      	beq.n	8002f24 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ee8:	f000 f8f6 	bl	80030d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	1e5a      	subs	r2, r3, #1
 8002ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00f      	beq.n	8002f1c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efe:	3310      	adds	r3, #16
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fe67 	bl	8003bd4 <xTaskRemoveFromEventList>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d007      	beq.n	8002f1c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f0c:	4b3c      	ldr	r3, [pc, #240]	; (8003000 <xQueueReceive+0x1b4>)
 8002f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f1c:	f001 fd8c 	bl	8004a38 <vPortExitCritical>
				return pdPASS;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e069      	b.n	8002ff8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f2a:	f001 fd85 	bl	8004a38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e062      	b.n	8002ff8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d106      	bne.n	8002f46 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f38:	f107 0310 	add.w	r3, r7, #16
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 feab 	bl	8003c98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f42:	2301      	movs	r3, #1
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f46:	f001 fd77 	bl	8004a38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f4a:	f000 fc1f 	bl	800378c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f4e:	f001 fd45 	bl	80049dc <vPortEnterCritical>
 8002f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f58:	b25b      	sxtb	r3, r3
 8002f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5e:	d103      	bne.n	8002f68 <xQueueReceive+0x11c>
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f6e:	b25b      	sxtb	r3, r3
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d103      	bne.n	8002f7e <xQueueReceive+0x132>
 8002f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f7e:	f001 fd5b 	bl	8004a38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f82:	1d3a      	adds	r2, r7, #4
 8002f84:	f107 0310 	add.w	r3, r7, #16
 8002f88:	4611      	mov	r1, r2
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fe9a 	bl	8003cc4 <xTaskCheckForTimeOut>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d123      	bne.n	8002fde <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f98:	f000 f916 	bl	80031c8 <prvIsQueueEmpty>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d017      	beq.n	8002fd2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa4:	3324      	adds	r3, #36	; 0x24
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fdc4 	bl	8003b38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fb2:	f000 f8b7 	bl	8003124 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fb6:	f000 fbf7 	bl	80037a8 <xTaskResumeAll>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d189      	bne.n	8002ed4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <xQueueReceive+0x1b4>)
 8002fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	f3bf 8f4f 	dsb	sy
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	e780      	b.n	8002ed4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fd4:	f000 f8a6 	bl	8003124 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fd8:	f000 fbe6 	bl	80037a8 <xTaskResumeAll>
 8002fdc:	e77a      	b.n	8002ed4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fe0:	f000 f8a0 	bl	8003124 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002fe4:	f000 fbe0 	bl	80037a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fea:	f000 f8ed 	bl	80031c8 <prvIsQueueEmpty>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f43f af6f 	beq.w	8002ed4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ff6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3730      	adds	r7, #48	; 0x30
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	e000ed04 	.word	0xe000ed04

08003004 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003018:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10d      	bne.n	800303e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d14d      	bne.n	80030c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	4618      	mov	r0, r3
 8003030:	f000 ffaa 	bl	8003f88 <xTaskPriorityDisinherit>
 8003034:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	e043      	b.n	80030c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d119      	bne.n	8003078 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6858      	ldr	r0, [r3, #4]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	461a      	mov	r2, r3
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	f001 ffe6 	bl	8005020 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	441a      	add	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	429a      	cmp	r2, r3
 800306c:	d32b      	bcc.n	80030c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	e026      	b.n	80030c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	68d8      	ldr	r0, [r3, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	461a      	mov	r2, r3
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	f001 ffcc 	bl	8005020 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	425b      	negs	r3, r3
 8003092:	441a      	add	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d207      	bcs.n	80030b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	425b      	negs	r3, r3
 80030ae:	441a      	add	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d105      	bne.n	80030c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80030ce:	697b      	ldr	r3, [r7, #20]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d018      	beq.n	800311c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68da      	ldr	r2, [r3, #12]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	441a      	add	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	429a      	cmp	r2, r3
 8003102:	d303      	bcc.n	800310c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68d9      	ldr	r1, [r3, #12]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	461a      	mov	r2, r3
 8003116:	6838      	ldr	r0, [r7, #0]
 8003118:	f001 ff82 	bl	8005020 <memcpy>
	}
}
 800311c:	bf00      	nop
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800312c:	f001 fc56 	bl	80049dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003136:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003138:	e011      	b.n	800315e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	2b00      	cmp	r3, #0
 8003140:	d012      	beq.n	8003168 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3324      	adds	r3, #36	; 0x24
 8003146:	4618      	mov	r0, r3
 8003148:	f000 fd44 	bl	8003bd4 <xTaskRemoveFromEventList>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003152:	f000 fe17 	bl	8003d84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	3b01      	subs	r3, #1
 800315a:	b2db      	uxtb	r3, r3
 800315c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800315e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003162:	2b00      	cmp	r3, #0
 8003164:	dce9      	bgt.n	800313a <prvUnlockQueue+0x16>
 8003166:	e000      	b.n	800316a <prvUnlockQueue+0x46>
					break;
 8003168:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	22ff      	movs	r2, #255	; 0xff
 800316e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003172:	f001 fc61 	bl	8004a38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003176:	f001 fc31 	bl	80049dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003180:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003182:	e011      	b.n	80031a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d012      	beq.n	80031b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3310      	adds	r3, #16
 8003190:	4618      	mov	r0, r3
 8003192:	f000 fd1f 	bl	8003bd4 <xTaskRemoveFromEventList>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800319c:	f000 fdf2 	bl	8003d84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80031a0:	7bbb      	ldrb	r3, [r7, #14]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	dce9      	bgt.n	8003184 <prvUnlockQueue+0x60>
 80031b0:	e000      	b.n	80031b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	22ff      	movs	r2, #255	; 0xff
 80031b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80031bc:	f001 fc3c 	bl	8004a38 <vPortExitCritical>
}
 80031c0:	bf00      	nop
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031d0:	f001 fc04 	bl	80049dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031dc:	2301      	movs	r3, #1
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	e001      	b.n	80031e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031e6:	f001 fc27 	bl	8004a38 <vPortExitCritical>

	return xReturn;
 80031ea:	68fb      	ldr	r3, [r7, #12]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031fc:	f001 fbee 	bl	80049dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003208:	429a      	cmp	r2, r3
 800320a:	d102      	bne.n	8003212 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800320c:	2301      	movs	r3, #1
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	e001      	b.n	8003216 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003216:	f001 fc0f 	bl	8004a38 <vPortExitCritical>

	return xReturn;
 800321a:	68fb      	ldr	r3, [r7, #12]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]
 8003232:	e014      	b.n	800325e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003234:	4a0e      	ldr	r2, [pc, #56]	; (8003270 <vQueueAddToRegistry+0x4c>)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10b      	bne.n	8003258 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003240:	490b      	ldr	r1, [pc, #44]	; (8003270 <vQueueAddToRegistry+0x4c>)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800324a:	4a09      	ldr	r2, [pc, #36]	; (8003270 <vQueueAddToRegistry+0x4c>)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	4413      	add	r3, r2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003256:	e005      	b.n	8003264 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3301      	adds	r3, #1
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b07      	cmp	r3, #7
 8003262:	d9e7      	bls.n	8003234 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	20004afc 	.word	0x20004afc

08003274 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003284:	f001 fbaa 	bl	80049dc <vPortEnterCritical>
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800328e:	b25b      	sxtb	r3, r3
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d103      	bne.n	800329e <vQueueWaitForMessageRestricted+0x2a>
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032a4:	b25b      	sxtb	r3, r3
 80032a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032aa:	d103      	bne.n	80032b4 <vQueueWaitForMessageRestricted+0x40>
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032b4:	f001 fbc0 	bl	8004a38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d106      	bne.n	80032ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	3324      	adds	r3, #36	; 0x24
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fc59 	bl	8003b80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80032ce:	6978      	ldr	r0, [r7, #20]
 80032d0:	f7ff ff28 	bl	8003124 <prvUnlockQueue>
	}
 80032d4:	bf00      	nop
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08e      	sub	sp, #56	; 0x38
 80032e0:	af04      	add	r7, sp, #16
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80032ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d109      	bne.n	8003304 <xTaskCreateStatic+0x28>
 80032f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	623b      	str	r3, [r7, #32]
 8003302:	e7fe      	b.n	8003302 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <xTaskCreateStatic+0x42>
 800330a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330e:	f383 8811 	msr	BASEPRI, r3
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	f3bf 8f4f 	dsb	sy
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	e7fe      	b.n	800331c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800331e:	23bc      	movs	r3, #188	; 0xbc
 8003320:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	2bbc      	cmp	r3, #188	; 0xbc
 8003326:	d009      	beq.n	800333c <xTaskCreateStatic+0x60>
 8003328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	e7fe      	b.n	800333a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800333c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800333e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01e      	beq.n	8003382 <xTaskCreateStatic+0xa6>
 8003344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01b      	beq.n	8003382 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800334a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003352:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	2202      	movs	r2, #2
 8003358:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800335c:	2300      	movs	r3, #0
 800335e:	9303      	str	r3, [sp, #12]
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	9302      	str	r3, [sp, #8]
 8003364:	f107 0314 	add.w	r3, r7, #20
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f851 	bl	800341c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800337a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800337c:	f000 f8f4 	bl	8003568 <prvAddNewTaskToReadyList>
 8003380:	e001      	b.n	8003386 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003386:	697b      	ldr	r3, [r7, #20]
	}
 8003388:	4618      	mov	r0, r3
 800338a:	3728      	adds	r7, #40	; 0x28
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08c      	sub	sp, #48	; 0x30
 8003394:	af04      	add	r7, sp, #16
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	4613      	mov	r3, r2
 800339e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f001 fc33 	bl	8004c10 <pvPortMalloc>
 80033aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00e      	beq.n	80033d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80033b2:	20bc      	movs	r0, #188	; 0xbc
 80033b4:	f001 fc2c 	bl	8004c10 <pvPortMalloc>
 80033b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
 80033c6:	e005      	b.n	80033d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80033c8:	6978      	ldr	r0, [r7, #20]
 80033ca:	f001 fce9 	bl	8004da0 <vPortFree>
 80033ce:	e001      	b.n	80033d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d017      	beq.n	800340a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80033e2:	88fa      	ldrh	r2, [r7, #6]
 80033e4:	2300      	movs	r3, #0
 80033e6:	9303      	str	r3, [sp, #12]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	9302      	str	r3, [sp, #8]
 80033ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ee:	9301      	str	r3, [sp, #4]
 80033f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f80f 	bl	800341c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033fe:	69f8      	ldr	r0, [r7, #28]
 8003400:	f000 f8b2 	bl	8003568 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003404:	2301      	movs	r3, #1
 8003406:	61bb      	str	r3, [r7, #24]
 8003408:	e002      	b.n	8003410 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800340a:	f04f 33ff 	mov.w	r3, #4294967295
 800340e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003410:	69bb      	ldr	r3, [r7, #24]
	}
 8003412:	4618      	mov	r0, r3
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	461a      	mov	r2, r3
 8003434:	21a5      	movs	r1, #165	; 0xa5
 8003436:	f001 fdfe 	bl	8005036 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800343a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003444:	3b01      	subs	r3, #1
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	f023 0307 	bic.w	r3, r3, #7
 8003452:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	2b00      	cmp	r3, #0
 800345c:	d009      	beq.n	8003472 <prvInitialiseNewTask+0x56>
 800345e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003462:	f383 8811 	msr	BASEPRI, r3
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	e7fe      	b.n	8003470 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d01f      	beq.n	80034b8 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003478:	2300      	movs	r3, #0
 800347a:	61fb      	str	r3, [r7, #28]
 800347c:	e012      	b.n	80034a4 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	4413      	add	r3, r2
 8003484:	7819      	ldrb	r1, [r3, #0]
 8003486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	4413      	add	r3, r2
 800348c:	3334      	adds	r3, #52	; 0x34
 800348e:	460a      	mov	r2, r1
 8003490:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003492:	68ba      	ldr	r2, [r7, #8]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	4413      	add	r3, r2
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d006      	beq.n	80034ac <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	3301      	adds	r3, #1
 80034a2:	61fb      	str	r3, [r7, #28]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	d9e9      	bls.n	800347e <prvInitialiseNewTask+0x62>
 80034aa:	e000      	b.n	80034ae <prvInitialiseNewTask+0x92>
			{
				break;
 80034ac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034b6:	e003      	b.n	80034c0 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	2b37      	cmp	r3, #55	; 0x37
 80034c4:	d901      	bls.n	80034ca <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80034c6:	2337      	movs	r3, #55	; 0x37
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034ce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	2200      	movs	r2, #0
 80034da:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	3304      	adds	r3, #4
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff f98f 	bl	8002804 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	3318      	adds	r3, #24
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff f98a 	bl	8002804 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80034fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003502:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003504:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	2200      	movs	r2, #0
 800350a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	2200      	movs	r2, #0
 8003512:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	3354      	adds	r3, #84	; 0x54
 800351a:	2260      	movs	r2, #96	; 0x60
 800351c:	2100      	movs	r1, #0
 800351e:	4618      	mov	r0, r3
 8003520:	f001 fd89 	bl	8005036 <memset>
 8003524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003526:	4a0d      	ldr	r2, [pc, #52]	; (800355c <prvInitialiseNewTask+0x140>)
 8003528:	659a      	str	r2, [r3, #88]	; 0x58
 800352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352c:	4a0c      	ldr	r2, [pc, #48]	; (8003560 <prvInitialiseNewTask+0x144>)
 800352e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003532:	4a0c      	ldr	r2, [pc, #48]	; (8003564 <prvInitialiseNewTask+0x148>)
 8003534:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	68f9      	ldr	r1, [r7, #12]
 800353a:	69b8      	ldr	r0, [r7, #24]
 800353c:	f001 f92a 	bl	8004794 <pxPortInitialiseStack>
 8003540:	4602      	mov	r2, r0
 8003542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003544:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <prvInitialiseNewTask+0x136>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003550:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003552:	bf00      	nop
 8003554:	3720      	adds	r7, #32
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	08005254 	.word	0x08005254
 8003560:	08005274 	.word	0x08005274
 8003564:	08005234 	.word	0x08005234

08003568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003570:	f001 fa34 	bl	80049dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003574:	4b2d      	ldr	r3, [pc, #180]	; (800362c <prvAddNewTaskToReadyList+0xc4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3301      	adds	r3, #1
 800357a:	4a2c      	ldr	r2, [pc, #176]	; (800362c <prvAddNewTaskToReadyList+0xc4>)
 800357c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800357e:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <prvAddNewTaskToReadyList+0xc8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003586:	4a2a      	ldr	r2, [pc, #168]	; (8003630 <prvAddNewTaskToReadyList+0xc8>)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800358c:	4b27      	ldr	r3, [pc, #156]	; (800362c <prvAddNewTaskToReadyList+0xc4>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d110      	bne.n	80035b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003594:	f000 fc1a 	bl	8003dcc <prvInitialiseTaskLists>
 8003598:	e00d      	b.n	80035b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800359a:	4b26      	ldr	r3, [pc, #152]	; (8003634 <prvAddNewTaskToReadyList+0xcc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80035a2:	4b23      	ldr	r3, [pc, #140]	; (8003630 <prvAddNewTaskToReadyList+0xc8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d802      	bhi.n	80035b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80035b0:	4a1f      	ldr	r2, [pc, #124]	; (8003630 <prvAddNewTaskToReadyList+0xc8>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80035b6:	4b20      	ldr	r3, [pc, #128]	; (8003638 <prvAddNewTaskToReadyList+0xd0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	3301      	adds	r3, #1
 80035bc:	4a1e      	ldr	r2, [pc, #120]	; (8003638 <prvAddNewTaskToReadyList+0xd0>)
 80035be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80035c0:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <prvAddNewTaskToReadyList+0xd0>)
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035cc:	4b1b      	ldr	r3, [pc, #108]	; (800363c <prvAddNewTaskToReadyList+0xd4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d903      	bls.n	80035dc <prvAddNewTaskToReadyList+0x74>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	4a18      	ldr	r2, [pc, #96]	; (800363c <prvAddNewTaskToReadyList+0xd4>)
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4a15      	ldr	r2, [pc, #84]	; (8003640 <prvAddNewTaskToReadyList+0xd8>)
 80035ea:	441a      	add	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3304      	adds	r3, #4
 80035f0:	4619      	mov	r1, r3
 80035f2:	4610      	mov	r0, r2
 80035f4:	f7ff f913 	bl	800281e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80035f8:	f001 fa1e 	bl	8004a38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80035fc:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <prvAddNewTaskToReadyList+0xcc>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00e      	beq.n	8003622 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003604:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <prvAddNewTaskToReadyList+0xc8>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	429a      	cmp	r2, r3
 8003610:	d207      	bcs.n	8003622 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003612:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <prvAddNewTaskToReadyList+0xdc>)
 8003614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000ce0 	.word	0x20000ce0
 8003630:	2000080c 	.word	0x2000080c
 8003634:	20000cec 	.word	0x20000cec
 8003638:	20000cfc 	.word	0x20000cfc
 800363c:	20000ce8 	.word	0x20000ce8
 8003640:	20000810 	.word	0x20000810
 8003644:	e000ed04 	.word	0xe000ed04

08003648 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003650:	2300      	movs	r3, #0
 8003652:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d016      	beq.n	8003688 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800365a:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <vTaskDelay+0x60>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <vTaskDelay+0x2e>
 8003662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003666:	f383 8811 	msr	BASEPRI, r3
 800366a:	f3bf 8f6f 	isb	sy
 800366e:	f3bf 8f4f 	dsb	sy
 8003672:	60bb      	str	r3, [r7, #8]
 8003674:	e7fe      	b.n	8003674 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003676:	f000 f889 	bl	800378c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800367a:	2100      	movs	r1, #0
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 fcef 	bl	8004060 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003682:	f000 f891 	bl	80037a8 <xTaskResumeAll>
 8003686:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d107      	bne.n	800369e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800368e:	4b07      	ldr	r3, [pc, #28]	; (80036ac <vTaskDelay+0x64>)
 8003690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800369e:	bf00      	nop
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000d08 	.word	0x20000d08
 80036ac:	e000ed04 	.word	0xe000ed04

080036b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08a      	sub	sp, #40	; 0x28
 80036b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80036be:	463a      	mov	r2, r7
 80036c0:	1d39      	adds	r1, r7, #4
 80036c2:	f107 0308 	add.w	r3, r7, #8
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff f848 	bl	800275c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80036cc:	6839      	ldr	r1, [r7, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	9202      	str	r2, [sp, #8]
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	2300      	movs	r3, #0
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	2300      	movs	r3, #0
 80036dc:	460a      	mov	r2, r1
 80036de:	4923      	ldr	r1, [pc, #140]	; (800376c <vTaskStartScheduler+0xbc>)
 80036e0:	4823      	ldr	r0, [pc, #140]	; (8003770 <vTaskStartScheduler+0xc0>)
 80036e2:	f7ff fdfb 	bl	80032dc <xTaskCreateStatic>
 80036e6:	4602      	mov	r2, r0
 80036e8:	4b22      	ldr	r3, [pc, #136]	; (8003774 <vTaskStartScheduler+0xc4>)
 80036ea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80036ec:	4b21      	ldr	r3, [pc, #132]	; (8003774 <vTaskStartScheduler+0xc4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80036f4:	2301      	movs	r3, #1
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	e001      	b.n	80036fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d102      	bne.n	800370a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003704:	f000 fd00 	bl	8004108 <xTimerCreateTimerTask>
 8003708:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d11a      	bne.n	8003746 <vTaskStartScheduler+0x96>
 8003710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	613b      	str	r3, [r7, #16]
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <vTaskStartScheduler+0xc8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3354      	adds	r3, #84	; 0x54
 8003728:	4a14      	ldr	r2, [pc, #80]	; (800377c <vTaskStartScheduler+0xcc>)
 800372a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800372c:	4b14      	ldr	r3, [pc, #80]	; (8003780 <vTaskStartScheduler+0xd0>)
 800372e:	f04f 32ff 	mov.w	r2, #4294967295
 8003732:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003734:	4b13      	ldr	r3, [pc, #76]	; (8003784 <vTaskStartScheduler+0xd4>)
 8003736:	2201      	movs	r2, #1
 8003738:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800373a:	4b13      	ldr	r3, [pc, #76]	; (8003788 <vTaskStartScheduler+0xd8>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003740:	f001 f8ae 	bl	80048a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003744:	e00d      	b.n	8003762 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374c:	d109      	bne.n	8003762 <vTaskStartScheduler+0xb2>
 800374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	e7fe      	b.n	8003760 <vTaskStartScheduler+0xb0>
}
 8003762:	bf00      	nop
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	080051e0 	.word	0x080051e0
 8003770:	08003d9d 	.word	0x08003d9d
 8003774:	20000d04 	.word	0x20000d04
 8003778:	2000080c 	.word	0x2000080c
 800377c:	20000010 	.word	0x20000010
 8003780:	20000d00 	.word	0x20000d00
 8003784:	20000cec 	.word	0x20000cec
 8003788:	20000ce4 	.word	0x20000ce4

0800378c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003790:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <vTaskSuspendAll+0x18>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3301      	adds	r3, #1
 8003796:	4a03      	ldr	r2, [pc, #12]	; (80037a4 <vTaskSuspendAll+0x18>)
 8003798:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800379a:	bf00      	nop
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	20000d08 	.word	0x20000d08

080037a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80037b2:	2300      	movs	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80037b6:	4b41      	ldr	r3, [pc, #260]	; (80038bc <xTaskResumeAll+0x114>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d109      	bne.n	80037d2 <xTaskResumeAll+0x2a>
 80037be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	e7fe      	b.n	80037d0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80037d2:	f001 f903 	bl	80049dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80037d6:	4b39      	ldr	r3, [pc, #228]	; (80038bc <xTaskResumeAll+0x114>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3b01      	subs	r3, #1
 80037dc:	4a37      	ldr	r2, [pc, #220]	; (80038bc <xTaskResumeAll+0x114>)
 80037de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037e0:	4b36      	ldr	r3, [pc, #216]	; (80038bc <xTaskResumeAll+0x114>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d162      	bne.n	80038ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037e8:	4b35      	ldr	r3, [pc, #212]	; (80038c0 <xTaskResumeAll+0x118>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d05e      	beq.n	80038ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037f0:	e02f      	b.n	8003852 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037f2:	4b34      	ldr	r3, [pc, #208]	; (80038c4 <xTaskResumeAll+0x11c>)
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3318      	adds	r3, #24
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff f86a 	bl	80028d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	3304      	adds	r3, #4
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff f865 	bl	80028d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003812:	4b2d      	ldr	r3, [pc, #180]	; (80038c8 <xTaskResumeAll+0x120>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d903      	bls.n	8003822 <xTaskResumeAll+0x7a>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	4a2a      	ldr	r2, [pc, #168]	; (80038c8 <xTaskResumeAll+0x120>)
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4a27      	ldr	r2, [pc, #156]	; (80038cc <xTaskResumeAll+0x124>)
 8003830:	441a      	add	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	3304      	adds	r3, #4
 8003836:	4619      	mov	r1, r3
 8003838:	4610      	mov	r0, r2
 800383a:	f7fe fff0 	bl	800281e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003842:	4b23      	ldr	r3, [pc, #140]	; (80038d0 <xTaskResumeAll+0x128>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003848:	429a      	cmp	r2, r3
 800384a:	d302      	bcc.n	8003852 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800384c:	4b21      	ldr	r3, [pc, #132]	; (80038d4 <xTaskResumeAll+0x12c>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003852:	4b1c      	ldr	r3, [pc, #112]	; (80038c4 <xTaskResumeAll+0x11c>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1cb      	bne.n	80037f2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003860:	f000 fb54 	bl	8003f0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003864:	4b1c      	ldr	r3, [pc, #112]	; (80038d8 <xTaskResumeAll+0x130>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d010      	beq.n	8003892 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003870:	f000 f846 	bl	8003900 <xTaskIncrementTick>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800387a:	4b16      	ldr	r3, [pc, #88]	; (80038d4 <xTaskResumeAll+0x12c>)
 800387c:	2201      	movs	r2, #1
 800387e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3b01      	subs	r3, #1
 8003884:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f1      	bne.n	8003870 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800388c:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <xTaskResumeAll+0x130>)
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003892:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <xTaskResumeAll+0x12c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800389a:	2301      	movs	r3, #1
 800389c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800389e:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <xTaskResumeAll+0x134>)
 80038a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038ae:	f001 f8c3 	bl	8004a38 <vPortExitCritical>

	return xAlreadyYielded;
 80038b2:	68bb      	ldr	r3, [r7, #8]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000d08 	.word	0x20000d08
 80038c0:	20000ce0 	.word	0x20000ce0
 80038c4:	20000ca0 	.word	0x20000ca0
 80038c8:	20000ce8 	.word	0x20000ce8
 80038cc:	20000810 	.word	0x20000810
 80038d0:	2000080c 	.word	0x2000080c
 80038d4:	20000cf4 	.word	0x20000cf4
 80038d8:	20000cf0 	.word	0x20000cf0
 80038dc:	e000ed04 	.word	0xe000ed04

080038e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80038e6:	4b05      	ldr	r3, [pc, #20]	; (80038fc <xTaskGetTickCount+0x1c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80038ec:	687b      	ldr	r3, [r7, #4]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000ce4 	.word	0x20000ce4

08003900 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800390a:	4b4e      	ldr	r3, [pc, #312]	; (8003a44 <xTaskIncrementTick+0x144>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	f040 808e 	bne.w	8003a30 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003914:	4b4c      	ldr	r3, [pc, #304]	; (8003a48 <xTaskIncrementTick+0x148>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3301      	adds	r3, #1
 800391a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800391c:	4a4a      	ldr	r2, [pc, #296]	; (8003a48 <xTaskIncrementTick+0x148>)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d11f      	bne.n	8003968 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003928:	4b48      	ldr	r3, [pc, #288]	; (8003a4c <xTaskIncrementTick+0x14c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d009      	beq.n	8003946 <xTaskIncrementTick+0x46>
 8003932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003936:	f383 8811 	msr	BASEPRI, r3
 800393a:	f3bf 8f6f 	isb	sy
 800393e:	f3bf 8f4f 	dsb	sy
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	e7fe      	b.n	8003944 <xTaskIncrementTick+0x44>
 8003946:	4b41      	ldr	r3, [pc, #260]	; (8003a4c <xTaskIncrementTick+0x14c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	4b40      	ldr	r3, [pc, #256]	; (8003a50 <xTaskIncrementTick+0x150>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a3e      	ldr	r2, [pc, #248]	; (8003a4c <xTaskIncrementTick+0x14c>)
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	4a3e      	ldr	r2, [pc, #248]	; (8003a50 <xTaskIncrementTick+0x150>)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	4b3e      	ldr	r3, [pc, #248]	; (8003a54 <xTaskIncrementTick+0x154>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3301      	adds	r3, #1
 8003960:	4a3c      	ldr	r2, [pc, #240]	; (8003a54 <xTaskIncrementTick+0x154>)
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	f000 fad2 	bl	8003f0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003968:	4b3b      	ldr	r3, [pc, #236]	; (8003a58 <xTaskIncrementTick+0x158>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	429a      	cmp	r2, r3
 8003970:	d349      	bcc.n	8003a06 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003972:	4b36      	ldr	r3, [pc, #216]	; (8003a4c <xTaskIncrementTick+0x14c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d104      	bne.n	8003986 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800397c:	4b36      	ldr	r3, [pc, #216]	; (8003a58 <xTaskIncrementTick+0x158>)
 800397e:	f04f 32ff 	mov.w	r2, #4294967295
 8003982:	601a      	str	r2, [r3, #0]
					break;
 8003984:	e03f      	b.n	8003a06 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003986:	4b31      	ldr	r3, [pc, #196]	; (8003a4c <xTaskIncrementTick+0x14c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	429a      	cmp	r2, r3
 800399c:	d203      	bcs.n	80039a6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800399e:	4a2e      	ldr	r2, [pc, #184]	; (8003a58 <xTaskIncrementTick+0x158>)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80039a4:	e02f      	b.n	8003a06 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	3304      	adds	r3, #4
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe ff94 	bl	80028d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d004      	beq.n	80039c2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	3318      	adds	r3, #24
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fe ff8b 	bl	80028d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c6:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <xTaskIncrementTick+0x15c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d903      	bls.n	80039d6 <xTaskIncrementTick+0xd6>
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	4a22      	ldr	r2, [pc, #136]	; (8003a5c <xTaskIncrementTick+0x15c>)
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4a1f      	ldr	r2, [pc, #124]	; (8003a60 <xTaskIncrementTick+0x160>)
 80039e4:	441a      	add	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	3304      	adds	r3, #4
 80039ea:	4619      	mov	r1, r3
 80039ec:	4610      	mov	r0, r2
 80039ee:	f7fe ff16 	bl	800281e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f6:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <xTaskIncrementTick+0x164>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d3b8      	bcc.n	8003972 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003a00:	2301      	movs	r3, #1
 8003a02:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a04:	e7b5      	b.n	8003972 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a06:	4b17      	ldr	r3, [pc, #92]	; (8003a64 <xTaskIncrementTick+0x164>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a0c:	4914      	ldr	r1, [pc, #80]	; (8003a60 <xTaskIncrementTick+0x160>)
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d901      	bls.n	8003a22 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003a22:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <xTaskIncrementTick+0x168>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d007      	beq.n	8003a3a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	e004      	b.n	8003a3a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003a30:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <xTaskIncrementTick+0x16c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3301      	adds	r3, #1
 8003a36:	4a0d      	ldr	r2, [pc, #52]	; (8003a6c <xTaskIncrementTick+0x16c>)
 8003a38:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003a3a:	697b      	ldr	r3, [r7, #20]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000d08 	.word	0x20000d08
 8003a48:	20000ce4 	.word	0x20000ce4
 8003a4c:	20000c98 	.word	0x20000c98
 8003a50:	20000c9c 	.word	0x20000c9c
 8003a54:	20000cf8 	.word	0x20000cf8
 8003a58:	20000d00 	.word	0x20000d00
 8003a5c:	20000ce8 	.word	0x20000ce8
 8003a60:	20000810 	.word	0x20000810
 8003a64:	2000080c 	.word	0x2000080c
 8003a68:	20000cf4 	.word	0x20000cf4
 8003a6c:	20000cf0 	.word	0x20000cf0

08003a70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a76:	4b2a      	ldr	r3, [pc, #168]	; (8003b20 <vTaskSwitchContext+0xb0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a7e:	4b29      	ldr	r3, [pc, #164]	; (8003b24 <vTaskSwitchContext+0xb4>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a84:	e045      	b.n	8003b12 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8003a86:	4b27      	ldr	r3, [pc, #156]	; (8003b24 <vTaskSwitchContext+0xb4>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a8c:	4b26      	ldr	r3, [pc, #152]	; (8003b28 <vTaskSwitchContext+0xb8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	e00f      	b.n	8003ab4 <vTaskSwitchContext+0x44>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <vTaskSwitchContext+0x3e>
 8003a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	607b      	str	r3, [r7, #4]
 8003aac:	e7fe      	b.n	8003aac <vTaskSwitchContext+0x3c>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	60fb      	str	r3, [r7, #12]
 8003ab4:	491d      	ldr	r1, [pc, #116]	; (8003b2c <vTaskSwitchContext+0xbc>)
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0e5      	beq.n	8003a94 <vTaskSwitchContext+0x24>
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <vTaskSwitchContext+0xbc>)
 8003ad4:	4413      	add	r3, r2
 8003ad6:	60bb      	str	r3, [r7, #8]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	605a      	str	r2, [r3, #4]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	3308      	adds	r3, #8
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d104      	bne.n	8003af8 <vTaskSwitchContext+0x88>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	605a      	str	r2, [r3, #4]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	4a0c      	ldr	r2, [pc, #48]	; (8003b30 <vTaskSwitchContext+0xc0>)
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	4a09      	ldr	r2, [pc, #36]	; (8003b28 <vTaskSwitchContext+0xb8>)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b08:	4b09      	ldr	r3, [pc, #36]	; (8003b30 <vTaskSwitchContext+0xc0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3354      	adds	r3, #84	; 0x54
 8003b0e:	4a09      	ldr	r2, [pc, #36]	; (8003b34 <vTaskSwitchContext+0xc4>)
 8003b10:	6013      	str	r3, [r2, #0]
}
 8003b12:	bf00      	nop
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20000d08 	.word	0x20000d08
 8003b24:	20000cf4 	.word	0x20000cf4
 8003b28:	20000ce8 	.word	0x20000ce8
 8003b2c:	20000810 	.word	0x20000810
 8003b30:	2000080c 	.word	0x2000080c
 8003b34:	20000010 	.word	0x20000010

08003b38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d109      	bne.n	8003b5c <vTaskPlaceOnEventList+0x24>
 8003b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	60fb      	str	r3, [r7, #12]
 8003b5a:	e7fe      	b.n	8003b5a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b5c:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <vTaskPlaceOnEventList+0x44>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	3318      	adds	r3, #24
 8003b62:	4619      	mov	r1, r3
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7fe fe7e 	bl	8002866 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	6838      	ldr	r0, [r7, #0]
 8003b6e:	f000 fa77 	bl	8004060 <prvAddCurrentTaskToDelayedList>
}
 8003b72:	bf00      	nop
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	2000080c 	.word	0x2000080c

08003b80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <vTaskPlaceOnEventListRestricted+0x26>
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	e7fe      	b.n	8003ba4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <vTaskPlaceOnEventListRestricted+0x50>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3318      	adds	r3, #24
 8003bac:	4619      	mov	r1, r3
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7fe fe35 	bl	800281e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003bba:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	68b8      	ldr	r0, [r7, #8]
 8003bc4:	f000 fa4c 	bl	8004060 <prvAddCurrentTaskToDelayedList>
	}
 8003bc8:	bf00      	nop
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	2000080c 	.word	0x2000080c

08003bd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <xTaskRemoveFromEventList+0x2a>
 8003bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	e7fe      	b.n	8003bfc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	3318      	adds	r3, #24
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fe fe68 	bl	80028d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c08:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <xTaskRemoveFromEventList+0xac>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d11d      	bne.n	8003c4c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	3304      	adds	r3, #4
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fe fe5f 	bl	80028d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1e:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <xTaskRemoveFromEventList+0xb0>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d903      	bls.n	8003c2e <xTaskRemoveFromEventList+0x5a>
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	4a16      	ldr	r2, [pc, #88]	; (8003c84 <xTaskRemoveFromEventList+0xb0>)
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4a13      	ldr	r2, [pc, #76]	; (8003c88 <xTaskRemoveFromEventList+0xb4>)
 8003c3c:	441a      	add	r2, r3
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	3304      	adds	r3, #4
 8003c42:	4619      	mov	r1, r3
 8003c44:	4610      	mov	r0, r2
 8003c46:	f7fe fdea 	bl	800281e <vListInsertEnd>
 8003c4a:	e005      	b.n	8003c58 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	3318      	adds	r3, #24
 8003c50:	4619      	mov	r1, r3
 8003c52:	480e      	ldr	r0, [pc, #56]	; (8003c8c <xTaskRemoveFromEventList+0xb8>)
 8003c54:	f7fe fde3 	bl	800281e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5c:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <xTaskRemoveFromEventList+0xbc>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d905      	bls.n	8003c72 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c66:	2301      	movs	r3, #1
 8003c68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c6a:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <xTaskRemoveFromEventList+0xc0>)
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	e001      	b.n	8003c76 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c76:	697b      	ldr	r3, [r7, #20]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	20000d08 	.word	0x20000d08
 8003c84:	20000ce8 	.word	0x20000ce8
 8003c88:	20000810 	.word	0x20000810
 8003c8c:	20000ca0 	.word	0x20000ca0
 8003c90:	2000080c 	.word	0x2000080c
 8003c94:	20000cf4 	.word	0x20000cf4

08003c98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ca0:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <vTaskInternalSetTimeOutState+0x24>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <vTaskInternalSetTimeOutState+0x28>)
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	605a      	str	r2, [r3, #4]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	20000cf8 	.word	0x20000cf8
 8003cc0:	20000ce4 	.word	0x20000ce4

08003cc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d109      	bne.n	8003ce8 <xTaskCheckForTimeOut+0x24>
 8003cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	e7fe      	b.n	8003ce6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <xTaskCheckForTimeOut+0x3e>
 8003cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	e7fe      	b.n	8003d00 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003d02:	f000 fe6b 	bl	80049dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d06:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <xTaskCheckForTimeOut+0xb8>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1e:	d102      	bne.n	8003d26 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d20:	2300      	movs	r3, #0
 8003d22:	61fb      	str	r3, [r7, #28]
 8003d24:	e023      	b.n	8003d6e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <xTaskCheckForTimeOut+0xbc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d007      	beq.n	8003d42 <xTaskCheckForTimeOut+0x7e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d302      	bcc.n	8003d42 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	61fb      	str	r3, [r7, #28]
 8003d40:	e015      	b.n	8003d6e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d20b      	bcs.n	8003d64 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	1ad2      	subs	r2, r2, r3
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff ff9d 	bl	8003c98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	e004      	b.n	8003d6e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d6e:	f000 fe63 	bl	8004a38 <vPortExitCritical>

	return xReturn;
 8003d72:	69fb      	ldr	r3, [r7, #28]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3720      	adds	r7, #32
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	20000ce4 	.word	0x20000ce4
 8003d80:	20000cf8 	.word	0x20000cf8

08003d84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d84:	b480      	push	{r7}
 8003d86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d88:	4b03      	ldr	r3, [pc, #12]	; (8003d98 <vTaskMissedYield+0x14>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
}
 8003d8e:	bf00      	nop
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	20000cf4 	.word	0x20000cf4

08003d9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003da4:	f000 f852 	bl	8003e4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003da8:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <prvIdleTask+0x28>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d9f9      	bls.n	8003da4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <prvIdleTask+0x2c>)
 8003db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	f3bf 8f4f 	dsb	sy
 8003dbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003dc0:	e7f0      	b.n	8003da4 <prvIdleTask+0x8>
 8003dc2:	bf00      	nop
 8003dc4:	20000810 	.word	0x20000810
 8003dc8:	e000ed04 	.word	0xe000ed04

08003dcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	607b      	str	r3, [r7, #4]
 8003dd6:	e00c      	b.n	8003df2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4a12      	ldr	r2, [pc, #72]	; (8003e2c <prvInitialiseTaskLists+0x60>)
 8003de4:	4413      	add	r3, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fe fcec 	bl	80027c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	3301      	adds	r3, #1
 8003df0:	607b      	str	r3, [r7, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b37      	cmp	r3, #55	; 0x37
 8003df6:	d9ef      	bls.n	8003dd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003df8:	480d      	ldr	r0, [pc, #52]	; (8003e30 <prvInitialiseTaskLists+0x64>)
 8003dfa:	f7fe fce3 	bl	80027c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dfe:	480d      	ldr	r0, [pc, #52]	; (8003e34 <prvInitialiseTaskLists+0x68>)
 8003e00:	f7fe fce0 	bl	80027c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e04:	480c      	ldr	r0, [pc, #48]	; (8003e38 <prvInitialiseTaskLists+0x6c>)
 8003e06:	f7fe fcdd 	bl	80027c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e0a:	480c      	ldr	r0, [pc, #48]	; (8003e3c <prvInitialiseTaskLists+0x70>)
 8003e0c:	f7fe fcda 	bl	80027c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e10:	480b      	ldr	r0, [pc, #44]	; (8003e40 <prvInitialiseTaskLists+0x74>)
 8003e12:	f7fe fcd7 	bl	80027c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e16:	4b0b      	ldr	r3, [pc, #44]	; (8003e44 <prvInitialiseTaskLists+0x78>)
 8003e18:	4a05      	ldr	r2, [pc, #20]	; (8003e30 <prvInitialiseTaskLists+0x64>)
 8003e1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e1c:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <prvInitialiseTaskLists+0x7c>)
 8003e1e:	4a05      	ldr	r2, [pc, #20]	; (8003e34 <prvInitialiseTaskLists+0x68>)
 8003e20:	601a      	str	r2, [r3, #0]
}
 8003e22:	bf00      	nop
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	20000810 	.word	0x20000810
 8003e30:	20000c70 	.word	0x20000c70
 8003e34:	20000c84 	.word	0x20000c84
 8003e38:	20000ca0 	.word	0x20000ca0
 8003e3c:	20000cb4 	.word	0x20000cb4
 8003e40:	20000ccc 	.word	0x20000ccc
 8003e44:	20000c98 	.word	0x20000c98
 8003e48:	20000c9c 	.word	0x20000c9c

08003e4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e52:	e019      	b.n	8003e88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e54:	f000 fdc2 	bl	80049dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e58:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <prvCheckTasksWaitingTermination+0x4c>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3304      	adds	r3, #4
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fe fd37 	bl	80028d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <prvCheckTasksWaitingTermination+0x50>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <prvCheckTasksWaitingTermination+0x50>)
 8003e72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e74:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <prvCheckTasksWaitingTermination+0x54>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <prvCheckTasksWaitingTermination+0x54>)
 8003e7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e7e:	f000 fddb 	bl	8004a38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f80e 	bl	8003ea4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e88:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <prvCheckTasksWaitingTermination+0x54>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e1      	bne.n	8003e54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	20000cb4 	.word	0x20000cb4
 8003e9c:	20000ce0 	.word	0x20000ce0
 8003ea0:	20000cc8 	.word	0x20000cc8

08003ea4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3354      	adds	r3, #84	; 0x54
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f001 f8d5 	bl	8005060 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d108      	bne.n	8003ed2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 ff6b 	bl	8004da0 <vPortFree>
				vPortFree( pxTCB );
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 ff68 	bl	8004da0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ed0:	e017      	b.n	8003f02 <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d103      	bne.n	8003ee4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 ff5f 	bl	8004da0 <vPortFree>
	}
 8003ee2:	e00e      	b.n	8003f02 <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d009      	beq.n	8003f02 <prvDeleteTCB+0x5e>
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	e7fe      	b.n	8003f00 <prvDeleteTCB+0x5c>
	}
 8003f02:	bf00      	nop
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f12:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <prvResetNextTaskUnblockTime+0x38>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d104      	bne.n	8003f26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f1c:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <prvResetNextTaskUnblockTime+0x3c>)
 8003f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f24:	e008      	b.n	8003f38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f26:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <prvResetNextTaskUnblockTime+0x38>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <prvResetNextTaskUnblockTime+0x3c>)
 8003f36:	6013      	str	r3, [r2, #0]
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	20000c98 	.word	0x20000c98
 8003f48:	20000d00 	.word	0x20000d00

08003f4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003f52:	4b0b      	ldr	r3, [pc, #44]	; (8003f80 <xTaskGetSchedulerState+0x34>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d102      	bne.n	8003f60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	607b      	str	r3, [r7, #4]
 8003f5e:	e008      	b.n	8003f72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f60:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <xTaskGetSchedulerState+0x38>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d102      	bne.n	8003f6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f68:	2302      	movs	r3, #2
 8003f6a:	607b      	str	r3, [r7, #4]
 8003f6c:	e001      	b.n	8003f72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f72:	687b      	ldr	r3, [r7, #4]
	}
 8003f74:	4618      	mov	r0, r3
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	20000cec 	.word	0x20000cec
 8003f84:	20000d08 	.word	0x20000d08

08003f88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d054      	beq.n	8004048 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003f9e:	4b2d      	ldr	r3, [pc, #180]	; (8004054 <xTaskPriorityDisinherit+0xcc>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d009      	beq.n	8003fbc <xTaskPriorityDisinherit+0x34>
 8003fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fac:	f383 8811 	msr	BASEPRI, r3
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	f3bf 8f4f 	dsb	sy
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	e7fe      	b.n	8003fba <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d109      	bne.n	8003fd8 <xTaskPriorityDisinherit+0x50>
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	60bb      	str	r3, [r7, #8]
 8003fd6:	e7fe      	b.n	8003fd6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fdc:	1e5a      	subs	r2, r3, #1
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d02c      	beq.n	8004048 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d128      	bne.n	8004048 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe fc6c 	bl	80028d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004018:	4b0f      	ldr	r3, [pc, #60]	; (8004058 <xTaskPriorityDisinherit+0xd0>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d903      	bls.n	8004028 <xTaskPriorityDisinherit+0xa0>
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	4a0c      	ldr	r2, [pc, #48]	; (8004058 <xTaskPriorityDisinherit+0xd0>)
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4a09      	ldr	r2, [pc, #36]	; (800405c <xTaskPriorityDisinherit+0xd4>)
 8004036:	441a      	add	r2, r3
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	3304      	adds	r3, #4
 800403c:	4619      	mov	r1, r3
 800403e:	4610      	mov	r0, r2
 8004040:	f7fe fbed 	bl	800281e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004044:	2301      	movs	r3, #1
 8004046:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004048:	697b      	ldr	r3, [r7, #20]
	}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	2000080c 	.word	0x2000080c
 8004058:	20000ce8 	.word	0x20000ce8
 800405c:	20000810 	.word	0x20000810

08004060 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800406a:	4b21      	ldr	r3, [pc, #132]	; (80040f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004070:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3304      	adds	r3, #4
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe fc2e 	bl	80028d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004082:	d10a      	bne.n	800409a <prvAddCurrentTaskToDelayedList+0x3a>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800408a:	4b1a      	ldr	r3, [pc, #104]	; (80040f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3304      	adds	r3, #4
 8004090:	4619      	mov	r1, r3
 8004092:	4819      	ldr	r0, [pc, #100]	; (80040f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004094:	f7fe fbc3 	bl	800281e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004098:	e026      	b.n	80040e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4413      	add	r3, r2
 80040a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80040a2:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d209      	bcs.n	80040c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040b2:	4b12      	ldr	r3, [pc, #72]	; (80040fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3304      	adds	r3, #4
 80040bc:	4619      	mov	r1, r3
 80040be:	4610      	mov	r0, r2
 80040c0:	f7fe fbd1 	bl	8002866 <vListInsert>
}
 80040c4:	e010      	b.n	80040e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80040c6:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <prvAddCurrentTaskToDelayedList+0xa0>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4619      	mov	r1, r3
 80040d2:	4610      	mov	r0, r2
 80040d4:	f7fe fbc7 	bl	8002866 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80040d8:	4b0a      	ldr	r3, [pc, #40]	; (8004104 <prvAddCurrentTaskToDelayedList+0xa4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d202      	bcs.n	80040e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80040e2:	4a08      	ldr	r2, [pc, #32]	; (8004104 <prvAddCurrentTaskToDelayedList+0xa4>)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	6013      	str	r3, [r2, #0]
}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20000ce4 	.word	0x20000ce4
 80040f4:	2000080c 	.word	0x2000080c
 80040f8:	20000ccc 	.word	0x20000ccc
 80040fc:	20000c9c 	.word	0x20000c9c
 8004100:	20000c98 	.word	0x20000c98
 8004104:	20000d00 	.word	0x20000d00

08004108 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08a      	sub	sp, #40	; 0x28
 800410c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004112:	f000 faff 	bl	8004714 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004116:	4b1c      	ldr	r3, [pc, #112]	; (8004188 <xTimerCreateTimerTask+0x80>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d021      	beq.n	8004162 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004122:	2300      	movs	r3, #0
 8004124:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004126:	1d3a      	adds	r2, r7, #4
 8004128:	f107 0108 	add.w	r1, r7, #8
 800412c:	f107 030c 	add.w	r3, r7, #12
 8004130:	4618      	mov	r0, r3
 8004132:	f7fe fb2d 	bl	8002790 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004136:	6879      	ldr	r1, [r7, #4]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	9202      	str	r2, [sp, #8]
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	2302      	movs	r3, #2
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	2300      	movs	r3, #0
 8004146:	460a      	mov	r2, r1
 8004148:	4910      	ldr	r1, [pc, #64]	; (800418c <xTimerCreateTimerTask+0x84>)
 800414a:	4811      	ldr	r0, [pc, #68]	; (8004190 <xTimerCreateTimerTask+0x88>)
 800414c:	f7ff f8c6 	bl	80032dc <xTaskCreateStatic>
 8004150:	4602      	mov	r2, r0
 8004152:	4b10      	ldr	r3, [pc, #64]	; (8004194 <xTimerCreateTimerTask+0x8c>)
 8004154:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004156:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <xTimerCreateTimerTask+0x8c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800415e:	2301      	movs	r3, #1
 8004160:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d109      	bne.n	800417c <xTimerCreateTimerTask+0x74>
 8004168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	e7fe      	b.n	800417a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800417c:	697b      	ldr	r3, [r7, #20]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20000d3c 	.word	0x20000d3c
 800418c:	080051e8 	.word	0x080051e8
 8004190:	080042c9 	.word	0x080042c9
 8004194:	20000d40 	.word	0x20000d40

08004198 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d109      	bne.n	80041c4 <xTimerGenericCommand+0x2c>
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	623b      	str	r3, [r7, #32]
 80041c2:	e7fe      	b.n	80041c2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80041c4:	4b19      	ldr	r3, [pc, #100]	; (800422c <xTimerGenericCommand+0x94>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d02a      	beq.n	8004222 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b05      	cmp	r3, #5
 80041dc:	dc18      	bgt.n	8004210 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80041de:	f7ff feb5 	bl	8003f4c <xTaskGetSchedulerState>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d109      	bne.n	80041fc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80041e8:	4b10      	ldr	r3, [pc, #64]	; (800422c <xTimerGenericCommand+0x94>)
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	f107 0110 	add.w	r1, r7, #16
 80041f0:	2300      	movs	r3, #0
 80041f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041f4:	f7fe fc98 	bl	8002b28 <xQueueGenericSend>
 80041f8:	6278      	str	r0, [r7, #36]	; 0x24
 80041fa:	e012      	b.n	8004222 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <xTimerGenericCommand+0x94>)
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	f107 0110 	add.w	r1, r7, #16
 8004204:	2300      	movs	r3, #0
 8004206:	2200      	movs	r2, #0
 8004208:	f7fe fc8e 	bl	8002b28 <xQueueGenericSend>
 800420c:	6278      	str	r0, [r7, #36]	; 0x24
 800420e:	e008      	b.n	8004222 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004210:	4b06      	ldr	r3, [pc, #24]	; (800422c <xTimerGenericCommand+0x94>)
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	f107 0110 	add.w	r1, r7, #16
 8004218:	2300      	movs	r3, #0
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	f7fe fd7e 	bl	8002d1c <xQueueGenericSendFromISR>
 8004220:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004224:	4618      	mov	r0, r3
 8004226:	3728      	adds	r7, #40	; 0x28
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000d3c 	.word	0x20000d3c

08004230 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b088      	sub	sp, #32
 8004234:	af02      	add	r7, sp, #8
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800423a:	4b22      	ldr	r3, [pc, #136]	; (80042c4 <prvProcessExpiredTimer+0x94>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	3304      	adds	r3, #4
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe fb45 	bl	80028d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d021      	beq.n	80042a0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	699a      	ldr	r2, [r3, #24]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	18d1      	adds	r1, r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	6978      	ldr	r0, [r7, #20]
 800426a:	f000 f8d1 	bl	8004410 <prvInsertTimerInActiveList>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01e      	beq.n	80042b2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004274:	2300      	movs	r3, #0
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	2300      	movs	r3, #0
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	2100      	movs	r1, #0
 800427e:	6978      	ldr	r0, [r7, #20]
 8004280:	f7ff ff8a 	bl	8004198 <xTimerGenericCommand>
 8004284:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d112      	bne.n	80042b2 <prvProcessExpiredTimer+0x82>
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	e7fe      	b.n	800429e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	6978      	ldr	r0, [r7, #20]
 80042b8:	4798      	blx	r3
}
 80042ba:	bf00      	nop
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000d34 	.word	0x20000d34

080042c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042d0:	f107 0308 	add.w	r3, r7, #8
 80042d4:	4618      	mov	r0, r3
 80042d6:	f000 f857 	bl	8004388 <prvGetNextExpireTime>
 80042da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4619      	mov	r1, r3
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 f803 	bl	80042ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80042e6:	f000 f8d5 	bl	8004494 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80042ea:	e7f1      	b.n	80042d0 <prvTimerTask+0x8>

080042ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80042f6:	f7ff fa49 	bl	800378c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042fa:	f107 0308 	add.w	r3, r7, #8
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 f866 	bl	80043d0 <prvSampleTimeNow>
 8004304:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d130      	bne.n	800436e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <prvProcessTimerOrBlockTask+0x3c>
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	429a      	cmp	r2, r3
 8004318:	d806      	bhi.n	8004328 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800431a:	f7ff fa45 	bl	80037a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800431e:	68f9      	ldr	r1, [r7, #12]
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff ff85 	bl	8004230 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004326:	e024      	b.n	8004372 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d008      	beq.n	8004340 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800432e:	4b13      	ldr	r3, [pc, #76]	; (800437c <prvProcessTimerOrBlockTask+0x90>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <prvProcessTimerOrBlockTask+0x50>
 8004338:	2301      	movs	r3, #1
 800433a:	e000      	b.n	800433e <prvProcessTimerOrBlockTask+0x52>
 800433c:	2300      	movs	r3, #0
 800433e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004340:	4b0f      	ldr	r3, [pc, #60]	; (8004380 <prvProcessTimerOrBlockTask+0x94>)
 8004342:	6818      	ldr	r0, [r3, #0]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	4619      	mov	r1, r3
 800434e:	f7fe ff91 	bl	8003274 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004352:	f7ff fa29 	bl	80037a8 <xTaskResumeAll>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800435c:	4b09      	ldr	r3, [pc, #36]	; (8004384 <prvProcessTimerOrBlockTask+0x98>)
 800435e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	f3bf 8f6f 	isb	sy
}
 800436c:	e001      	b.n	8004372 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800436e:	f7ff fa1b 	bl	80037a8 <xTaskResumeAll>
}
 8004372:	bf00      	nop
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000d38 	.word	0x20000d38
 8004380:	20000d3c 	.word	0x20000d3c
 8004384:	e000ed04 	.word	0xe000ed04

08004388 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004390:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <prvGetNextExpireTime+0x44>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <prvGetNextExpireTime+0x16>
 800439a:	2201      	movs	r2, #1
 800439c:	e000      	b.n	80043a0 <prvGetNextExpireTime+0x18>
 800439e:	2200      	movs	r2, #0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d105      	bne.n	80043b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043ac:	4b07      	ldr	r3, [pc, #28]	; (80043cc <prvGetNextExpireTime+0x44>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	e001      	b.n	80043bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80043bc:	68fb      	ldr	r3, [r7, #12]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	20000d34 	.word	0x20000d34

080043d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80043d8:	f7ff fa82 	bl	80038e0 <xTaskGetTickCount>
 80043dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80043de:	4b0b      	ldr	r3, [pc, #44]	; (800440c <prvSampleTimeNow+0x3c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d205      	bcs.n	80043f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80043e8:	f000 f930 	bl	800464c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e002      	b.n	80043fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80043fa:	4a04      	ldr	r2, [pc, #16]	; (800440c <prvSampleTimeNow+0x3c>)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004400:	68fb      	ldr	r3, [r7, #12]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000d44 	.word	0x20000d44

08004410 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800441e:	2300      	movs	r3, #0
 8004420:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800442e:	68ba      	ldr	r2, [r7, #8]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	429a      	cmp	r2, r3
 8004434:	d812      	bhi.n	800445c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	1ad2      	subs	r2, r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	429a      	cmp	r2, r3
 8004442:	d302      	bcc.n	800444a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004444:	2301      	movs	r3, #1
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	e01b      	b.n	8004482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800444a:	4b10      	ldr	r3, [pc, #64]	; (800448c <prvInsertTimerInActiveList+0x7c>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3304      	adds	r3, #4
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f7fe fa06 	bl	8002866 <vListInsert>
 800445a:	e012      	b.n	8004482 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	429a      	cmp	r2, r3
 8004462:	d206      	bcs.n	8004472 <prvInsertTimerInActiveList+0x62>
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d302      	bcc.n	8004472 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800446c:	2301      	movs	r3, #1
 800446e:	617b      	str	r3, [r7, #20]
 8004470:	e007      	b.n	8004482 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004472:	4b07      	ldr	r3, [pc, #28]	; (8004490 <prvInsertTimerInActiveList+0x80>)
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3304      	adds	r3, #4
 800447a:	4619      	mov	r1, r3
 800447c:	4610      	mov	r0, r2
 800447e:	f7fe f9f2 	bl	8002866 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004482:	697b      	ldr	r3, [r7, #20]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20000d38 	.word	0x20000d38
 8004490:	20000d34 	.word	0x20000d34

08004494 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08e      	sub	sp, #56	; 0x38
 8004498:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800449a:	e0c6      	b.n	800462a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	da17      	bge.n	80044d2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80044a2:	1d3b      	adds	r3, r7, #4
 80044a4:	3304      	adds	r3, #4
 80044a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80044a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d109      	bne.n	80044c2 <prvProcessReceivedCommands+0x2e>
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	61fb      	str	r3, [r7, #28]
 80044c0:	e7fe      	b.n	80044c0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80044c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044c8:	6850      	ldr	r0, [r2, #4]
 80044ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044cc:	6892      	ldr	r2, [r2, #8]
 80044ce:	4611      	mov	r1, r2
 80044d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f2c0 80a7 	blt.w	8004628 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80044de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d004      	beq.n	80044f0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	3304      	adds	r3, #4
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe f9f4 	bl	80028d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044f0:	463b      	mov	r3, r7
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff ff6c 	bl	80043d0 <prvSampleTimeNow>
 80044f8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b09      	cmp	r3, #9
 80044fe:	f200 8094 	bhi.w	800462a <prvProcessReceivedCommands+0x196>
 8004502:	a201      	add	r2, pc, #4	; (adr r2, 8004508 <prvProcessReceivedCommands+0x74>)
 8004504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004508:	08004531 	.word	0x08004531
 800450c:	08004531 	.word	0x08004531
 8004510:	08004531 	.word	0x08004531
 8004514:	080045a3 	.word	0x080045a3
 8004518:	080045b7 	.word	0x080045b7
 800451c:	080045ff 	.word	0x080045ff
 8004520:	08004531 	.word	0x08004531
 8004524:	08004531 	.word	0x08004531
 8004528:	080045a3 	.word	0x080045a3
 800452c:	080045b7 	.word	0x080045b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	b2da      	uxtb	r2, r3
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	18d1      	adds	r1, r2, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004550:	f7ff ff5e 	bl	8004410 <prvInsertTimerInActiveList>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d067      	beq.n	800462a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800455a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004560:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d05c      	beq.n	800462a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	441a      	add	r2, r3
 8004578:	2300      	movs	r3, #0
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	2300      	movs	r3, #0
 800457e:	2100      	movs	r1, #0
 8004580:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004582:	f7ff fe09 	bl	8004198 <xTimerGenericCommand>
 8004586:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d14d      	bne.n	800462a <prvProcessReceivedCommands+0x196>
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	e7fe      	b.n	80045a0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80045b4:	e039      	b.n	800462a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <prvProcessReceivedCommands+0x156>
 80045d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	e7fe      	b.n	80045e8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	18d1      	adds	r1, r2, r3
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045f8:	f7ff ff0a 	bl	8004410 <prvInsertTimerInActiveList>
					break;
 80045fc:	e015      	b.n	800462a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d103      	bne.n	8004614 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800460c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800460e:	f000 fbc7 	bl	8004da0 <vPortFree>
 8004612:	e00a      	b.n	800462a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800461a:	f023 0301 	bic.w	r3, r3, #1
 800461e:	b2da      	uxtb	r2, r3
 8004620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004626:	e000      	b.n	800462a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004628:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800462a:	4b07      	ldr	r3, [pc, #28]	; (8004648 <prvProcessReceivedCommands+0x1b4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	1d39      	adds	r1, r7, #4
 8004630:	2200      	movs	r2, #0
 8004632:	4618      	mov	r0, r3
 8004634:	f7fe fc0a 	bl	8002e4c <xQueueReceive>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	f47f af2e 	bne.w	800449c <prvProcessReceivedCommands+0x8>
	}
}
 8004640:	bf00      	nop
 8004642:	3730      	adds	r7, #48	; 0x30
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	20000d3c 	.word	0x20000d3c

0800464c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004652:	e047      	b.n	80046e4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004654:	4b2d      	ldr	r3, [pc, #180]	; (800470c <prvSwitchTimerLists+0xc0>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800465e:	4b2b      	ldr	r3, [pc, #172]	; (800470c <prvSwitchTimerLists+0xc0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	3304      	adds	r3, #4
 800466c:	4618      	mov	r0, r3
 800466e:	f7fe f933 	bl	80028d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d02d      	beq.n	80046e4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4413      	add	r3, r2
 8004690:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	429a      	cmp	r2, r3
 8004698:	d90e      	bls.n	80046b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046a6:	4b19      	ldr	r3, [pc, #100]	; (800470c <prvSwitchTimerLists+0xc0>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3304      	adds	r3, #4
 80046ae:	4619      	mov	r1, r3
 80046b0:	4610      	mov	r0, r2
 80046b2:	f7fe f8d8 	bl	8002866 <vListInsert>
 80046b6:	e015      	b.n	80046e4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046b8:	2300      	movs	r3, #0
 80046ba:	9300      	str	r3, [sp, #0]
 80046bc:	2300      	movs	r3, #0
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	2100      	movs	r1, #0
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f7ff fd68 	bl	8004198 <xTimerGenericCommand>
 80046c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d109      	bne.n	80046e4 <prvSwitchTimerLists+0x98>
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	603b      	str	r3, [r7, #0]
 80046e2:	e7fe      	b.n	80046e2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046e4:	4b09      	ldr	r3, [pc, #36]	; (800470c <prvSwitchTimerLists+0xc0>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1b2      	bne.n	8004654 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80046ee:	4b07      	ldr	r3, [pc, #28]	; (800470c <prvSwitchTimerLists+0xc0>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80046f4:	4b06      	ldr	r3, [pc, #24]	; (8004710 <prvSwitchTimerLists+0xc4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a04      	ldr	r2, [pc, #16]	; (800470c <prvSwitchTimerLists+0xc0>)
 80046fa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80046fc:	4a04      	ldr	r2, [pc, #16]	; (8004710 <prvSwitchTimerLists+0xc4>)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	6013      	str	r3, [r2, #0]
}
 8004702:	bf00      	nop
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20000d34 	.word	0x20000d34
 8004710:	20000d38 	.word	0x20000d38

08004714 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800471a:	f000 f95f 	bl	80049dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800471e:	4b15      	ldr	r3, [pc, #84]	; (8004774 <prvCheckForValidListAndQueue+0x60>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d120      	bne.n	8004768 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004726:	4814      	ldr	r0, [pc, #80]	; (8004778 <prvCheckForValidListAndQueue+0x64>)
 8004728:	f7fe f84c 	bl	80027c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800472c:	4813      	ldr	r0, [pc, #76]	; (800477c <prvCheckForValidListAndQueue+0x68>)
 800472e:	f7fe f849 	bl	80027c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004732:	4b13      	ldr	r3, [pc, #76]	; (8004780 <prvCheckForValidListAndQueue+0x6c>)
 8004734:	4a10      	ldr	r2, [pc, #64]	; (8004778 <prvCheckForValidListAndQueue+0x64>)
 8004736:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004738:	4b12      	ldr	r3, [pc, #72]	; (8004784 <prvCheckForValidListAndQueue+0x70>)
 800473a:	4a10      	ldr	r2, [pc, #64]	; (800477c <prvCheckForValidListAndQueue+0x68>)
 800473c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800473e:	2300      	movs	r3, #0
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	4b11      	ldr	r3, [pc, #68]	; (8004788 <prvCheckForValidListAndQueue+0x74>)
 8004744:	4a11      	ldr	r2, [pc, #68]	; (800478c <prvCheckForValidListAndQueue+0x78>)
 8004746:	2110      	movs	r1, #16
 8004748:	200a      	movs	r0, #10
 800474a:	f7fe f957 	bl	80029fc <xQueueGenericCreateStatic>
 800474e:	4602      	mov	r2, r0
 8004750:	4b08      	ldr	r3, [pc, #32]	; (8004774 <prvCheckForValidListAndQueue+0x60>)
 8004752:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004754:	4b07      	ldr	r3, [pc, #28]	; (8004774 <prvCheckForValidListAndQueue+0x60>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800475c:	4b05      	ldr	r3, [pc, #20]	; (8004774 <prvCheckForValidListAndQueue+0x60>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	490b      	ldr	r1, [pc, #44]	; (8004790 <prvCheckForValidListAndQueue+0x7c>)
 8004762:	4618      	mov	r0, r3
 8004764:	f7fe fd5e 	bl	8003224 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004768:	f000 f966 	bl	8004a38 <vPortExitCritical>
}
 800476c:	bf00      	nop
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000d3c 	.word	0x20000d3c
 8004778:	20000d0c 	.word	0x20000d0c
 800477c:	20000d20 	.word	0x20000d20
 8004780:	20000d34 	.word	0x20000d34
 8004784:	20000d38 	.word	0x20000d38
 8004788:	20000de8 	.word	0x20000de8
 800478c:	20000d48 	.word	0x20000d48
 8004790:	080051f0 	.word	0x080051f0

08004794 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3b04      	subs	r3, #4
 80047a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80047ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3b04      	subs	r3, #4
 80047b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f023 0201 	bic.w	r2, r3, #1
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3b04      	subs	r3, #4
 80047c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80047c4:	4a0c      	ldr	r2, [pc, #48]	; (80047f8 <pxPortInitialiseStack+0x64>)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3b14      	subs	r3, #20
 80047ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3b04      	subs	r3, #4
 80047da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f06f 0202 	mvn.w	r2, #2
 80047e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3b20      	subs	r3, #32
 80047e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047ea:	68fb      	ldr	r3, [r7, #12]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	080047fd 	.word	0x080047fd

080047fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004806:	4b11      	ldr	r3, [pc, #68]	; (800484c <prvTaskExitError+0x50>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480e:	d009      	beq.n	8004824 <prvTaskExitError+0x28>
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	e7fe      	b.n	8004822 <prvTaskExitError+0x26>
 8004824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004836:	bf00      	nop
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0fc      	beq.n	8004838 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800483e:	bf00      	nop
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	2000000c 	.word	0x2000000c

08004850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004850:	4b07      	ldr	r3, [pc, #28]	; (8004870 <pxCurrentTCBConst2>)
 8004852:	6819      	ldr	r1, [r3, #0]
 8004854:	6808      	ldr	r0, [r1, #0]
 8004856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485a:	f380 8809 	msr	PSP, r0
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f04f 0000 	mov.w	r0, #0
 8004866:	f380 8811 	msr	BASEPRI, r0
 800486a:	4770      	bx	lr
 800486c:	f3af 8000 	nop.w

08004870 <pxCurrentTCBConst2>:
 8004870:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop

08004878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004878:	4808      	ldr	r0, [pc, #32]	; (800489c <prvPortStartFirstTask+0x24>)
 800487a:	6800      	ldr	r0, [r0, #0]
 800487c:	6800      	ldr	r0, [r0, #0]
 800487e:	f380 8808 	msr	MSP, r0
 8004882:	f04f 0000 	mov.w	r0, #0
 8004886:	f380 8814 	msr	CONTROL, r0
 800488a:	b662      	cpsie	i
 800488c:	b661      	cpsie	f
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	df00      	svc	0
 8004898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800489a:	bf00      	nop
 800489c:	e000ed08 	.word	0xe000ed08

080048a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048a6:	4b44      	ldr	r3, [pc, #272]	; (80049b8 <xPortStartScheduler+0x118>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a44      	ldr	r2, [pc, #272]	; (80049bc <xPortStartScheduler+0x11c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d109      	bne.n	80048c4 <xPortStartScheduler+0x24>
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	613b      	str	r3, [r7, #16]
 80048c2:	e7fe      	b.n	80048c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048c4:	4b3c      	ldr	r3, [pc, #240]	; (80049b8 <xPortStartScheduler+0x118>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a3d      	ldr	r2, [pc, #244]	; (80049c0 <xPortStartScheduler+0x120>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d109      	bne.n	80048e2 <xPortStartScheduler+0x42>
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e7fe      	b.n	80048e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80048e2:	4b38      	ldr	r3, [pc, #224]	; (80049c4 <xPortStartScheduler+0x124>)
 80048e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	22ff      	movs	r2, #255	; 0xff
 80048f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004904:	b2da      	uxtb	r2, r3
 8004906:	4b30      	ldr	r3, [pc, #192]	; (80049c8 <xPortStartScheduler+0x128>)
 8004908:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800490a:	4b30      	ldr	r3, [pc, #192]	; (80049cc <xPortStartScheduler+0x12c>)
 800490c:	2207      	movs	r2, #7
 800490e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004910:	e009      	b.n	8004926 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004912:	4b2e      	ldr	r3, [pc, #184]	; (80049cc <xPortStartScheduler+0x12c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3b01      	subs	r3, #1
 8004918:	4a2c      	ldr	r2, [pc, #176]	; (80049cc <xPortStartScheduler+0x12c>)
 800491a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	b2db      	uxtb	r3, r3
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	b2db      	uxtb	r3, r3
 8004924:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004926:	78fb      	ldrb	r3, [r7, #3]
 8004928:	b2db      	uxtb	r3, r3
 800492a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492e:	2b80      	cmp	r3, #128	; 0x80
 8004930:	d0ef      	beq.n	8004912 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004932:	4b26      	ldr	r3, [pc, #152]	; (80049cc <xPortStartScheduler+0x12c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f1c3 0307 	rsb	r3, r3, #7
 800493a:	2b04      	cmp	r3, #4
 800493c:	d009      	beq.n	8004952 <xPortStartScheduler+0xb2>
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
 800494e:	60bb      	str	r3, [r7, #8]
 8004950:	e7fe      	b.n	8004950 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004952:	4b1e      	ldr	r3, [pc, #120]	; (80049cc <xPortStartScheduler+0x12c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	4a1c      	ldr	r2, [pc, #112]	; (80049cc <xPortStartScheduler+0x12c>)
 800495a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800495c:	4b1b      	ldr	r3, [pc, #108]	; (80049cc <xPortStartScheduler+0x12c>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004964:	4a19      	ldr	r2, [pc, #100]	; (80049cc <xPortStartScheduler+0x12c>)
 8004966:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	b2da      	uxtb	r2, r3
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004970:	4b17      	ldr	r3, [pc, #92]	; (80049d0 <xPortStartScheduler+0x130>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a16      	ldr	r2, [pc, #88]	; (80049d0 <xPortStartScheduler+0x130>)
 8004976:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800497a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800497c:	4b14      	ldr	r3, [pc, #80]	; (80049d0 <xPortStartScheduler+0x130>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a13      	ldr	r2, [pc, #76]	; (80049d0 <xPortStartScheduler+0x130>)
 8004982:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004986:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004988:	f000 f8d6 	bl	8004b38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800498c:	4b11      	ldr	r3, [pc, #68]	; (80049d4 <xPortStartScheduler+0x134>)
 800498e:	2200      	movs	r2, #0
 8004990:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004992:	f000 f8f5 	bl	8004b80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004996:	4b10      	ldr	r3, [pc, #64]	; (80049d8 <xPortStartScheduler+0x138>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a0f      	ldr	r2, [pc, #60]	; (80049d8 <xPortStartScheduler+0x138>)
 800499c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80049a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049a2:	f7ff ff69 	bl	8004878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80049a6:	f7ff f863 	bl	8003a70 <vTaskSwitchContext>
	prvTaskExitError();
 80049aa:	f7ff ff27 	bl	80047fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	e000ed00 	.word	0xe000ed00
 80049bc:	410fc271 	.word	0x410fc271
 80049c0:	410fc270 	.word	0x410fc270
 80049c4:	e000e400 	.word	0xe000e400
 80049c8:	20000e38 	.word	0x20000e38
 80049cc:	20000e3c 	.word	0x20000e3c
 80049d0:	e000ed20 	.word	0xe000ed20
 80049d4:	2000000c 	.word	0x2000000c
 80049d8:	e000ef34 	.word	0xe000ef34

080049dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80049f4:	4b0e      	ldr	r3, [pc, #56]	; (8004a30 <vPortEnterCritical+0x54>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3301      	adds	r3, #1
 80049fa:	4a0d      	ldr	r2, [pc, #52]	; (8004a30 <vPortEnterCritical+0x54>)
 80049fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80049fe:	4b0c      	ldr	r3, [pc, #48]	; (8004a30 <vPortEnterCritical+0x54>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d10e      	bne.n	8004a24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a06:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <vPortEnterCritical+0x58>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d009      	beq.n	8004a24 <vPortEnterCritical+0x48>
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	603b      	str	r3, [r7, #0]
 8004a22:	e7fe      	b.n	8004a22 <vPortEnterCritical+0x46>
	}
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	2000000c 	.word	0x2000000c
 8004a34:	e000ed04 	.word	0xe000ed04

08004a38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a3e:	4b11      	ldr	r3, [pc, #68]	; (8004a84 <vPortExitCritical+0x4c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d109      	bne.n	8004a5a <vPortExitCritical+0x22>
 8004a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	607b      	str	r3, [r7, #4]
 8004a58:	e7fe      	b.n	8004a58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004a5a:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <vPortExitCritical+0x4c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	4a08      	ldr	r2, [pc, #32]	; (8004a84 <vPortExitCritical+0x4c>)
 8004a62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004a64:	4b07      	ldr	r3, [pc, #28]	; (8004a84 <vPortExitCritical+0x4c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d104      	bne.n	8004a76 <vPortExitCritical+0x3e>
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	2000000c 	.word	0x2000000c
	...

08004a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004a90:	f3ef 8009 	mrs	r0, PSP
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	4b15      	ldr	r3, [pc, #84]	; (8004af0 <pxCurrentTCBConst>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	f01e 0f10 	tst.w	lr, #16
 8004aa0:	bf08      	it	eq
 8004aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aaa:	6010      	str	r0, [r2, #0]
 8004aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ab4:	f380 8811 	msr	BASEPRI, r0
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f7fe ffd6 	bl	8003a70 <vTaskSwitchContext>
 8004ac4:	f04f 0000 	mov.w	r0, #0
 8004ac8:	f380 8811 	msr	BASEPRI, r0
 8004acc:	bc09      	pop	{r0, r3}
 8004ace:	6819      	ldr	r1, [r3, #0]
 8004ad0:	6808      	ldr	r0, [r1, #0]
 8004ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad6:	f01e 0f10 	tst.w	lr, #16
 8004ada:	bf08      	it	eq
 8004adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ae0:	f380 8809 	msr	PSP, r0
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	f3af 8000 	nop.w

08004af0 <pxCurrentTCBConst>:
 8004af0:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop

08004af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
	__asm volatile
 8004afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b02:	f383 8811 	msr	BASEPRI, r3
 8004b06:	f3bf 8f6f 	isb	sy
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b10:	f7fe fef6 	bl	8003900 <xTaskIncrementTick>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b1a:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <xPortSysTickHandler+0x3c>)
 8004b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b20:	601a      	str	r2, [r3, #0]
 8004b22:	2300      	movs	r3, #0
 8004b24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	e000ed04 	.word	0xe000ed04

08004b38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <vPortSetupTimerInterrupt+0x34>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b42:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <vPortSetupTimerInterrupt+0x38>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b48:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <vPortSetupTimerInterrupt+0x3c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a0a      	ldr	r2, [pc, #40]	; (8004b78 <vPortSetupTimerInterrupt+0x40>)
 8004b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b52:	099b      	lsrs	r3, r3, #6
 8004b54:	4a09      	ldr	r2, [pc, #36]	; (8004b7c <vPortSetupTimerInterrupt+0x44>)
 8004b56:	3b01      	subs	r3, #1
 8004b58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b5a:	4b04      	ldr	r3, [pc, #16]	; (8004b6c <vPortSetupTimerInterrupt+0x34>)
 8004b5c:	2207      	movs	r2, #7
 8004b5e:	601a      	str	r2, [r3, #0]
}
 8004b60:	bf00      	nop
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	e000e010 	.word	0xe000e010
 8004b70:	e000e018 	.word	0xe000e018
 8004b74:	20000000 	.word	0x20000000
 8004b78:	10624dd3 	.word	0x10624dd3
 8004b7c:	e000e014 	.word	0xe000e014

08004b80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004b80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b90 <vPortEnableVFP+0x10>
 8004b84:	6801      	ldr	r1, [r0, #0]
 8004b86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b8a:	6001      	str	r1, [r0, #0]
 8004b8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004b8e:	bf00      	nop
 8004b90:	e000ed88 	.word	0xe000ed88

08004b94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b9a:	f3ef 8305 	mrs	r3, IPSR
 8004b9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b0f      	cmp	r3, #15
 8004ba4:	d913      	bls.n	8004bce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ba6:	4a16      	ldr	r2, [pc, #88]	; (8004c00 <vPortValidateInterruptPriority+0x6c>)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4413      	add	r3, r2
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004bb0:	4b14      	ldr	r3, [pc, #80]	; (8004c04 <vPortValidateInterruptPriority+0x70>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	7afa      	ldrb	r2, [r7, #11]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d209      	bcs.n	8004bce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	607b      	str	r3, [r7, #4]
 8004bcc:	e7fe      	b.n	8004bcc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004bce:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <vPortValidateInterruptPriority+0x74>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <vPortValidateInterruptPriority+0x78>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d909      	bls.n	8004bf2 <vPortValidateInterruptPriority+0x5e>
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	e7fe      	b.n	8004bf0 <vPortValidateInterruptPriority+0x5c>
	}
 8004bf2:	bf00      	nop
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	e000e3f0 	.word	0xe000e3f0
 8004c04:	20000e38 	.word	0x20000e38
 8004c08:	e000ed0c 	.word	0xe000ed0c
 8004c0c:	20000e3c 	.word	0x20000e3c

08004c10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08a      	sub	sp, #40	; 0x28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c1c:	f7fe fdb6 	bl	800378c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c20:	4b59      	ldr	r3, [pc, #356]	; (8004d88 <pvPortMalloc+0x178>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c28:	f000 f91a 	bl	8004e60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c2c:	4b57      	ldr	r3, [pc, #348]	; (8004d8c <pvPortMalloc+0x17c>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4013      	ands	r3, r2
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f040 8091 	bne.w	8004d5c <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01c      	beq.n	8004c7a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004c40:	2208      	movs	r2, #8
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4413      	add	r3, r2
 8004c46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d013      	beq.n	8004c7a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f023 0307 	bic.w	r3, r3, #7
 8004c58:	3308      	adds	r3, #8
 8004c5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d009      	beq.n	8004c7a <pvPortMalloc+0x6a>
 8004c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	e7fe      	b.n	8004c78 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d06d      	beq.n	8004d5c <pvPortMalloc+0x14c>
 8004c80:	4b43      	ldr	r3, [pc, #268]	; (8004d90 <pvPortMalloc+0x180>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d868      	bhi.n	8004d5c <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c8a:	4b42      	ldr	r3, [pc, #264]	; (8004d94 <pvPortMalloc+0x184>)
 8004c8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c8e:	4b41      	ldr	r3, [pc, #260]	; (8004d94 <pvPortMalloc+0x184>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c94:	e004      	b.n	8004ca0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d903      	bls.n	8004cb2 <pvPortMalloc+0xa2>
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f1      	bne.n	8004c96 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004cb2:	4b35      	ldr	r3, [pc, #212]	; (8004d88 <pvPortMalloc+0x178>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d04f      	beq.n	8004d5c <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	4413      	add	r3, r2
 8004cc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	1ad2      	subs	r2, r2, r3
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d91e      	bls.n	8004d1c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d009      	beq.n	8004d04 <pvPortMalloc+0xf4>
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	e7fe      	b.n	8004d02 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	1ad2      	subs	r2, r2, r3
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d16:	69b8      	ldr	r0, [r7, #24]
 8004d18:	f000 f904 	bl	8004f24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d1c:	4b1c      	ldr	r3, [pc, #112]	; (8004d90 <pvPortMalloc+0x180>)
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	4a1a      	ldr	r2, [pc, #104]	; (8004d90 <pvPortMalloc+0x180>)
 8004d28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d2a:	4b19      	ldr	r3, [pc, #100]	; (8004d90 <pvPortMalloc+0x180>)
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	4b1a      	ldr	r3, [pc, #104]	; (8004d98 <pvPortMalloc+0x188>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d203      	bcs.n	8004d3e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d36:	4b16      	ldr	r3, [pc, #88]	; (8004d90 <pvPortMalloc+0x180>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a17      	ldr	r2, [pc, #92]	; (8004d98 <pvPortMalloc+0x188>)
 8004d3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <pvPortMalloc+0x17c>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	431a      	orrs	r2, r3
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004d52:	4b12      	ldr	r3, [pc, #72]	; (8004d9c <pvPortMalloc+0x18c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	3301      	adds	r3, #1
 8004d58:	4a10      	ldr	r2, [pc, #64]	; (8004d9c <pvPortMalloc+0x18c>)
 8004d5a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d5c:	f7fe fd24 	bl	80037a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d009      	beq.n	8004d7e <pvPortMalloc+0x16e>
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	e7fe      	b.n	8004d7c <pvPortMalloc+0x16c>
	return pvReturn;
 8004d7e:	69fb      	ldr	r3, [r7, #28]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3728      	adds	r7, #40	; 0x28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	20004a48 	.word	0x20004a48
 8004d8c:	20004a5c 	.word	0x20004a5c
 8004d90:	20004a4c 	.word	0x20004a4c
 8004d94:	20004a40 	.word	0x20004a40
 8004d98:	20004a50 	.word	0x20004a50
 8004d9c:	20004a54 	.word	0x20004a54

08004da0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d04b      	beq.n	8004e4a <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004db2:	2308      	movs	r3, #8
 8004db4:	425b      	negs	r3, r3
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4413      	add	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	4b23      	ldr	r3, [pc, #140]	; (8004e54 <vPortFree+0xb4>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d109      	bne.n	8004de2 <vPortFree+0x42>
 8004dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	e7fe      	b.n	8004de0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <vPortFree+0x5e>
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	60bb      	str	r3, [r7, #8]
 8004dfc:	e7fe      	b.n	8004dfc <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <vPortFree+0xb4>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d01e      	beq.n	8004e4a <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d11a      	bne.n	8004e4a <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	4b0e      	ldr	r3, [pc, #56]	; (8004e54 <vPortFree+0xb4>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	401a      	ands	r2, r3
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e24:	f7fe fcb2 	bl	800378c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <vPortFree+0xb8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4413      	add	r3, r2
 8004e32:	4a09      	ldr	r2, [pc, #36]	; (8004e58 <vPortFree+0xb8>)
 8004e34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e36:	6938      	ldr	r0, [r7, #16]
 8004e38:	f000 f874 	bl	8004f24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004e3c:	4b07      	ldr	r3, [pc, #28]	; (8004e5c <vPortFree+0xbc>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	3301      	adds	r3, #1
 8004e42:	4a06      	ldr	r2, [pc, #24]	; (8004e5c <vPortFree+0xbc>)
 8004e44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004e46:	f7fe fcaf 	bl	80037a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e4a:	bf00      	nop
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20004a5c 	.word	0x20004a5c
 8004e58:	20004a4c 	.word	0x20004a4c
 8004e5c:	20004a58 	.word	0x20004a58

08004e60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e66:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004e6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e6c:	4b27      	ldr	r3, [pc, #156]	; (8004f0c <prvHeapInit+0xac>)
 8004e6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00c      	beq.n	8004e94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3307      	adds	r3, #7
 8004e7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0307 	bic.w	r3, r3, #7
 8004e86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	4a1f      	ldr	r2, [pc, #124]	; (8004f0c <prvHeapInit+0xac>)
 8004e90:	4413      	add	r3, r2
 8004e92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e98:	4a1d      	ldr	r2, [pc, #116]	; (8004f10 <prvHeapInit+0xb0>)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e9e:	4b1c      	ldr	r3, [pc, #112]	; (8004f10 <prvHeapInit+0xb0>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004eac:	2208      	movs	r2, #8
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	1a9b      	subs	r3, r3, r2
 8004eb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0307 	bic.w	r3, r3, #7
 8004eba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4a15      	ldr	r2, [pc, #84]	; (8004f14 <prvHeapInit+0xb4>)
 8004ec0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ec2:	4b14      	ldr	r3, [pc, #80]	; (8004f14 <prvHeapInit+0xb4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004eca:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <prvHeapInit+0xb4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	1ad2      	subs	r2, r2, r3
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ee0:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <prvHeapInit+0xb4>)
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	4a0a      	ldr	r2, [pc, #40]	; (8004f18 <prvHeapInit+0xb8>)
 8004eee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4a09      	ldr	r2, [pc, #36]	; (8004f1c <prvHeapInit+0xbc>)
 8004ef6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ef8:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <prvHeapInit+0xc0>)
 8004efa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004efe:	601a      	str	r2, [r3, #0]
}
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	20000e40 	.word	0x20000e40
 8004f10:	20004a40 	.word	0x20004a40
 8004f14:	20004a48 	.word	0x20004a48
 8004f18:	20004a50 	.word	0x20004a50
 8004f1c:	20004a4c 	.word	0x20004a4c
 8004f20:	20004a5c 	.word	0x20004a5c

08004f24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f2c:	4b28      	ldr	r3, [pc, #160]	; (8004fd0 <prvInsertBlockIntoFreeList+0xac>)
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	e002      	b.n	8004f38 <prvInsertBlockIntoFreeList+0x14>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d8f7      	bhi.n	8004f32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d108      	bne.n	8004f66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	441a      	add	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	441a      	add	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d118      	bne.n	8004fac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <prvInsertBlockIntoFreeList+0xb0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d00d      	beq.n	8004fa2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	441a      	add	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	e008      	b.n	8004fb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <prvInsertBlockIntoFreeList+0xb0>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	e003      	b.n	8004fb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d002      	beq.n	8004fc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fc2:	bf00      	nop
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	20004a40 	.word	0x20004a40
 8004fd4:	20004a48 	.word	0x20004a48

08004fd8 <__libc_init_array>:
 8004fd8:	b570      	push	{r4, r5, r6, lr}
 8004fda:	4e0d      	ldr	r6, [pc, #52]	; (8005010 <__libc_init_array+0x38>)
 8004fdc:	4c0d      	ldr	r4, [pc, #52]	; (8005014 <__libc_init_array+0x3c>)
 8004fde:	1ba4      	subs	r4, r4, r6
 8004fe0:	10a4      	asrs	r4, r4, #2
 8004fe2:	2500      	movs	r5, #0
 8004fe4:	42a5      	cmp	r5, r4
 8004fe6:	d109      	bne.n	8004ffc <__libc_init_array+0x24>
 8004fe8:	4e0b      	ldr	r6, [pc, #44]	; (8005018 <__libc_init_array+0x40>)
 8004fea:	4c0c      	ldr	r4, [pc, #48]	; (800501c <__libc_init_array+0x44>)
 8004fec:	f000 f8e4 	bl	80051b8 <_init>
 8004ff0:	1ba4      	subs	r4, r4, r6
 8004ff2:	10a4      	asrs	r4, r4, #2
 8004ff4:	2500      	movs	r5, #0
 8004ff6:	42a5      	cmp	r5, r4
 8004ff8:	d105      	bne.n	8005006 <__libc_init_array+0x2e>
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
 8004ffc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005000:	4798      	blx	r3
 8005002:	3501      	adds	r5, #1
 8005004:	e7ee      	b.n	8004fe4 <__libc_init_array+0xc>
 8005006:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800500a:	4798      	blx	r3
 800500c:	3501      	adds	r5, #1
 800500e:	e7f2      	b.n	8004ff6 <__libc_init_array+0x1e>
 8005010:	0800529c 	.word	0x0800529c
 8005014:	0800529c 	.word	0x0800529c
 8005018:	0800529c 	.word	0x0800529c
 800501c:	080052a0 	.word	0x080052a0

08005020 <memcpy>:
 8005020:	b510      	push	{r4, lr}
 8005022:	1e43      	subs	r3, r0, #1
 8005024:	440a      	add	r2, r1
 8005026:	4291      	cmp	r1, r2
 8005028:	d100      	bne.n	800502c <memcpy+0xc>
 800502a:	bd10      	pop	{r4, pc}
 800502c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005030:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005034:	e7f7      	b.n	8005026 <memcpy+0x6>

08005036 <memset>:
 8005036:	4402      	add	r2, r0
 8005038:	4603      	mov	r3, r0
 800503a:	4293      	cmp	r3, r2
 800503c:	d100      	bne.n	8005040 <memset+0xa>
 800503e:	4770      	bx	lr
 8005040:	f803 1b01 	strb.w	r1, [r3], #1
 8005044:	e7f9      	b.n	800503a <memset+0x4>

08005046 <cleanup_glue>:
 8005046:	b538      	push	{r3, r4, r5, lr}
 8005048:	460c      	mov	r4, r1
 800504a:	6809      	ldr	r1, [r1, #0]
 800504c:	4605      	mov	r5, r0
 800504e:	b109      	cbz	r1, 8005054 <cleanup_glue+0xe>
 8005050:	f7ff fff9 	bl	8005046 <cleanup_glue>
 8005054:	4621      	mov	r1, r4
 8005056:	4628      	mov	r0, r5
 8005058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800505c:	f000 b85e 	b.w	800511c <_free_r>

08005060 <_reclaim_reent>:
 8005060:	4b2c      	ldr	r3, [pc, #176]	; (8005114 <_reclaim_reent+0xb4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4283      	cmp	r3, r0
 8005066:	b570      	push	{r4, r5, r6, lr}
 8005068:	4604      	mov	r4, r0
 800506a:	d051      	beq.n	8005110 <_reclaim_reent+0xb0>
 800506c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800506e:	b143      	cbz	r3, 8005082 <_reclaim_reent+0x22>
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d14a      	bne.n	800510c <_reclaim_reent+0xac>
 8005076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005078:	6819      	ldr	r1, [r3, #0]
 800507a:	b111      	cbz	r1, 8005082 <_reclaim_reent+0x22>
 800507c:	4620      	mov	r0, r4
 800507e:	f000 f84d 	bl	800511c <_free_r>
 8005082:	6961      	ldr	r1, [r4, #20]
 8005084:	b111      	cbz	r1, 800508c <_reclaim_reent+0x2c>
 8005086:	4620      	mov	r0, r4
 8005088:	f000 f848 	bl	800511c <_free_r>
 800508c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800508e:	b111      	cbz	r1, 8005096 <_reclaim_reent+0x36>
 8005090:	4620      	mov	r0, r4
 8005092:	f000 f843 	bl	800511c <_free_r>
 8005096:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005098:	b111      	cbz	r1, 80050a0 <_reclaim_reent+0x40>
 800509a:	4620      	mov	r0, r4
 800509c:	f000 f83e 	bl	800511c <_free_r>
 80050a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80050a2:	b111      	cbz	r1, 80050aa <_reclaim_reent+0x4a>
 80050a4:	4620      	mov	r0, r4
 80050a6:	f000 f839 	bl	800511c <_free_r>
 80050aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80050ac:	b111      	cbz	r1, 80050b4 <_reclaim_reent+0x54>
 80050ae:	4620      	mov	r0, r4
 80050b0:	f000 f834 	bl	800511c <_free_r>
 80050b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80050b6:	b111      	cbz	r1, 80050be <_reclaim_reent+0x5e>
 80050b8:	4620      	mov	r0, r4
 80050ba:	f000 f82f 	bl	800511c <_free_r>
 80050be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80050c0:	b111      	cbz	r1, 80050c8 <_reclaim_reent+0x68>
 80050c2:	4620      	mov	r0, r4
 80050c4:	f000 f82a 	bl	800511c <_free_r>
 80050c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050ca:	b111      	cbz	r1, 80050d2 <_reclaim_reent+0x72>
 80050cc:	4620      	mov	r0, r4
 80050ce:	f000 f825 	bl	800511c <_free_r>
 80050d2:	69a3      	ldr	r3, [r4, #24]
 80050d4:	b1e3      	cbz	r3, 8005110 <_reclaim_reent+0xb0>
 80050d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80050d8:	4620      	mov	r0, r4
 80050da:	4798      	blx	r3
 80050dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80050de:	b1b9      	cbz	r1, 8005110 <_reclaim_reent+0xb0>
 80050e0:	4620      	mov	r0, r4
 80050e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80050e6:	f7ff bfae 	b.w	8005046 <cleanup_glue>
 80050ea:	5949      	ldr	r1, [r1, r5]
 80050ec:	b941      	cbnz	r1, 8005100 <_reclaim_reent+0xa0>
 80050ee:	3504      	adds	r5, #4
 80050f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050f2:	2d80      	cmp	r5, #128	; 0x80
 80050f4:	68d9      	ldr	r1, [r3, #12]
 80050f6:	d1f8      	bne.n	80050ea <_reclaim_reent+0x8a>
 80050f8:	4620      	mov	r0, r4
 80050fa:	f000 f80f 	bl	800511c <_free_r>
 80050fe:	e7ba      	b.n	8005076 <_reclaim_reent+0x16>
 8005100:	680e      	ldr	r6, [r1, #0]
 8005102:	4620      	mov	r0, r4
 8005104:	f000 f80a 	bl	800511c <_free_r>
 8005108:	4631      	mov	r1, r6
 800510a:	e7ef      	b.n	80050ec <_reclaim_reent+0x8c>
 800510c:	2500      	movs	r5, #0
 800510e:	e7ef      	b.n	80050f0 <_reclaim_reent+0x90>
 8005110:	bd70      	pop	{r4, r5, r6, pc}
 8005112:	bf00      	nop
 8005114:	20000010 	.word	0x20000010

08005118 <__malloc_lock>:
 8005118:	4770      	bx	lr

0800511a <__malloc_unlock>:
 800511a:	4770      	bx	lr

0800511c <_free_r>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	4605      	mov	r5, r0
 8005120:	2900      	cmp	r1, #0
 8005122:	d045      	beq.n	80051b0 <_free_r+0x94>
 8005124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005128:	1f0c      	subs	r4, r1, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	bfb8      	it	lt
 800512e:	18e4      	addlt	r4, r4, r3
 8005130:	f7ff fff2 	bl	8005118 <__malloc_lock>
 8005134:	4a1f      	ldr	r2, [pc, #124]	; (80051b4 <_free_r+0x98>)
 8005136:	6813      	ldr	r3, [r2, #0]
 8005138:	4610      	mov	r0, r2
 800513a:	b933      	cbnz	r3, 800514a <_free_r+0x2e>
 800513c:	6063      	str	r3, [r4, #4]
 800513e:	6014      	str	r4, [r2, #0]
 8005140:	4628      	mov	r0, r5
 8005142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005146:	f7ff bfe8 	b.w	800511a <__malloc_unlock>
 800514a:	42a3      	cmp	r3, r4
 800514c:	d90c      	bls.n	8005168 <_free_r+0x4c>
 800514e:	6821      	ldr	r1, [r4, #0]
 8005150:	1862      	adds	r2, r4, r1
 8005152:	4293      	cmp	r3, r2
 8005154:	bf04      	itt	eq
 8005156:	681a      	ldreq	r2, [r3, #0]
 8005158:	685b      	ldreq	r3, [r3, #4]
 800515a:	6063      	str	r3, [r4, #4]
 800515c:	bf04      	itt	eq
 800515e:	1852      	addeq	r2, r2, r1
 8005160:	6022      	streq	r2, [r4, #0]
 8005162:	6004      	str	r4, [r0, #0]
 8005164:	e7ec      	b.n	8005140 <_free_r+0x24>
 8005166:	4613      	mov	r3, r2
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	b10a      	cbz	r2, 8005170 <_free_r+0x54>
 800516c:	42a2      	cmp	r2, r4
 800516e:	d9fa      	bls.n	8005166 <_free_r+0x4a>
 8005170:	6819      	ldr	r1, [r3, #0]
 8005172:	1858      	adds	r0, r3, r1
 8005174:	42a0      	cmp	r0, r4
 8005176:	d10b      	bne.n	8005190 <_free_r+0x74>
 8005178:	6820      	ldr	r0, [r4, #0]
 800517a:	4401      	add	r1, r0
 800517c:	1858      	adds	r0, r3, r1
 800517e:	4282      	cmp	r2, r0
 8005180:	6019      	str	r1, [r3, #0]
 8005182:	d1dd      	bne.n	8005140 <_free_r+0x24>
 8005184:	6810      	ldr	r0, [r2, #0]
 8005186:	6852      	ldr	r2, [r2, #4]
 8005188:	605a      	str	r2, [r3, #4]
 800518a:	4401      	add	r1, r0
 800518c:	6019      	str	r1, [r3, #0]
 800518e:	e7d7      	b.n	8005140 <_free_r+0x24>
 8005190:	d902      	bls.n	8005198 <_free_r+0x7c>
 8005192:	230c      	movs	r3, #12
 8005194:	602b      	str	r3, [r5, #0]
 8005196:	e7d3      	b.n	8005140 <_free_r+0x24>
 8005198:	6820      	ldr	r0, [r4, #0]
 800519a:	1821      	adds	r1, r4, r0
 800519c:	428a      	cmp	r2, r1
 800519e:	bf04      	itt	eq
 80051a0:	6811      	ldreq	r1, [r2, #0]
 80051a2:	6852      	ldreq	r2, [r2, #4]
 80051a4:	6062      	str	r2, [r4, #4]
 80051a6:	bf04      	itt	eq
 80051a8:	1809      	addeq	r1, r1, r0
 80051aa:	6021      	streq	r1, [r4, #0]
 80051ac:	605c      	str	r4, [r3, #4]
 80051ae:	e7c7      	b.n	8005140 <_free_r+0x24>
 80051b0:	bd38      	pop	{r3, r4, r5, pc}
 80051b2:	bf00      	nop
 80051b4:	20004a60 	.word	0x20004a60

080051b8 <_init>:
 80051b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ba:	bf00      	nop
 80051bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051be:	bc08      	pop	{r3}
 80051c0:	469e      	mov	lr, r3
 80051c2:	4770      	bx	lr

080051c4 <_fini>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	bf00      	nop
 80051c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ca:	bc08      	pop	{r3}
 80051cc:	469e      	mov	lr, r3
 80051ce:	4770      	bx	lr
