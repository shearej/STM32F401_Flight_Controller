
STM32F401_Flight_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08006240  08006240  00016240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006324  08006324  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006324  08006324  00016324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800632c  0800632c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800632c  0800632c  0001632c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006330  08006330  00016330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ad0  20000074  080063a8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b44  080063a8  00024b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001700a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b7f  00000000  00000000  000370ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011b8  00000000  00000000  00039c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001090  00000000  00000000  0003ade8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002cc3  00000000  00000000  0003be78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db17  00000000  00000000  0003eb3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000942bb  00000000  00000000  0004c652  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e090d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c58  00000000  00000000  000e0988  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006228 	.word	0x08006228

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006228 	.word	0x08006228

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fb96 	bl	8000c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f82c 	bl	8000544 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  Innit_System();
 80004ec:	f000 f9e6 	bl	80008bc <Innit_System>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f928 	bl	8000744 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004f4:	f000 f890 	bl	8000618 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f8:	f002 fb3e 	bl	8002b78 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemaphoreButton */
  SemaphoreButtonHandle = osSemaphoreNew(1, 1, &SemaphoreButton_attributes);
 80004fc:	4a0c      	ldr	r2, [pc, #48]	; (8000530 <main+0x50>)
 80004fe:	2101      	movs	r1, #1
 8000500:	2001      	movs	r0, #1
 8000502:	f002 fc30 	bl	8002d66 <osSemaphoreNew>
 8000506:	4602      	mov	r2, r0
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <main+0x54>)
 800050a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  osSemaphoreAcquire(SemaphoreButtonHandle, osWaitForever);
 800050c:	4b09      	ldr	r3, [pc, #36]	; (8000534 <main+0x54>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	f04f 31ff 	mov.w	r1, #4294967295
 8000514:	4618      	mov	r0, r3
 8000516:	f002 fcb1 	bl	8002e7c <osSemaphoreAcquire>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of handleButton */
  handleButtonHandle = osThreadNew(HandleButton, NULL, &handleButton_attributes);
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <main+0x58>)
 800051c:	2100      	movs	r1, #0
 800051e:	4807      	ldr	r0, [pc, #28]	; (800053c <main+0x5c>)
 8000520:	f002 fb74 	bl	8002c0c <osThreadNew>
 8000524:	4602      	mov	r2, r0
 8000526:	4b06      	ldr	r3, [pc, #24]	; (8000540 <main+0x60>)
 8000528:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800052a:	f002 fb49 	bl	8002bc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052e:	e7fe      	b.n	800052e <main+0x4e>
 8000530:	0800629c 	.word	0x0800629c
 8000534:	20004ab4 	.word	0x20004ab4
 8000538:	08006278 	.word	0x08006278
 800053c:	080008d5 	.word	0x080008d5
 8000540:	20004a68 	.word	0x20004a68

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2230      	movs	r2, #48	; 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f005 fda7 	bl	80060a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	4b28      	ldr	r3, [pc, #160]	; (8000610 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a27      	ldr	r2, [pc, #156]	; (8000610 <SystemClock_Config+0xcc>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b25      	ldr	r3, [pc, #148]	; (8000610 <SystemClock_Config+0xcc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <SystemClock_Config+0xd0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000590:	4a20      	ldr	r2, [pc, #128]	; (8000614 <SystemClock_Config+0xd0>)
 8000592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b1e      	ldr	r3, [pc, #120]	; (8000614 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a4:	2302      	movs	r3, #2
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ac:	2310      	movs	r3, #16
 80005ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b4:	2300      	movs	r3, #0
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b8:	2308      	movs	r3, #8
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80005bc:	2340      	movs	r3, #64	; 0x40
 80005be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0320 	add.w	r3, r7, #32
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fe11 	bl	80011f4 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005d8:	f000 f9d8 	bl	800098c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2102      	movs	r1, #2
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 f873 	bl	80016e4 <HAL_RCC_ClockConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000604:	f000 f9c2 	bl	800098c <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3750      	adds	r7, #80	; 0x50
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08e      	sub	sp, #56	; 0x38
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]
 8000644:	615a      	str	r2, [r3, #20]
 8000646:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000648:	4b3d      	ldr	r3, [pc, #244]	; (8000740 <MX_TIM2_Init+0x128>)
 800064a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800064e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000650:	4b3b      	ldr	r3, [pc, #236]	; (8000740 <MX_TIM2_Init+0x128>)
 8000652:	2247      	movs	r2, #71	; 0x47
 8000654:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000656:	4b3a      	ldr	r3, [pc, #232]	; (8000740 <MX_TIM2_Init+0x128>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 800065c:	4b38      	ldr	r3, [pc, #224]	; (8000740 <MX_TIM2_Init+0x128>)
 800065e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000662:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000664:	4b36      	ldr	r3, [pc, #216]	; (8000740 <MX_TIM2_Init+0x128>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066a:	4b35      	ldr	r3, [pc, #212]	; (8000740 <MX_TIM2_Init+0x128>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000670:	4833      	ldr	r0, [pc, #204]	; (8000740 <MX_TIM2_Init+0x128>)
 8000672:	f001 fa21 	bl	8001ab8 <HAL_TIM_Base_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800067c:	f000 f986 	bl	800098c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800068a:	4619      	mov	r1, r3
 800068c:	482c      	ldr	r0, [pc, #176]	; (8000740 <MX_TIM2_Init+0x128>)
 800068e:	f001 fdfd 	bl	800228c <HAL_TIM_ConfigClockSource>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000698:	f000 f978 	bl	800098c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800069c:	4828      	ldr	r0, [pc, #160]	; (8000740 <MX_TIM2_Init+0x128>)
 800069e:	f001 fabd 	bl	8001c1c <HAL_TIM_PWM_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80006a8:	f000 f970 	bl	800098c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4619      	mov	r1, r3
 80006ba:	4821      	ldr	r0, [pc, #132]	; (8000740 <MX_TIM2_Init+0x128>)
 80006bc:	f002 f996 	bl	80029ec <HAL_TIMEx_MasterConfigSynchronization>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80006c6:	f000 f961 	bl	800098c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ca:	2360      	movs	r3, #96	; 0x60
 80006cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	4619      	mov	r1, r3
 80006e0:	4817      	ldr	r0, [pc, #92]	; (8000740 <MX_TIM2_Init+0x128>)
 80006e2:	f001 fd11 	bl	8002108 <HAL_TIM_PWM_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80006ec:	f000 f94e 	bl	800098c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2204      	movs	r2, #4
 80006f4:	4619      	mov	r1, r3
 80006f6:	4812      	ldr	r0, [pc, #72]	; (8000740 <MX_TIM2_Init+0x128>)
 80006f8:	f001 fd06 	bl	8002108 <HAL_TIM_PWM_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000702:	f000 f943 	bl	800098c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2208      	movs	r2, #8
 800070a:	4619      	mov	r1, r3
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <MX_TIM2_Init+0x128>)
 800070e:	f001 fcfb 	bl	8002108 <HAL_TIM_PWM_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000718:	f000 f938 	bl	800098c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	220c      	movs	r2, #12
 8000720:	4619      	mov	r1, r3
 8000722:	4807      	ldr	r0, [pc, #28]	; (8000740 <MX_TIM2_Init+0x128>)
 8000724:	f001 fcf0 	bl	8002108 <HAL_TIM_PWM_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800072e:	f000 f92d 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000732:	4803      	ldr	r0, [pc, #12]	; (8000740 <MX_TIM2_Init+0x128>)
 8000734:	f000 f97a 	bl	8000a2c <HAL_TIM_MspPostInit>

}
 8000738:	bf00      	nop
 800073a:	3738      	adds	r7, #56	; 0x38
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20004a6c 	.word	0x20004a6c

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_GPIO_Init+0xa8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a22      	ldr	r2, [pc, #136]	; (80007ec <MX_GPIO_Init+0xa8>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <MX_GPIO_Init+0xa8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_GPIO_Init+0xa8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a1b      	ldr	r2, [pc, #108]	; (80007ec <MX_GPIO_Init+0xa8>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <MX_GPIO_Init+0xa8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2101      	movs	r1, #1
 8000796:	4816      	ldr	r0, [pc, #88]	; (80007f0 <MX_GPIO_Init+0xac>)
 8000798:	f000 fcfa 	bl	8001190 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800079c:	2310      	movs	r3, #16
 800079e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007a6:	2302      	movs	r3, #2
 80007a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4619      	mov	r1, r3
 80007b0:	4810      	ldr	r0, [pc, #64]	; (80007f4 <MX_GPIO_Init+0xb0>)
 80007b2:	f000 fb53 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007b6:	2301      	movs	r3, #1
 80007b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4619      	mov	r1, r3
 80007cc:	4808      	ldr	r0, [pc, #32]	; (80007f0 <MX_GPIO_Init+0xac>)
 80007ce:	f000 fb45 	bl	8000e5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2105      	movs	r1, #5
 80007d6:	200a      	movs	r0, #10
 80007d8:	f000 fb16 	bl	8000e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007dc:	200a      	movs	r0, #10
 80007de:	f000 fb2f 	bl	8000e40 <HAL_NVIC_EnableIRQ>

}
 80007e2:	bf00      	nop
 80007e4:	3720      	adds	r7, #32
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020400 	.word	0x40020400
 80007f4:	40020000 	.word	0x40020000

080007f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == BUTTON_INPUT_PIN)
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	2b10      	cmp	r3, #16
 8000806:	d104      	bne.n	8000812 <HAL_GPIO_EXTI_Callback+0x1a>
  {
	osSemaphoreRelease(SemaphoreButtonHandle);
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <HAL_GPIO_EXTI_Callback+0x24>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f002 fb87 	bl	8002f20 <osSemaphoreRelease>
  }
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20004ab4 	.word	0x20004ab4

08000820 <StartMotor>:

void StartMotor(void *argument)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  uint32_t channel = *(uint32_t *) argument;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	60bb      	str	r3, [r7, #8]
  uint8_t motorArmed1 = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  for(;;)
  {
	if (0 == motorArmed1)
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d1fc      	bne.n	8000832 <StartMotor+0x12>
	{
	  Set_PWM(1915, channel);
 8000838:	68b9      	ldr	r1, [r7, #8]
 800083a:	f240 707b 	movw	r0, #1915	; 0x77b
 800083e:	f000 f811 	bl	8000864 <Set_PWM>
	  osDelay(pdMS_TO_TICKS(1000));
 8000842:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000846:	f002 fa73 	bl	8002d30 <osDelay>
	  Set_PWM(1000, channel);
 800084a:	68b9      	ldr	r1, [r7, #8]
 800084c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000850:	f000 f808 	bl	8000864 <Set_PWM>
	  osDelay(pdMS_TO_TICKS( 6000 ));
 8000854:	f241 7070 	movw	r0, #6000	; 0x1770
 8000858:	f002 fa6a 	bl	8002d30 <osDelay>

	  //Set_PWM(1100, channel);

	  motorArmed1 = 1;
 800085c:	2301      	movs	r3, #1
 800085e:	73fb      	strb	r3, [r7, #15]
	if (0 == motorArmed1)
 8000860:	e7e7      	b.n	8000832 <StartMotor+0x12>
	...

08000864 <Set_PWM>:
  osThreadTerminate(NULL);
  /* USER CODE END 5 */
}

void Set_PWM(uint16_t pulse, uint32_t channel)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	6039      	str	r1, [r7, #0]
 800086e:	80fb      	strh	r3, [r7, #6]
	  HAL_StatusTypeDef test;
	  HAL_TIM_PWM_Stop(&htim2, channel);
 8000870:	6839      	ldr	r1, [r7, #0]
 8000872:	4811      	ldr	r0, [pc, #68]	; (80008b8 <Set_PWM+0x54>)
 8000874:	f001 fadc 	bl	8001e30 <HAL_TIM_PWM_Stop>
	  TIM_OC_InitTypeDef sConfigOC;
	  HAL_TIM_PWM_Init(&htim2);
 8000878:	480f      	ldr	r0, [pc, #60]	; (80008b8 <Set_PWM+0x54>)
 800087a:	f001 f9cf 	bl	8001c1c <HAL_TIM_PWM_Init>
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800087e:	2360      	movs	r3, #96	; 0x60
 8000880:	60bb      	str	r3, [r7, #8]

	  sConfigOC.Pulse = pulse;
 8000882:	88fb      	ldrh	r3, [r7, #6]
 8000884:	60fb      	str	r3, [r7, #12]

	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	61bb      	str	r3, [r7, #24]
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, channel);
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	683a      	ldr	r2, [r7, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	4808      	ldr	r0, [pc, #32]	; (80008b8 <Set_PWM+0x54>)
 8000898:	f001 fc36 	bl	8002108 <HAL_TIM_PWM_ConfigChannel>

	  test = HAL_TIM_PWM_Start(&htim2, channel);
 800089c:	6839      	ldr	r1, [r7, #0]
 800089e:	4806      	ldr	r0, [pc, #24]	; (80008b8 <Set_PWM+0x54>)
 80008a0:	f001 fa16 	bl	8001cd0 <HAL_TIM_PWM_Start>
 80008a4:	4603      	mov	r3, r0
 80008a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  test = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
}
 80008b0:	bf00      	nop
 80008b2:	3728      	adds	r7, #40	; 0x28
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20004a6c 	.word	0x20004a6c

080008bc <Innit_System>:

void Innit_System(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  motorStarted = 0;
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <Innit_System+0x14>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
  //motorArmed = 0;
  //SemaphoreStartMotors = 0;
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	20000090 	.word	0x20000090

080008d4 <HandleButton>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_HandleButton */
void HandleButton(void *argument)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  uint32_t motor1 = MOTOR1;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  uint32_t motor2 = MOTOR2;
 80008e0:	2304      	movs	r3, #4
 80008e2:	613b      	str	r3, [r7, #16]
  uint32_t motor3 = MOTOR3;
 80008e4:	2308      	movs	r3, #8
 80008e6:	60fb      	str	r3, [r7, #12]
  uint32_t motor4 = MOTOR4;
 80008e8:	230c      	movs	r3, #12
 80008ea:	60bb      	str	r3, [r7, #8]

/* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(SemaphoreButtonHandle, osWaitForever);
 80008ec:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <HandleButton+0x84>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f04f 31ff 	mov.w	r1, #4294967295
 80008f4:	4618      	mov	r0, r3
 80008f6:	f002 fac1 	bl	8002e7c <osSemaphoreAcquire>

	osDelay(pdMS_TO_TICKS(70)); //debounce
 80008fa:	2046      	movs	r0, #70	; 0x46
 80008fc:	f002 fa18 	bl	8002d30 <osDelay>

	if (HAL_GPIO_ReadPin(BUTTON_INPUT_PORT, BUTTON_INPUT_PIN))
 8000900:	2110      	movs	r1, #16
 8000902:	4816      	ldr	r0, [pc, #88]	; (800095c <HandleButton+0x88>)
 8000904:	f000 fc2c 	bl	8001160 <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d0ee      	beq.n	80008ec <HandleButton+0x18>
	{
		if (0 == motorStarted)
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <HandleButton+0x8c>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d1ea      	bne.n	80008ec <HandleButton+0x18>
			{
			  osThreadNew(StartMotor, &motor1, NULL);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	2200      	movs	r2, #0
 800091c:	4619      	mov	r1, r3
 800091e:	4811      	ldr	r0, [pc, #68]	; (8000964 <HandleButton+0x90>)
 8000920:	f002 f974 	bl	8002c0c <osThreadNew>
			  osThreadNew(StartMotor, &motor2, NULL);
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	2200      	movs	r2, #0
 800092a:	4619      	mov	r1, r3
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <HandleButton+0x90>)
 800092e:	f002 f96d 	bl	8002c0c <osThreadNew>
			  osThreadNew(StartMotor, &motor3, NULL);
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	2200      	movs	r2, #0
 8000938:	4619      	mov	r1, r3
 800093a:	480a      	ldr	r0, [pc, #40]	; (8000964 <HandleButton+0x90>)
 800093c:	f002 f966 	bl	8002c0c <osThreadNew>
			  osThreadNew(StartMotor, &motor4, NULL);
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	2200      	movs	r2, #0
 8000946:	4619      	mov	r1, r3
 8000948:	4806      	ldr	r0, [pc, #24]	; (8000964 <HandleButton+0x90>)
 800094a:	f002 f95f 	bl	8002c0c <osThreadNew>

			  motorStarted = 1;
 800094e:	4b04      	ldr	r3, [pc, #16]	; (8000960 <HandleButton+0x8c>)
 8000950:	2201      	movs	r2, #1
 8000952:	701a      	strb	r2, [r3, #0]
	osSemaphoreAcquire(SemaphoreButtonHandle, osWaitForever);
 8000954:	e7ca      	b.n	80008ec <HandleButton+0x18>
 8000956:	bf00      	nop
 8000958:	20004ab4 	.word	0x20004ab4
 800095c:	40020000 	.word	0x40020000
 8000960:	20000090 	.word	0x20000090
 8000964:	08000821 	.word	0x08000821

08000968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a04      	ldr	r2, [pc, #16]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d101      	bne.n	800097e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800097a:	f000 f96d 	bl	8000c58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40014400 	.word	0x40014400

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000992:	e7fe      	b.n	8000992 <Error_Handler+0x6>

08000994 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_MspInit+0x54>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a11      	ldr	r2, [pc, #68]	; (80009e8 <HAL_MspInit+0x54>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_MspInit+0x54>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_MspInit+0x54>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_MspInit+0x54>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <HAL_MspInit+0x54>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	210f      	movs	r1, #15
 80009d6:	f06f 0001 	mvn.w	r0, #1
 80009da:	f000 fa15 	bl	8000e08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009fc:	d10d      	bne.n	8000a1a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_TIM_Base_MspInit+0x3c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_TIM_Base_MspInit+0x3c>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_TIM_Base_MspInit+0x3c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3714      	adds	r7, #20
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a4c:	d11d      	bne.n	8000a8a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <HAL_TIM_MspPostInit+0x68>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a0f      	ldr	r2, [pc, #60]	; (8000a94 <HAL_TIM_MspPostInit+0x68>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <HAL_TIM_MspPostInit+0x68>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a6a:	230f      	movs	r3, #15
 8000a6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 030c 	add.w	r3, r7, #12
 8000a82:	4619      	mov	r1, r3
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <HAL_TIM_MspPostInit+0x6c>)
 8000a86:	f000 f9e9 	bl	8000e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3720      	adds	r7, #32
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020000 	.word	0x40020000

08000a9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08c      	sub	sp, #48	; 0x30
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	2019      	movs	r0, #25
 8000ab2:	f000 f9a9 	bl	8000e08 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ab6:	2019      	movs	r0, #25
 8000ab8:	f000 f9c2 	bl	8000e40 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <HAL_InitTick+0xa0>)
 8000ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac4:	4a1d      	ldr	r2, [pc, #116]	; (8000b3c <HAL_InitTick+0xa0>)
 8000ac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aca:	6453      	str	r3, [r2, #68]	; 0x44
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <HAL_InitTick+0xa0>)
 8000ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad8:	f107 0210 	add.w	r2, r7, #16
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 ffb6 	bl	8001a54 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ae8:	f000 ffa0 	bl	8001a2c <HAL_RCC_GetPCLK2Freq>
 8000aec:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af0:	4a13      	ldr	r2, [pc, #76]	; (8000b40 <HAL_InitTick+0xa4>)
 8000af2:	fba2 2303 	umull	r2, r3, r2, r3
 8000af6:	0c9b      	lsrs	r3, r3, #18
 8000af8:	3b01      	subs	r3, #1
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_InitTick+0xa8>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <HAL_InitTick+0xac>)
 8000b00:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_InitTick+0xa8>)
 8000b04:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b08:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <HAL_InitTick+0xa8>)
 8000b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b0e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_InitTick+0xa8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_InitTick+0xa8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000b1c:	4809      	ldr	r0, [pc, #36]	; (8000b44 <HAL_InitTick+0xa8>)
 8000b1e:	f000 ffcb 	bl	8001ab8 <HAL_TIM_Base_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d104      	bne.n	8000b32 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000b28:	4806      	ldr	r0, [pc, #24]	; (8000b44 <HAL_InitTick+0xa8>)
 8000b2a:	f001 f815 	bl	8001b58 <HAL_TIM_Base_Start_IT>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	e000      	b.n	8000b34 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3730      	adds	r7, #48	; 0x30
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	431bde83 	.word	0x431bde83
 8000b44:	20004ab8 	.word	0x20004ab8
 8000b48:	40014400 	.word	0x40014400

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000b7c:	2010      	movs	r0, #16
 8000b7e:	f000 fb21 	bl	80011c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b8e:	f001 f9b3 	bl	8001ef8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20004ab8 	.word	0x20004ab8

08000b9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <SystemInit+0x20>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <SystemInit+0x20>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bc6:	490e      	ldr	r1, [pc, #56]	; (8000c00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bdc:	4c0b      	ldr	r4, [pc, #44]	; (8000c0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bea:	f7ff ffd7 	bl	8000b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bee:	f005 fa2b 	bl	8006048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf2:	f7ff fc75 	bl	80004e0 <main>
  bx  lr    
 8000bf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c04:	08006334 	.word	0x08006334
  ldr r2, =_sbss
 8000c08:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c0c:	20004b44 	.word	0x20004b44

08000c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC_IRQHandler>
	...

08000c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c18:	4b0e      	ldr	r3, [pc, #56]	; (8000c54 <HAL_Init+0x40>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <HAL_Init+0x40>)
 8000c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c24:	4b0b      	ldr	r3, [pc, #44]	; (8000c54 <HAL_Init+0x40>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <HAL_Init+0x40>)
 8000c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <HAL_Init+0x40>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a07      	ldr	r2, [pc, #28]	; (8000c54 <HAL_Init+0x40>)
 8000c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f000 f8d8 	bl	8000df2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c42:	2005      	movs	r0, #5
 8000c44:	f7ff ff2a 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c48:	f7ff fea4 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023c00 	.word	0x40023c00

08000c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x20>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x24>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_IncTick+0x24>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20004b00 	.word	0x20004b00

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <HAL_GetTick+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20004b00 	.word	0x20004b00

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db0b      	blt.n	8000d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	4907      	ldr	r1, [pc, #28]	; (8000d34 <__NVIC_EnableIRQ+0x38>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db0a      	blt.n	8000d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	490c      	ldr	r1, [pc, #48]	; (8000d84 <__NVIC_SetPriority+0x4c>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0112      	lsls	r2, r2, #4
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d60:	e00a      	b.n	8000d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4908      	ldr	r1, [pc, #32]	; (8000d88 <__NVIC_SetPriority+0x50>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	761a      	strb	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	4313      	orrs	r3, r2
         );
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	; 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ff4c 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
 8000e14:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1a:	f7ff ff61 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e1e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	68b9      	ldr	r1, [r7, #8]
 8000e24:	6978      	ldr	r0, [r7, #20]
 8000e26:	f7ff ffb1 	bl	8000d8c <NVIC_EncodePriority>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ff80 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff54 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
 8000e76:	e159      	b.n	800112c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e78:	2201      	movs	r2, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	f040 8148 	bne.w	8001126 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d005      	beq.n	8000eae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d130      	bne.n	8000f10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	2203      	movs	r2, #3
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	68da      	ldr	r2, [r3, #12]
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	091b      	lsrs	r3, r3, #4
 8000efa:	f003 0201 	and.w	r2, r3, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d017      	beq.n	8000f4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0303 	and.w	r3, r3, #3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d123      	bne.n	8000fa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	08da      	lsrs	r2, r3, #3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3208      	adds	r2, #8
 8000f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	220f      	movs	r2, #15
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	691a      	ldr	r2, [r3, #16]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	69b9      	ldr	r1, [r7, #24]
 8000f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0203 	and.w	r2, r3, #3
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 80a2 	beq.w	8001126 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b56      	ldr	r3, [pc, #344]	; (8001140 <HAL_GPIO_Init+0x2e4>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	4a55      	ldr	r2, [pc, #340]	; (8001140 <HAL_GPIO_Init+0x2e4>)
 8000fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff2:	4b53      	ldr	r3, [pc, #332]	; (8001140 <HAL_GPIO_Init+0x2e4>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ffe:	4a51      	ldr	r2, [pc, #324]	; (8001144 <HAL_GPIO_Init+0x2e8>)
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	3302      	adds	r3, #2
 8001006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	220f      	movs	r2, #15
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a48      	ldr	r2, [pc, #288]	; (8001148 <HAL_GPIO_Init+0x2ec>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d019      	beq.n	800105e <HAL_GPIO_Init+0x202>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a47      	ldr	r2, [pc, #284]	; (800114c <HAL_GPIO_Init+0x2f0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d013      	beq.n	800105a <HAL_GPIO_Init+0x1fe>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a46      	ldr	r2, [pc, #280]	; (8001150 <HAL_GPIO_Init+0x2f4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d00d      	beq.n	8001056 <HAL_GPIO_Init+0x1fa>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a45      	ldr	r2, [pc, #276]	; (8001154 <HAL_GPIO_Init+0x2f8>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d007      	beq.n	8001052 <HAL_GPIO_Init+0x1f6>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a44      	ldr	r2, [pc, #272]	; (8001158 <HAL_GPIO_Init+0x2fc>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d101      	bne.n	800104e <HAL_GPIO_Init+0x1f2>
 800104a:	2304      	movs	r3, #4
 800104c:	e008      	b.n	8001060 <HAL_GPIO_Init+0x204>
 800104e:	2307      	movs	r3, #7
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x204>
 8001052:	2303      	movs	r3, #3
 8001054:	e004      	b.n	8001060 <HAL_GPIO_Init+0x204>
 8001056:	2302      	movs	r3, #2
 8001058:	e002      	b.n	8001060 <HAL_GPIO_Init+0x204>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <HAL_GPIO_Init+0x204>
 800105e:	2300      	movs	r3, #0
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	f002 0203 	and.w	r2, r2, #3
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4093      	lsls	r3, r2
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001070:	4934      	ldr	r1, [pc, #208]	; (8001144 <HAL_GPIO_Init+0x2e8>)
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800107e:	4b37      	ldr	r3, [pc, #220]	; (800115c <HAL_GPIO_Init+0x300>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a2:	4a2e      	ldr	r2, [pc, #184]	; (800115c <HAL_GPIO_Init+0x300>)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010a8:	4b2c      	ldr	r3, [pc, #176]	; (800115c <HAL_GPIO_Init+0x300>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010cc:	4a23      	ldr	r2, [pc, #140]	; (800115c <HAL_GPIO_Init+0x300>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <HAL_GPIO_Init+0x300>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010f6:	4a19      	ldr	r2, [pc, #100]	; (800115c <HAL_GPIO_Init+0x300>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <HAL_GPIO_Init+0x300>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <HAL_GPIO_Init+0x300>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3301      	adds	r3, #1
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	2b0f      	cmp	r3, #15
 8001130:	f67f aea2 	bls.w	8000e78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001134:	bf00      	nop
 8001136:	3724      	adds	r7, #36	; 0x24
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	40023800 	.word	0x40023800
 8001144:	40013800 	.word	0x40013800
 8001148:	40020000 	.word	0x40020000
 800114c:	40020400 	.word	0x40020400
 8001150:	40020800 	.word	0x40020800
 8001154:	40020c00 	.word	0x40020c00
 8001158:	40021000 	.word	0x40021000
 800115c:	40013c00 	.word	0x40013c00

08001160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691a      	ldr	r2, [r3, #16]
 8001170:	887b      	ldrh	r3, [r7, #2]
 8001172:	4013      	ands	r3, r2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d002      	beq.n	800117e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	e001      	b.n	8001182 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001182:	7bfb      	ldrb	r3, [r7, #15]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	807b      	strh	r3, [r7, #2]
 800119c:	4613      	mov	r3, r2
 800119e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011a0:	787b      	ldrb	r3, [r7, #1]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011a6:	887a      	ldrh	r2, [r7, #2]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011ac:	e003      	b.n	80011b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	041a      	lsls	r2, r3, #16
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	619a      	str	r2, [r3, #24]
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011d0:	695a      	ldr	r2, [r3, #20]
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d006      	beq.n	80011e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011da:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011dc:	88fb      	ldrh	r3, [r7, #6]
 80011de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fb08 	bl	80007f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40013c00 	.word	0x40013c00

080011f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e264      	b.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d075      	beq.n	80012fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001212:	4ba3      	ldr	r3, [pc, #652]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b04      	cmp	r3, #4
 800121c:	d00c      	beq.n	8001238 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800121e:	4ba0      	ldr	r3, [pc, #640]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001226:	2b08      	cmp	r3, #8
 8001228:	d112      	bne.n	8001250 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122a:	4b9d      	ldr	r3, [pc, #628]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001236:	d10b      	bne.n	8001250 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001238:	4b99      	ldr	r3, [pc, #612]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d05b      	beq.n	80012fc <HAL_RCC_OscConfig+0x108>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d157      	bne.n	80012fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e23f      	b.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001258:	d106      	bne.n	8001268 <HAL_RCC_OscConfig+0x74>
 800125a:	4b91      	ldr	r3, [pc, #580]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a90      	ldr	r2, [pc, #576]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e01d      	b.n	80012a4 <HAL_RCC_OscConfig+0xb0>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001270:	d10c      	bne.n	800128c <HAL_RCC_OscConfig+0x98>
 8001272:	4b8b      	ldr	r3, [pc, #556]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a8a      	ldr	r2, [pc, #552]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	4b88      	ldr	r3, [pc, #544]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a87      	ldr	r2, [pc, #540]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	e00b      	b.n	80012a4 <HAL_RCC_OscConfig+0xb0>
 800128c:	4b84      	ldr	r3, [pc, #528]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a83      	ldr	r2, [pc, #524]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b81      	ldr	r3, [pc, #516]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a80      	ldr	r2, [pc, #512]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 800129e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d013      	beq.n	80012d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ac:	f7ff fce8 	bl	8000c80 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b4:	f7ff fce4 	bl	8000c80 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b64      	cmp	r3, #100	; 0x64
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e204      	b.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	4b76      	ldr	r3, [pc, #472]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0xc0>
 80012d2:	e014      	b.n	80012fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7ff fcd4 	bl	8000c80 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fcd0 	bl	8000c80 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e1f0      	b.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ee:	4b6c      	ldr	r3, [pc, #432]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f0      	bne.n	80012dc <HAL_RCC_OscConfig+0xe8>
 80012fa:	e000      	b.n	80012fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d063      	beq.n	80013d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800130a:	4b65      	ldr	r3, [pc, #404]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00b      	beq.n	800132e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001316:	4b62      	ldr	r3, [pc, #392]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800131e:	2b08      	cmp	r3, #8
 8001320:	d11c      	bne.n	800135c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001322:	4b5f      	ldr	r3, [pc, #380]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d116      	bne.n	800135c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132e:	4b5c      	ldr	r3, [pc, #368]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d005      	beq.n	8001346 <HAL_RCC_OscConfig+0x152>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d001      	beq.n	8001346 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e1c4      	b.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001346:	4b56      	ldr	r3, [pc, #344]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	4952      	ldr	r1, [pc, #328]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135a:	e03a      	b.n	80013d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d020      	beq.n	80013a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001364:	4b4f      	ldr	r3, [pc, #316]	; (80014a4 <HAL_RCC_OscConfig+0x2b0>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136a:	f7ff fc89 	bl	8000c80 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001372:	f7ff fc85 	bl	8000c80 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e1a5      	b.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001384:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0f0      	beq.n	8001372 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001390:	4b43      	ldr	r3, [pc, #268]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	4940      	ldr	r1, [pc, #256]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	600b      	str	r3, [r1, #0]
 80013a4:	e015      	b.n	80013d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a6:	4b3f      	ldr	r3, [pc, #252]	; (80014a4 <HAL_RCC_OscConfig+0x2b0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ac:	f7ff fc68 	bl	8000c80 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b4:	f7ff fc64 	bl	8000c80 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e184      	b.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c6:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d030      	beq.n	8001440 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d016      	beq.n	8001414 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e6:	4b30      	ldr	r3, [pc, #192]	; (80014a8 <HAL_RCC_OscConfig+0x2b4>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ec:	f7ff fc48 	bl	8000c80 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f4:	f7ff fc44 	bl	8000c80 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e164      	b.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001406:	4b26      	ldr	r3, [pc, #152]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f0      	beq.n	80013f4 <HAL_RCC_OscConfig+0x200>
 8001412:	e015      	b.n	8001440 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001414:	4b24      	ldr	r3, [pc, #144]	; (80014a8 <HAL_RCC_OscConfig+0x2b4>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141a:	f7ff fc31 	bl	8000c80 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001422:	f7ff fc2d 	bl	8000c80 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e14d      	b.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001434:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d1f0      	bne.n	8001422 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 80a0 	beq.w	800158e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001452:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10f      	bne.n	800147e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a0e      	ldr	r2, [pc, #56]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800147a:	2301      	movs	r3, #1
 800147c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <HAL_RCC_OscConfig+0x2b8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001486:	2b00      	cmp	r3, #0
 8001488:	d121      	bne.n	80014ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <HAL_RCC_OscConfig+0x2b8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a07      	ldr	r2, [pc, #28]	; (80014ac <HAL_RCC_OscConfig+0x2b8>)
 8001490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001496:	f7ff fbf3 	bl	8000c80 <HAL_GetTick>
 800149a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149c:	e011      	b.n	80014c2 <HAL_RCC_OscConfig+0x2ce>
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	42470000 	.word	0x42470000
 80014a8:	42470e80 	.word	0x42470e80
 80014ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b0:	f7ff fbe6 	bl	8000c80 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e106      	b.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c2:	4b85      	ldr	r3, [pc, #532]	; (80016d8 <HAL_RCC_OscConfig+0x4e4>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f0      	beq.n	80014b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d106      	bne.n	80014e4 <HAL_RCC_OscConfig+0x2f0>
 80014d6:	4b81      	ldr	r3, [pc, #516]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014da:	4a80      	ldr	r2, [pc, #512]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6713      	str	r3, [r2, #112]	; 0x70
 80014e2:	e01c      	b.n	800151e <HAL_RCC_OscConfig+0x32a>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b05      	cmp	r3, #5
 80014ea:	d10c      	bne.n	8001506 <HAL_RCC_OscConfig+0x312>
 80014ec:	4b7b      	ldr	r3, [pc, #492]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 80014ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f0:	4a7a      	ldr	r2, [pc, #488]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 80014f2:	f043 0304 	orr.w	r3, r3, #4
 80014f6:	6713      	str	r3, [r2, #112]	; 0x70
 80014f8:	4b78      	ldr	r3, [pc, #480]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 80014fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fc:	4a77      	ldr	r2, [pc, #476]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6713      	str	r3, [r2, #112]	; 0x70
 8001504:	e00b      	b.n	800151e <HAL_RCC_OscConfig+0x32a>
 8001506:	4b75      	ldr	r3, [pc, #468]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 8001508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150a:	4a74      	ldr	r2, [pc, #464]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	6713      	str	r3, [r2, #112]	; 0x70
 8001512:	4b72      	ldr	r3, [pc, #456]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 8001514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001516:	4a71      	ldr	r2, [pc, #452]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 8001518:	f023 0304 	bic.w	r3, r3, #4
 800151c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d015      	beq.n	8001552 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001526:	f7ff fbab 	bl	8000c80 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152c:	e00a      	b.n	8001544 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800152e:	f7ff fba7 	bl	8000c80 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	f241 3288 	movw	r2, #5000	; 0x1388
 800153c:	4293      	cmp	r3, r2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e0c5      	b.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001544:	4b65      	ldr	r3, [pc, #404]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0ee      	beq.n	800152e <HAL_RCC_OscConfig+0x33a>
 8001550:	e014      	b.n	800157c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001552:	f7ff fb95 	bl	8000c80 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001558:	e00a      	b.n	8001570 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800155a:	f7ff fb91 	bl	8000c80 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	f241 3288 	movw	r2, #5000	; 0x1388
 8001568:	4293      	cmp	r3, r2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e0af      	b.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001570:	4b5a      	ldr	r3, [pc, #360]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 8001572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1ee      	bne.n	800155a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800157c:	7dfb      	ldrb	r3, [r7, #23]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d105      	bne.n	800158e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001582:	4b56      	ldr	r3, [pc, #344]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	4a55      	ldr	r2, [pc, #340]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 8001588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800158c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 809b 	beq.w	80016ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001598:	4b50      	ldr	r3, [pc, #320]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 030c 	and.w	r3, r3, #12
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d05c      	beq.n	800165e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d141      	bne.n	8001630 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ac:	4b4c      	ldr	r3, [pc, #304]	; (80016e0 <HAL_RCC_OscConfig+0x4ec>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7ff fb65 	bl	8000c80 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015ba:	f7ff fb61 	bl	8000c80 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e081      	b.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015cc:	4b43      	ldr	r3, [pc, #268]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f0      	bne.n	80015ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69da      	ldr	r2, [r3, #28]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	019b      	lsls	r3, r3, #6
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ee:	085b      	lsrs	r3, r3, #1
 80015f0:	3b01      	subs	r3, #1
 80015f2:	041b      	lsls	r3, r3, #16
 80015f4:	431a      	orrs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fa:	061b      	lsls	r3, r3, #24
 80015fc:	4937      	ldr	r1, [pc, #220]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001602:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <HAL_RCC_OscConfig+0x4ec>)
 8001604:	2201      	movs	r2, #1
 8001606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fb3a 	bl	8000c80 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff fb36 	bl	8000c80 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e056      	b.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001622:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x41c>
 800162e:	e04e      	b.n	80016ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001630:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <HAL_RCC_OscConfig+0x4ec>)
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001636:	f7ff fb23 	bl	8000c80 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800163e:	f7ff fb1f 	bl	8000c80 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e03f      	b.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f0      	bne.n	800163e <HAL_RCC_OscConfig+0x44a>
 800165c:	e037      	b.n	80016ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e032      	b.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800166a:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HAL_RCC_OscConfig+0x4e8>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d028      	beq.n	80016ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001682:	429a      	cmp	r2, r3
 8001684:	d121      	bne.n	80016ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001690:	429a      	cmp	r2, r3
 8001692:	d11a      	bne.n	80016ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800169a:	4013      	ands	r3, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d111      	bne.n	80016ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	085b      	lsrs	r3, r3, #1
 80016b2:	3b01      	subs	r3, #1
 80016b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d107      	bne.n	80016ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d001      	beq.n	80016ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40007000 	.word	0x40007000
 80016dc:	40023800 	.word	0x40023800
 80016e0:	42470060 	.word	0x42470060

080016e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0cc      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016f8:	4b68      	ldr	r3, [pc, #416]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d90c      	bls.n	8001720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b65      	ldr	r3, [pc, #404]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170e:	4b63      	ldr	r3, [pc, #396]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0b8      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d020      	beq.n	800176e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001738:	4b59      	ldr	r3, [pc, #356]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4a58      	ldr	r2, [pc, #352]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001742:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0308 	and.w	r3, r3, #8
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001750:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4a52      	ldr	r2, [pc, #328]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800175a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800175c:	4b50      	ldr	r3, [pc, #320]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	494d      	ldr	r1, [pc, #308]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	4313      	orrs	r3, r2
 800176c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d044      	beq.n	8001804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	4b47      	ldr	r3, [pc, #284]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d119      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e07f      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d003      	beq.n	80017a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d107      	bne.n	80017b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a2:	4b3f      	ldr	r3, [pc, #252]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d109      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e06f      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b2:	4b3b      	ldr	r3, [pc, #236]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e067      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c2:	4b37      	ldr	r3, [pc, #220]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f023 0203 	bic.w	r2, r3, #3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4934      	ldr	r1, [pc, #208]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d4:	f7ff fa54 	bl	8000c80 <HAL_GetTick>
 80017d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017dc:	f7ff fa50 	bl	8000c80 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e04f      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f2:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 020c 	and.w	r2, r3, #12
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	429a      	cmp	r2, r3
 8001802:	d1eb      	bne.n	80017dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001804:	4b25      	ldr	r3, [pc, #148]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d20c      	bcs.n	800182c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001812:	4b22      	ldr	r3, [pc, #136]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	b2d2      	uxtb	r2, r2
 8001818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800181a:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_RCC_ClockConfig+0x1b8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	429a      	cmp	r2, r3
 8001826:	d001      	beq.n	800182c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e032      	b.n	8001892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d008      	beq.n	800184a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4916      	ldr	r1, [pc, #88]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	490e      	ldr	r1, [pc, #56]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	4313      	orrs	r3, r2
 8001868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800186a:	f000 f821 	bl	80018b0 <HAL_RCC_GetSysClockFreq>
 800186e:	4601      	mov	r1, r0
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	5cd3      	ldrb	r3, [r2, r3]
 800187e:	fa21 f303 	lsr.w	r3, r1, r3
 8001882:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_RCC_ClockConfig+0x1c8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff f906 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023c00 	.word	0x40023c00
 80018a0:	40023800 	.word	0x40023800
 80018a4:	080062ac 	.word	0x080062ac
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000004 	.word	0x20000004

080018b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	607b      	str	r3, [r7, #4]
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	2300      	movs	r3, #0
 80018c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c6:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x158>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 030c 	and.w	r3, r3, #12
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	d007      	beq.n	80018e2 <HAL_RCC_GetSysClockFreq+0x32>
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d008      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0x38>
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f040 808d 	bne.w	80019f6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018dc:	4b4b      	ldr	r3, [pc, #300]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x15c>)
 80018de:	60bb      	str	r3, [r7, #8]
       break;
 80018e0:	e08c      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018e2:	4b4b      	ldr	r3, [pc, #300]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x160>)
 80018e4:	60bb      	str	r3, [r7, #8]
      break;
 80018e6:	e089      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018e8:	4b47      	ldr	r3, [pc, #284]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x158>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018f2:	4b45      	ldr	r3, [pc, #276]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x158>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d023      	beq.n	8001946 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018fe:	4b42      	ldr	r3, [pc, #264]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x158>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	099b      	lsrs	r3, r3, #6
 8001904:	f04f 0400 	mov.w	r4, #0
 8001908:	f240 11ff 	movw	r1, #511	; 0x1ff
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	ea03 0501 	and.w	r5, r3, r1
 8001914:	ea04 0602 	and.w	r6, r4, r2
 8001918:	4a3d      	ldr	r2, [pc, #244]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x160>)
 800191a:	fb02 f106 	mul.w	r1, r2, r6
 800191e:	2200      	movs	r2, #0
 8001920:	fb02 f205 	mul.w	r2, r2, r5
 8001924:	440a      	add	r2, r1
 8001926:	493a      	ldr	r1, [pc, #232]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x160>)
 8001928:	fba5 0101 	umull	r0, r1, r5, r1
 800192c:	1853      	adds	r3, r2, r1
 800192e:	4619      	mov	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f04f 0400 	mov.w	r4, #0
 8001936:	461a      	mov	r2, r3
 8001938:	4623      	mov	r3, r4
 800193a:	f7fe fc51 	bl	80001e0 <__aeabi_uldivmod>
 800193e:	4603      	mov	r3, r0
 8001940:	460c      	mov	r4, r1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	e049      	b.n	80019da <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001946:	4b30      	ldr	r3, [pc, #192]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x158>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	099b      	lsrs	r3, r3, #6
 800194c:	f04f 0400 	mov.w	r4, #0
 8001950:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	ea03 0501 	and.w	r5, r3, r1
 800195c:	ea04 0602 	and.w	r6, r4, r2
 8001960:	4629      	mov	r1, r5
 8001962:	4632      	mov	r2, r6
 8001964:	f04f 0300 	mov.w	r3, #0
 8001968:	f04f 0400 	mov.w	r4, #0
 800196c:	0154      	lsls	r4, r2, #5
 800196e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001972:	014b      	lsls	r3, r1, #5
 8001974:	4619      	mov	r1, r3
 8001976:	4622      	mov	r2, r4
 8001978:	1b49      	subs	r1, r1, r5
 800197a:	eb62 0206 	sbc.w	r2, r2, r6
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	f04f 0400 	mov.w	r4, #0
 8001986:	0194      	lsls	r4, r2, #6
 8001988:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800198c:	018b      	lsls	r3, r1, #6
 800198e:	1a5b      	subs	r3, r3, r1
 8001990:	eb64 0402 	sbc.w	r4, r4, r2
 8001994:	f04f 0100 	mov.w	r1, #0
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	00e2      	lsls	r2, r4, #3
 800199e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019a2:	00d9      	lsls	r1, r3, #3
 80019a4:	460b      	mov	r3, r1
 80019a6:	4614      	mov	r4, r2
 80019a8:	195b      	adds	r3, r3, r5
 80019aa:	eb44 0406 	adc.w	r4, r4, r6
 80019ae:	f04f 0100 	mov.w	r1, #0
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	02a2      	lsls	r2, r4, #10
 80019b8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019bc:	0299      	lsls	r1, r3, #10
 80019be:	460b      	mov	r3, r1
 80019c0:	4614      	mov	r4, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	4621      	mov	r1, r4
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f04f 0400 	mov.w	r4, #0
 80019cc:	461a      	mov	r2, r3
 80019ce:	4623      	mov	r3, r4
 80019d0:	f7fe fc06 	bl	80001e0 <__aeabi_uldivmod>
 80019d4:	4603      	mov	r3, r0
 80019d6:	460c      	mov	r4, r1
 80019d8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019da:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x158>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	0c1b      	lsrs	r3, r3, #16
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	3301      	adds	r3, #1
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	60bb      	str	r3, [r7, #8]
      break;
 80019f4:	e002      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x15c>)
 80019f8:	60bb      	str	r3, [r7, #8]
      break;
 80019fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fc:	68bb      	ldr	r3, [r7, #8]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	00f42400 	.word	0x00f42400
 8001a10:	017d7840 	.word	0x017d7840

08001a14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000000 	.word	0x20000000

08001a2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a30:	f7ff fff0 	bl	8001a14 <HAL_RCC_GetHCLKFreq>
 8001a34:	4601      	mov	r1, r0
 8001a36:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	0b5b      	lsrs	r3, r3, #13
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	4a03      	ldr	r2, [pc, #12]	; (8001a50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a42:	5cd3      	ldrb	r3, [r2, r3]
 8001a44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	080062bc 	.word	0x080062bc

08001a54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	220f      	movs	r2, #15
 8001a62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0203 	and.w	r2, r3, #3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_GetClockConfig+0x5c>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	08db      	lsrs	r3, r3, #3
 8001a8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <HAL_RCC_GetClockConfig+0x60>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0207 	and.w	r2, r3, #7
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	601a      	str	r2, [r3, #0]
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40023c00 	.word	0x40023c00

08001ab8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e041      	b.n	8001b4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d106      	bne.n	8001ae4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7fe ff84 	bl	80009ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3304      	adds	r3, #4
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f000 fcac 	bl	8002454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
	...

08001b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d001      	beq.n	8001b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e044      	b.n	8001bfa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68da      	ldr	r2, [r3, #12]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <HAL_TIM_Base_Start_IT+0xb0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d018      	beq.n	8001bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b9a:	d013      	beq.n	8001bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a1a      	ldr	r2, [pc, #104]	; (8001c0c <HAL_TIM_Base_Start_IT+0xb4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00e      	beq.n	8001bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a19      	ldr	r2, [pc, #100]	; (8001c10 <HAL_TIM_Base_Start_IT+0xb8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d009      	beq.n	8001bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a17      	ldr	r2, [pc, #92]	; (8001c14 <HAL_TIM_Base_Start_IT+0xbc>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d004      	beq.n	8001bc4 <HAL_TIM_Base_Start_IT+0x6c>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a16      	ldr	r2, [pc, #88]	; (8001c18 <HAL_TIM_Base_Start_IT+0xc0>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d111      	bne.n	8001be8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2b06      	cmp	r3, #6
 8001bd4:	d010      	beq.n	8001bf8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 0201 	orr.w	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001be6:	e007      	b.n	8001bf8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	40000400 	.word	0x40000400
 8001c10:	40000800 	.word	0x40000800
 8001c14:	40000c00 	.word	0x40000c00
 8001c18:	40014000 	.word	0x40014000

08001c1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e041      	b.n	8001cb2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d106      	bne.n	8001c48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f839 	bl	8001cba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3304      	adds	r3, #4
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	f000 fbfa 	bl	8002454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d109      	bne.n	8001cf4 <HAL_TIM_PWM_Start+0x24>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	bf14      	ite	ne
 8001cec:	2301      	movne	r3, #1
 8001cee:	2300      	moveq	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	e022      	b.n	8001d3a <HAL_TIM_PWM_Start+0x6a>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d109      	bne.n	8001d0e <HAL_TIM_PWM_Start+0x3e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	bf14      	ite	ne
 8001d06:	2301      	movne	r3, #1
 8001d08:	2300      	moveq	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	e015      	b.n	8001d3a <HAL_TIM_PWM_Start+0x6a>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	d109      	bne.n	8001d28 <HAL_TIM_PWM_Start+0x58>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	bf14      	ite	ne
 8001d20:	2301      	movne	r3, #1
 8001d22:	2300      	moveq	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	e008      	b.n	8001d3a <HAL_TIM_PWM_Start+0x6a>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	bf14      	ite	ne
 8001d34:	2301      	movne	r3, #1
 8001d36:	2300      	moveq	r3, #0
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e068      	b.n	8001e14 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d104      	bne.n	8001d52 <HAL_TIM_PWM_Start+0x82>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d50:	e013      	b.n	8001d7a <HAL_TIM_PWM_Start+0xaa>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d104      	bne.n	8001d62 <HAL_TIM_PWM_Start+0x92>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d60:	e00b      	b.n	8001d7a <HAL_TIM_PWM_Start+0xaa>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d104      	bne.n	8001d72 <HAL_TIM_PWM_Start+0xa2>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d70:	e003      	b.n	8001d7a <HAL_TIM_PWM_Start+0xaa>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2202      	movs	r2, #2
 8001d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	6839      	ldr	r1, [r7, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 fe0c 	bl	80029a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a23      	ldr	r2, [pc, #140]	; (8001e1c <HAL_TIM_PWM_Start+0x14c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d107      	bne.n	8001da2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001da0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1d      	ldr	r2, [pc, #116]	; (8001e1c <HAL_TIM_PWM_Start+0x14c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d018      	beq.n	8001dde <HAL_TIM_PWM_Start+0x10e>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db4:	d013      	beq.n	8001dde <HAL_TIM_PWM_Start+0x10e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <HAL_TIM_PWM_Start+0x150>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d00e      	beq.n	8001dde <HAL_TIM_PWM_Start+0x10e>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a17      	ldr	r2, [pc, #92]	; (8001e24 <HAL_TIM_PWM_Start+0x154>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d009      	beq.n	8001dde <HAL_TIM_PWM_Start+0x10e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a16      	ldr	r2, [pc, #88]	; (8001e28 <HAL_TIM_PWM_Start+0x158>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d004      	beq.n	8001dde <HAL_TIM_PWM_Start+0x10e>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a14      	ldr	r2, [pc, #80]	; (8001e2c <HAL_TIM_PWM_Start+0x15c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d111      	bne.n	8001e02 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b06      	cmp	r3, #6
 8001dee:	d010      	beq.n	8001e12 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e00:	e007      	b.n	8001e12 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f042 0201 	orr.w	r2, r2, #1
 8001e10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40010000 	.word	0x40010000
 8001e20:	40000400 	.word	0x40000400
 8001e24:	40000800 	.word	0x40000800
 8001e28:	40000c00 	.word	0x40000c00
 8001e2c:	40014000 	.word	0x40014000

08001e30 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	6839      	ldr	r1, [r7, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 fdac 	bl	80029a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a29      	ldr	r2, [pc, #164]	; (8001ef4 <HAL_TIM_PWM_Stop+0xc4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d117      	bne.n	8001e82 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6a1a      	ldr	r2, [r3, #32]
 8001e58:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d10f      	bne.n	8001e82 <HAL_TIM_PWM_Stop+0x52>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6a1a      	ldr	r2, [r3, #32]
 8001e68:	f240 4344 	movw	r3, #1092	; 0x444
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d107      	bne.n	8001e82 <HAL_TIM_PWM_Stop+0x52>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6a1a      	ldr	r2, [r3, #32]
 8001e88:	f241 1311 	movw	r3, #4369	; 0x1111
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10f      	bne.n	8001eb2 <HAL_TIM_PWM_Stop+0x82>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6a1a      	ldr	r2, [r3, #32]
 8001e98:	f240 4344 	movw	r3, #1092	; 0x444
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d107      	bne.n	8001eb2 <HAL_TIM_PWM_Stop+0x82>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0201 	bic.w	r2, r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d104      	bne.n	8001ec2 <HAL_TIM_PWM_Stop+0x92>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ec0:	e013      	b.n	8001eea <HAL_TIM_PWM_Stop+0xba>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d104      	bne.n	8001ed2 <HAL_TIM_PWM_Stop+0xa2>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ed0:	e00b      	b.n	8001eea <HAL_TIM_PWM_Stop+0xba>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d104      	bne.n	8001ee2 <HAL_TIM_PWM_Stop+0xb2>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ee0:	e003      	b.n	8001eea <HAL_TIM_PWM_Stop+0xba>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40010000 	.word	0x40010000

08001ef8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d122      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d11b      	bne.n	8001f54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f06f 0202 	mvn.w	r2, #2
 8001f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fa6c 	bl	8002418 <HAL_TIM_IC_CaptureCallback>
 8001f40:	e005      	b.n	8001f4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 fa5e 	bl	8002404 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 fa6f 	bl	800242c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	f003 0304 	and.w	r3, r3, #4
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d122      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b04      	cmp	r3, #4
 8001f6e:	d11b      	bne.n	8001fa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f06f 0204 	mvn.w	r2, #4
 8001f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fa42 	bl	8002418 <HAL_TIM_IC_CaptureCallback>
 8001f94:	e005      	b.n	8001fa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 fa34 	bl	8002404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 fa45 	bl	800242c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b08      	cmp	r3, #8
 8001fb4:	d122      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0308 	and.w	r3, r3, #8
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d11b      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0208 	mvn.w	r2, #8
 8001fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fa18 	bl	8002418 <HAL_TIM_IC_CaptureCallback>
 8001fe8:	e005      	b.n	8001ff6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 fa0a 	bl	8002404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 fa1b 	bl	800242c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f003 0310 	and.w	r3, r3, #16
 8002006:	2b10      	cmp	r3, #16
 8002008:	d122      	bne.n	8002050 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0310 	and.w	r3, r3, #16
 8002014:	2b10      	cmp	r3, #16
 8002016:	d11b      	bne.n	8002050 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0210 	mvn.w	r2, #16
 8002020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2208      	movs	r2, #8
 8002026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f9ee 	bl	8002418 <HAL_TIM_IC_CaptureCallback>
 800203c:	e005      	b.n	800204a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f9e0 	bl	8002404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f9f1 	bl	800242c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b01      	cmp	r3, #1
 800205c:	d10e      	bne.n	800207c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b01      	cmp	r3, #1
 800206a:	d107      	bne.n	800207c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0201 	mvn.w	r2, #1
 8002074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe fc76 	bl	8000968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002086:	2b80      	cmp	r3, #128	; 0x80
 8002088:	d10e      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002094:	2b80      	cmp	r3, #128	; 0x80
 8002096:	d107      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 fd1a 	bl	8002adc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b2:	2b40      	cmp	r3, #64	; 0x40
 80020b4:	d10e      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c0:	2b40      	cmp	r3, #64	; 0x40
 80020c2:	d107      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f9b6 	bl	8002440 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	2b20      	cmp	r3, #32
 80020e0:	d10e      	bne.n	8002100 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b20      	cmp	r3, #32
 80020ee:	d107      	bne.n	8002100 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0220 	mvn.w	r2, #32
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fce4 	bl	8002ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002122:	2302      	movs	r3, #2
 8002124:	e0ae      	b.n	8002284 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b0c      	cmp	r3, #12
 8002132:	f200 809f 	bhi.w	8002274 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002136:	a201      	add	r2, pc, #4	; (adr r2, 800213c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213c:	08002171 	.word	0x08002171
 8002140:	08002275 	.word	0x08002275
 8002144:	08002275 	.word	0x08002275
 8002148:	08002275 	.word	0x08002275
 800214c:	080021b1 	.word	0x080021b1
 8002150:	08002275 	.word	0x08002275
 8002154:	08002275 	.word	0x08002275
 8002158:	08002275 	.word	0x08002275
 800215c:	080021f3 	.word	0x080021f3
 8002160:	08002275 	.word	0x08002275
 8002164:	08002275 	.word	0x08002275
 8002168:	08002275 	.word	0x08002275
 800216c:	08002233 	.word	0x08002233
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f9ec 	bl	8002554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0208 	orr.w	r2, r2, #8
 800218a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	699a      	ldr	r2, [r3, #24]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 0204 	bic.w	r2, r2, #4
 800219a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6999      	ldr	r1, [r3, #24]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	619a      	str	r2, [r3, #24]
      break;
 80021ae:	e064      	b.n	800227a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fa32 	bl	8002620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699a      	ldr	r2, [r3, #24]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6999      	ldr	r1, [r3, #24]
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	021a      	lsls	r2, r3, #8
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	619a      	str	r2, [r3, #24]
      break;
 80021f0:	e043      	b.n	800227a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68b9      	ldr	r1, [r7, #8]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 fa7d 	bl	80026f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	69da      	ldr	r2, [r3, #28]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0208 	orr.w	r2, r2, #8
 800220c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	69da      	ldr	r2, [r3, #28]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 0204 	bic.w	r2, r2, #4
 800221c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	69d9      	ldr	r1, [r3, #28]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	61da      	str	r2, [r3, #28]
      break;
 8002230:	e023      	b.n	800227a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68b9      	ldr	r1, [r7, #8]
 8002238:	4618      	mov	r0, r3
 800223a:	f000 fac7 	bl	80027cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	69da      	ldr	r2, [r3, #28]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800224c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	69da      	ldr	r2, [r3, #28]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800225c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	69d9      	ldr	r1, [r3, #28]
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	021a      	lsls	r2, r3, #8
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	61da      	str	r2, [r3, #28]
      break;
 8002272:	e002      	b.n	800227a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	75fb      	strb	r3, [r7, #23]
      break;
 8002278:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002282:	7dfb      	ldrb	r3, [r7, #23]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <HAL_TIM_ConfigClockSource+0x1c>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e0a9      	b.n	80023fc <HAL_TIM_ConfigClockSource+0x170>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2202      	movs	r2, #2
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	d067      	beq.n	80023b0 <HAL_TIM_ConfigClockSource+0x124>
 80022e0:	2b40      	cmp	r3, #64	; 0x40
 80022e2:	d80b      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x70>
 80022e4:	2b10      	cmp	r3, #16
 80022e6:	d073      	beq.n	80023d0 <HAL_TIM_ConfigClockSource+0x144>
 80022e8:	2b10      	cmp	r3, #16
 80022ea:	d802      	bhi.n	80022f2 <HAL_TIM_ConfigClockSource+0x66>
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d06f      	beq.n	80023d0 <HAL_TIM_ConfigClockSource+0x144>
 80022f0:	e077      	b.n	80023e2 <HAL_TIM_ConfigClockSource+0x156>
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	d06c      	beq.n	80023d0 <HAL_TIM_ConfigClockSource+0x144>
 80022f6:	2b30      	cmp	r3, #48	; 0x30
 80022f8:	d06a      	beq.n	80023d0 <HAL_TIM_ConfigClockSource+0x144>
 80022fa:	e072      	b.n	80023e2 <HAL_TIM_ConfigClockSource+0x156>
 80022fc:	2b70      	cmp	r3, #112	; 0x70
 80022fe:	d00d      	beq.n	800231c <HAL_TIM_ConfigClockSource+0x90>
 8002300:	2b70      	cmp	r3, #112	; 0x70
 8002302:	d804      	bhi.n	800230e <HAL_TIM_ConfigClockSource+0x82>
 8002304:	2b50      	cmp	r3, #80	; 0x50
 8002306:	d033      	beq.n	8002370 <HAL_TIM_ConfigClockSource+0xe4>
 8002308:	2b60      	cmp	r3, #96	; 0x60
 800230a:	d041      	beq.n	8002390 <HAL_TIM_ConfigClockSource+0x104>
 800230c:	e069      	b.n	80023e2 <HAL_TIM_ConfigClockSource+0x156>
 800230e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002312:	d069      	beq.n	80023e8 <HAL_TIM_ConfigClockSource+0x15c>
 8002314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002318:	d017      	beq.n	800234a <HAL_TIM_ConfigClockSource+0xbe>
 800231a:	e062      	b.n	80023e2 <HAL_TIM_ConfigClockSource+0x156>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	6899      	ldr	r1, [r3, #8]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f000 fb18 	bl	8002960 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800233e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	609a      	str	r2, [r3, #8]
      break;
 8002348:	e04f      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x15e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6899      	ldr	r1, [r3, #8]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f000 fb01 	bl	8002960 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800236c:	609a      	str	r2, [r3, #8]
      break;
 800236e:	e03c      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6859      	ldr	r1, [r3, #4]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	461a      	mov	r2, r3
 800237e:	f000 fa75 	bl	800286c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2150      	movs	r1, #80	; 0x50
 8002388:	4618      	mov	r0, r3
 800238a:	f000 face 	bl	800292a <TIM_ITRx_SetConfig>
      break;
 800238e:	e02c      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	6859      	ldr	r1, [r3, #4]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	461a      	mov	r2, r3
 800239e:	f000 fa94 	bl	80028ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2160      	movs	r1, #96	; 0x60
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 fabe 	bl	800292a <TIM_ITRx_SetConfig>
      break;
 80023ae:	e01c      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x15e>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	461a      	mov	r2, r3
 80023be:	f000 fa55 	bl	800286c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2140      	movs	r1, #64	; 0x40
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 faae 	bl	800292a <TIM_ITRx_SetConfig>
      break;
 80023ce:	e00c      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x15e>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	4610      	mov	r0, r2
 80023dc:	f000 faa5 	bl	800292a <TIM_ITRx_SetConfig>
      break;
 80023e0:	e003      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x15e>
    }

    default:
      status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
      break;
 80023e6:	e000      	b.n	80023ea <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80023e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a34      	ldr	r2, [pc, #208]	; (8002538 <TIM_Base_SetConfig+0xe4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d00f      	beq.n	800248c <TIM_Base_SetConfig+0x38>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002472:	d00b      	beq.n	800248c <TIM_Base_SetConfig+0x38>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a31      	ldr	r2, [pc, #196]	; (800253c <TIM_Base_SetConfig+0xe8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d007      	beq.n	800248c <TIM_Base_SetConfig+0x38>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a30      	ldr	r2, [pc, #192]	; (8002540 <TIM_Base_SetConfig+0xec>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d003      	beq.n	800248c <TIM_Base_SetConfig+0x38>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a2f      	ldr	r2, [pc, #188]	; (8002544 <TIM_Base_SetConfig+0xf0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d108      	bne.n	800249e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	4313      	orrs	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a25      	ldr	r2, [pc, #148]	; (8002538 <TIM_Base_SetConfig+0xe4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d01b      	beq.n	80024de <TIM_Base_SetConfig+0x8a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ac:	d017      	beq.n	80024de <TIM_Base_SetConfig+0x8a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a22      	ldr	r2, [pc, #136]	; (800253c <TIM_Base_SetConfig+0xe8>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d013      	beq.n	80024de <TIM_Base_SetConfig+0x8a>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a21      	ldr	r2, [pc, #132]	; (8002540 <TIM_Base_SetConfig+0xec>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00f      	beq.n	80024de <TIM_Base_SetConfig+0x8a>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a20      	ldr	r2, [pc, #128]	; (8002544 <TIM_Base_SetConfig+0xf0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00b      	beq.n	80024de <TIM_Base_SetConfig+0x8a>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a1f      	ldr	r2, [pc, #124]	; (8002548 <TIM_Base_SetConfig+0xf4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d007      	beq.n	80024de <TIM_Base_SetConfig+0x8a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a1e      	ldr	r2, [pc, #120]	; (800254c <TIM_Base_SetConfig+0xf8>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d003      	beq.n	80024de <TIM_Base_SetConfig+0x8a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a1d      	ldr	r2, [pc, #116]	; (8002550 <TIM_Base_SetConfig+0xfc>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d108      	bne.n	80024f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a08      	ldr	r2, [pc, #32]	; (8002538 <TIM_Base_SetConfig+0xe4>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d103      	bne.n	8002524 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	615a      	str	r2, [r3, #20]
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40010000 	.word	0x40010000
 800253c:	40000400 	.word	0x40000400
 8002540:	40000800 	.word	0x40000800
 8002544:	40000c00 	.word	0x40000c00
 8002548:	40014000 	.word	0x40014000
 800254c:	40014400 	.word	0x40014400
 8002550:	40014800 	.word	0x40014800

08002554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	f023 0201 	bic.w	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0303 	bic.w	r3, r3, #3
 800258a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f023 0302 	bic.w	r3, r3, #2
 800259c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a1c      	ldr	r2, [pc, #112]	; (800261c <TIM_OC1_SetConfig+0xc8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d10c      	bne.n	80025ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f023 0308 	bic.w	r3, r3, #8
 80025b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f023 0304 	bic.w	r3, r3, #4
 80025c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a13      	ldr	r2, [pc, #76]	; (800261c <TIM_OC1_SetConfig+0xc8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d111      	bne.n	80025f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	621a      	str	r2, [r3, #32]
}
 8002610:	bf00      	nop
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	40010000 	.word	0x40010000

08002620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	f023 0210 	bic.w	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800264e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	4313      	orrs	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f023 0320 	bic.w	r3, r3, #32
 800266a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a1e      	ldr	r2, [pc, #120]	; (80026f4 <TIM_OC2_SetConfig+0xd4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d10d      	bne.n	800269c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800269a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a15      	ldr	r2, [pc, #84]	; (80026f4 <TIM_OC2_SetConfig+0xd4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d113      	bne.n	80026cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	621a      	str	r2, [r3, #32]
}
 80026e6:	bf00      	nop
 80026e8:	371c      	adds	r7, #28
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40010000 	.word	0x40010000

080026f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b087      	sub	sp, #28
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f023 0303 	bic.w	r3, r3, #3
 800272e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <TIM_OC3_SetConfig+0xd0>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10d      	bne.n	8002772 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800275c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	021b      	lsls	r3, r3, #8
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4313      	orrs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a14      	ldr	r2, [pc, #80]	; (80027c8 <TIM_OC3_SetConfig+0xd0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d113      	bne.n	80027a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	011b      	lsls	r3, r3, #4
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	621a      	str	r2, [r3, #32]
}
 80027bc:	bf00      	nop
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	40010000 	.word	0x40010000

080027cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002802:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	021b      	lsls	r3, r3, #8
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002816:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	031b      	lsls	r3, r3, #12
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4313      	orrs	r3, r2
 8002822:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a10      	ldr	r2, [pc, #64]	; (8002868 <TIM_OC4_SetConfig+0x9c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d109      	bne.n	8002840 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002832:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	019b      	lsls	r3, r3, #6
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	621a      	str	r2, [r3, #32]
}
 800285a:	bf00      	nop
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40010000 	.word	0x40010000

0800286c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800286c:	b480      	push	{r7}
 800286e:	b087      	sub	sp, #28
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	f023 0201 	bic.w	r2, r3, #1
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f023 030a 	bic.w	r3, r3, #10
 80028a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	621a      	str	r2, [r3, #32]
}
 80028be:	bf00      	nop
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b087      	sub	sp, #28
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	f023 0210 	bic.w	r2, r3, #16
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	031b      	lsls	r3, r3, #12
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002906:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	621a      	str	r2, [r3, #32]
}
 800291e:	bf00      	nop
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800292a:	b480      	push	{r7}
 800292c:	b085      	sub	sp, #20
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002940:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4313      	orrs	r3, r2
 8002948:	f043 0307 	orr.w	r3, r3, #7
 800294c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	609a      	str	r2, [r3, #8]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800297a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	021a      	lsls	r2, r3, #8
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	431a      	orrs	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	4313      	orrs	r3, r2
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	609a      	str	r2, [r3, #8]
}
 8002994:	bf00      	nop
 8002996:	371c      	adds	r7, #28
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2201      	movs	r2, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a1a      	ldr	r2, [r3, #32]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	401a      	ands	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a1a      	ldr	r2, [r3, #32]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	431a      	orrs	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	621a      	str	r2, [r3, #32]
}
 80029de:	bf00      	nop
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
	...

080029ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e050      	b.n	8002aa6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d018      	beq.n	8002a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a50:	d013      	beq.n	8002a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a18      	ldr	r2, [pc, #96]	; (8002ab8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d00e      	beq.n	8002a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a16      	ldr	r2, [pc, #88]	; (8002abc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d009      	beq.n	8002a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d004      	beq.n	8002a7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a13      	ldr	r2, [pc, #76]	; (8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d10c      	bne.n	8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	40000400 	.word	0x40000400
 8002abc:	40000800 	.word	0x40000800
 8002ac0:	40000c00 	.word	0x40000c00
 8002ac4:	40014000 	.word	0x40014000

08002ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <__NVIC_SetPriority>:
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	6039      	str	r1, [r7, #0]
 8002afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	db0a      	blt.n	8002b1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	490c      	ldr	r1, [pc, #48]	; (8002b3c <__NVIC_SetPriority+0x4c>)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	0112      	lsls	r2, r2, #4
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	440b      	add	r3, r1
 8002b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b18:	e00a      	b.n	8002b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	4908      	ldr	r1, [pc, #32]	; (8002b40 <__NVIC_SetPriority+0x50>)
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	3b04      	subs	r3, #4
 8002b28:	0112      	lsls	r2, r2, #4
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	761a      	strb	r2, [r3, #24]
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000e100 	.word	0xe000e100
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <SysTick_Handler+0x1c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002b4c:	f002 f936 	bl	8004dbc <xTaskGetSchedulerState>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d001      	beq.n	8002b5a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002b56:	f003 f807 	bl	8005b68 <xPortSysTickHandler>
  }
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	e000e010 	.word	0xe000e010

08002b64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002b68:	2100      	movs	r1, #0
 8002b6a:	f06f 0004 	mvn.w	r0, #4
 8002b6e:	f7ff ffbf 	bl	8002af0 <__NVIC_SetPriority>
#endif
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b7e:	f3ef 8305 	mrs	r3, IPSR
 8002b82:	603b      	str	r3, [r7, #0]
  return(result);
 8002b84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002b8a:	f06f 0305 	mvn.w	r3, #5
 8002b8e:	607b      	str	r3, [r7, #4]
 8002b90:	e00c      	b.n	8002bac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <osKernelInitialize+0x44>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d105      	bne.n	8002ba6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <osKernelInitialize+0x44>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	e002      	b.n	8002bac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8002baa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002bac:	687b      	ldr	r3, [r7, #4]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	20000094 	.word	0x20000094

08002bc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bc6:	f3ef 8305 	mrs	r3, IPSR
 8002bca:	603b      	str	r3, [r7, #0]
  return(result);
 8002bcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <osKernelStart+0x1a>
    stat = osErrorISR;
 8002bd2:	f06f 0305 	mvn.w	r3, #5
 8002bd6:	607b      	str	r3, [r7, #4]
 8002bd8:	e010      	b.n	8002bfc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <osKernelStart+0x48>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d109      	bne.n	8002bf6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002be2:	f7ff ffbf 	bl	8002b64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <osKernelStart+0x48>)
 8002be8:	2202      	movs	r2, #2
 8002bea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002bec:	f001 fc98 	bl	8004520 <vTaskStartScheduler>
      stat = osOK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	607b      	str	r3, [r7, #4]
 8002bf4:	e002      	b.n	8002bfc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002bfc:	687b      	ldr	r3, [r7, #4]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000094 	.word	0x20000094

08002c0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08e      	sub	sp, #56	; 0x38
 8002c10:	af04      	add	r7, sp, #16
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c1c:	f3ef 8305 	mrs	r3, IPSR
 8002c20:	617b      	str	r3, [r7, #20]
  return(result);
 8002c22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d17e      	bne.n	8002d26 <osThreadNew+0x11a>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d07b      	beq.n	8002d26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002c2e:	2380      	movs	r3, #128	; 0x80
 8002c30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002c32:	2318      	movs	r3, #24
 8002c34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d045      	beq.n	8002cd2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d002      	beq.n	8002c54 <osThreadNew+0x48>
        name = attr->name;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d008      	beq.n	8002c7a <osThreadNew+0x6e>
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	2b38      	cmp	r3, #56	; 0x38
 8002c6c:	d805      	bhi.n	8002c7a <osThreadNew+0x6e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <osThreadNew+0x72>
        return (NULL);
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	e054      	b.n	8002d28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	089b      	lsrs	r3, r3, #2
 8002c8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00e      	beq.n	8002cb4 <osThreadNew+0xa8>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	2bbb      	cmp	r3, #187	; 0xbb
 8002c9c:	d90a      	bls.n	8002cb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d006      	beq.n	8002cb4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <osThreadNew+0xa8>
        mem = 1;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	e010      	b.n	8002cd6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10c      	bne.n	8002cd6 <osThreadNew+0xca>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d108      	bne.n	8002cd6 <osThreadNew+0xca>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d104      	bne.n	8002cd6 <osThreadNew+0xca>
          mem = 0;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61bb      	str	r3, [r7, #24]
 8002cd0:	e001      	b.n	8002cd6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d110      	bne.n	8002cfe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ce4:	9202      	str	r2, [sp, #8]
 8002ce6:	9301      	str	r3, [sp, #4]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	6a3a      	ldr	r2, [r7, #32]
 8002cf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f001 fa2a 	bl	800414c <xTaskCreateStatic>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	e013      	b.n	8002d26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d110      	bne.n	8002d26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f001 fa72 	bl	8004200 <xTaskCreate>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d001      	beq.n	8002d26 <osThreadNew+0x11a>
            hTask = NULL;
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002d26:	693b      	ldr	r3, [r7, #16]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3728      	adds	r7, #40	; 0x28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d38:	f3ef 8305 	mrs	r3, IPSR
 8002d3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d3e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <osDelay+0x1c>
    stat = osErrorISR;
 8002d44:	f06f 0305 	mvn.w	r3, #5
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	e007      	b.n	8002d5c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f001 fbae 	bl	80044b8 <vTaskDelay>
    }
  }

  return (stat);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b08a      	sub	sp, #40	; 0x28
 8002d6a:	af02      	add	r7, sp, #8
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d76:	f3ef 8305 	mrs	r3, IPSR
 8002d7a:	613b      	str	r3, [r7, #16]
  return(result);
 8002d7c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d176      	bne.n	8002e70 <osSemaphoreNew+0x10a>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d073      	beq.n	8002e70 <osSemaphoreNew+0x10a>
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d86f      	bhi.n	8002e70 <osSemaphoreNew+0x10a>
    mem = -1;
 8002d90:	f04f 33ff 	mov.w	r3, #4294967295
 8002d94:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d015      	beq.n	8002dc8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d006      	beq.n	8002db2 <osSemaphoreNew+0x4c>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	2b4f      	cmp	r3, #79	; 0x4f
 8002daa:	d902      	bls.n	8002db2 <osSemaphoreNew+0x4c>
        mem = 1;
 8002dac:	2301      	movs	r3, #1
 8002dae:	61bb      	str	r3, [r7, #24]
 8002db0:	e00c      	b.n	8002dcc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d108      	bne.n	8002dcc <osSemaphoreNew+0x66>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d104      	bne.n	8002dcc <osSemaphoreNew+0x66>
          mem = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
 8002dc6:	e001      	b.n	8002dcc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd2:	d04d      	beq.n	8002e70 <osSemaphoreNew+0x10a>
      if (max_count == 1U) {
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d129      	bne.n	8002e2e <osSemaphoreNew+0xc8>
        if (mem == 1) {
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d10b      	bne.n	8002df8 <osSemaphoreNew+0x92>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	2303      	movs	r3, #3
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	2200      	movs	r2, #0
 8002dec:	2100      	movs	r1, #0
 8002dee:	2001      	movs	r0, #1
 8002df0:	f000 fa2a 	bl	8003248 <xQueueGenericCreateStatic>
 8002df4:	61f8      	str	r0, [r7, #28]
 8002df6:	e005      	b.n	8002e04 <osSemaphoreNew+0x9e>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002df8:	2203      	movs	r2, #3
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	f000 fa96 	bl	800332e <xQueueGenericCreate>
 8002e02:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d022      	beq.n	8002e50 <osSemaphoreNew+0xea>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01f      	beq.n	8002e50 <osSemaphoreNew+0xea>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002e10:	2300      	movs	r3, #0
 8002e12:	2200      	movs	r2, #0
 8002e14:	2100      	movs	r1, #0
 8002e16:	69f8      	ldr	r0, [r7, #28]
 8002e18:	f000 fb4c 	bl	80034b4 <xQueueGenericSend>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d016      	beq.n	8002e50 <osSemaphoreNew+0xea>
            vSemaphoreDelete (hSemaphore);
 8002e22:	69f8      	ldr	r0, [r7, #28]
 8002e24:	f000 ffc1 	bl	8003daa <vQueueDelete>
            hSemaphore = NULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61fb      	str	r3, [r7, #28]
 8002e2c:	e010      	b.n	8002e50 <osSemaphoreNew+0xea>
          }
        }
      }
      else {
        if (mem == 1) {
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d108      	bne.n	8002e46 <osSemaphoreNew+0xe0>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	68b9      	ldr	r1, [r7, #8]
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 fad2 	bl	80033e6 <xQueueCreateCountingSemaphoreStatic>
 8002e42:	61f8      	str	r0, [r7, #28]
 8002e44:	e004      	b.n	8002e50 <osSemaphoreNew+0xea>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002e46:	68b9      	ldr	r1, [r7, #8]
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 fb01 	bl	8003450 <xQueueCreateCountingSemaphore>
 8002e4e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00c      	beq.n	8002e70 <osSemaphoreNew+0x10a>
        if (attr != NULL) {
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <osSemaphoreNew+0xfe>
          name = attr->name;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	e001      	b.n	8002e68 <osSemaphoreNew+0x102>
        } else {
          name = NULL;
 8002e64:	2300      	movs	r3, #0
 8002e66:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002e68:	6979      	ldr	r1, [r7, #20]
 8002e6a:	69f8      	ldr	r0, [r7, #28]
 8002e6c:	f001 f8e8 	bl	8004040 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002e70:	69fb      	ldr	r3, [r7, #28]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d103      	bne.n	8002e9c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002e94:	f06f 0303 	mvn.w	r3, #3
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	e039      	b.n	8002f10 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e9c:	f3ef 8305 	mrs	r3, IPSR
 8002ea0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d022      	beq.n	8002eee <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8002eae:	f06f 0303 	mvn.w	r3, #3
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	e02c      	b.n	8002f10 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002eba:	f107 0308 	add.w	r3, r7, #8
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	6938      	ldr	r0, [r7, #16]
 8002ec4:	f000 fef4 	bl	8003cb0 <xQueueReceiveFromISR>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d003      	beq.n	8002ed6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8002ece:	f06f 0302 	mvn.w	r3, #2
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	e01c      	b.n	8002f10 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d019      	beq.n	8002f10 <osSemaphoreAcquire+0x94>
 8002edc:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <osSemaphoreAcquire+0xa0>)
 8002ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	f3bf 8f6f 	isb	sy
 8002eec:	e010      	b.n	8002f10 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002eee:	6839      	ldr	r1, [r7, #0]
 8002ef0:	6938      	ldr	r0, [r7, #16]
 8002ef2:	f000 fdd5 	bl	8003aa0 <xQueueSemaphoreTake>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d009      	beq.n	8002f10 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8002f02:	f06f 0301 	mvn.w	r3, #1
 8002f06:	617b      	str	r3, [r7, #20]
 8002f08:	e002      	b.n	8002f10 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002f0a:	f06f 0302 	mvn.w	r3, #2
 8002f0e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002f10:	697b      	ldr	r3, [r7, #20]
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3718      	adds	r7, #24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	e000ed04 	.word	0xe000ed04

08002f20 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d103      	bne.n	8002f3e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002f36:	f06f 0303 	mvn.w	r3, #3
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	e02c      	b.n	8002f98 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f3e:	f3ef 8305 	mrs	r3, IPSR
 8002f42:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f44:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01a      	beq.n	8002f80 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002f4e:	f107 0308 	add.w	r3, r7, #8
 8002f52:	4619      	mov	r1, r3
 8002f54:	6938      	ldr	r0, [r7, #16]
 8002f56:	f000 fc3e 	bl	80037d6 <xQueueGiveFromISR>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d003      	beq.n	8002f68 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002f60:	f06f 0302 	mvn.w	r3, #2
 8002f64:	617b      	str	r3, [r7, #20]
 8002f66:	e017      	b.n	8002f98 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d014      	beq.n	8002f98 <osSemaphoreRelease+0x78>
 8002f6e:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <osSemaphoreRelease+0x84>)
 8002f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	e00b      	b.n	8002f98 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002f80:	2300      	movs	r3, #0
 8002f82:	2200      	movs	r2, #0
 8002f84:	2100      	movs	r1, #0
 8002f86:	6938      	ldr	r0, [r7, #16]
 8002f88:	f000 fa94 	bl	80034b4 <xQueueGenericSend>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d002      	beq.n	8002f98 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8002f92:	f06f 0302 	mvn.w	r3, #2
 8002f96:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002f98:	697b      	ldr	r3, [r7, #20]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	e000ed04 	.word	0xe000ed04

08002fa8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4a07      	ldr	r2, [pc, #28]	; (8002fd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002fb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4a06      	ldr	r2, [pc, #24]	; (8002fd8 <vApplicationGetIdleTaskMemory+0x30>)
 8002fbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2280      	movs	r2, #128	; 0x80
 8002fc4:	601a      	str	r2, [r3, #0]
}
 8002fc6:	bf00      	nop
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000098 	.word	0x20000098
 8002fd8:	20000154 	.word	0x20000154

08002fdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4a07      	ldr	r2, [pc, #28]	; (8003008 <vApplicationGetTimerTaskMemory+0x2c>)
 8002fec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	4a06      	ldr	r2, [pc, #24]	; (800300c <vApplicationGetTimerTaskMemory+0x30>)
 8002ff2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ffa:	601a      	str	r2, [r3, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	20000354 	.word	0x20000354
 800300c:	20000410 	.word	0x20000410

08003010 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f103 0208 	add.w	r2, r3, #8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f04f 32ff 	mov.w	r2, #4294967295
 8003028:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f103 0208 	add.w	r2, r3, #8
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f103 0208 	add.w	r2, r3, #8
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800306a:	b480      	push	{r7}
 800306c:	b085      	sub	sp, #20
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	601a      	str	r2, [r3, #0]
}
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030b2:	b480      	push	{r7}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c8:	d103      	bne.n	80030d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	e00c      	b.n	80030ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3308      	adds	r3, #8
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	e002      	b.n	80030e0 <vListInsert+0x2e>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d2f6      	bcs.n	80030da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	601a      	str	r2, [r3, #0]
}
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6892      	ldr	r2, [r2, #8]
 800313a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6852      	ldr	r2, [r2, #4]
 8003144:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	429a      	cmp	r2, r3
 800314e:	d103      	bne.n	8003158 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	1e5a      	subs	r2, r3, #1
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d109      	bne.n	80031a0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	e7fe      	b.n	800319e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80031a0:	f002 fc54 	bl	8005a4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	68f9      	ldr	r1, [r7, #12]
 80031ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	441a      	add	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d0:	3b01      	subs	r3, #1
 80031d2:	68f9      	ldr	r1, [r7, #12]
 80031d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031d6:	fb01 f303 	mul.w	r3, r1, r3
 80031da:	441a      	add	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	22ff      	movs	r2, #255	; 0xff
 80031e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	22ff      	movs	r2, #255	; 0xff
 80031ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d114      	bne.n	8003220 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d01a      	beq.n	8003234 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3310      	adds	r3, #16
 8003202:	4618      	mov	r0, r3
 8003204:	f001 fc1e 	bl	8004a44 <xTaskRemoveFromEventList>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d012      	beq.n	8003234 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <xQueueGenericReset+0xcc>)
 8003210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	e009      	b.n	8003234 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	3310      	adds	r3, #16
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fef3 	bl	8003010 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	3324      	adds	r3, #36	; 0x24
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff feee 	bl	8003010 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003234:	f002 fc38 	bl	8005aa8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003238:	2301      	movs	r3, #1
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	e000ed04 	.word	0xe000ed04

08003248 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08e      	sub	sp, #56	; 0x38
 800324c:	af02      	add	r7, sp, #8
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d109      	bne.n	8003270 <xQueueGenericCreateStatic+0x28>
 800325c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	62bb      	str	r3, [r7, #40]	; 0x28
 800326e:	e7fe      	b.n	800326e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d109      	bne.n	800328a <xQueueGenericCreateStatic+0x42>
 8003276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
 8003288:	e7fe      	b.n	8003288 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <xQueueGenericCreateStatic+0x4e>
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <xQueueGenericCreateStatic+0x52>
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <xQueueGenericCreateStatic+0x54>
 800329a:	2300      	movs	r3, #0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d109      	bne.n	80032b4 <xQueueGenericCreateStatic+0x6c>
 80032a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	623b      	str	r3, [r7, #32]
 80032b2:	e7fe      	b.n	80032b2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d102      	bne.n	80032c0 <xQueueGenericCreateStatic+0x78>
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <xQueueGenericCreateStatic+0x7c>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <xQueueGenericCreateStatic+0x7e>
 80032c4:	2300      	movs	r3, #0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <xQueueGenericCreateStatic+0x96>
 80032ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ce:	f383 8811 	msr	BASEPRI, r3
 80032d2:	f3bf 8f6f 	isb	sy
 80032d6:	f3bf 8f4f 	dsb	sy
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	e7fe      	b.n	80032dc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80032de:	2350      	movs	r3, #80	; 0x50
 80032e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b50      	cmp	r3, #80	; 0x50
 80032e6:	d009      	beq.n	80032fc <xQueueGenericCreateStatic+0xb4>
 80032e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	61bb      	str	r3, [r7, #24]
 80032fa:	e7fe      	b.n	80032fa <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80032fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00d      	beq.n	8003324 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003310:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	4613      	mov	r3, r2
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f83e 	bl	80033a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003326:	4618      	mov	r0, r3
 8003328:	3730      	adds	r7, #48	; 0x30
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800332e:	b580      	push	{r7, lr}
 8003330:	b08a      	sub	sp, #40	; 0x28
 8003332:	af02      	add	r7, sp, #8
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	4613      	mov	r3, r2
 800333a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d109      	bne.n	8003356 <xQueueGenericCreate+0x28>
 8003342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003346:	f383 8811 	msr	BASEPRI, r3
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	e7fe      	b.n	8003354 <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	fb02 f303 	mul.w	r3, r2, r3
 800335e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	3350      	adds	r3, #80	; 0x50
 8003364:	4618      	mov	r0, r3
 8003366:	f002 fc8b 	bl	8005c80 <pvPortMalloc>
 800336a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d011      	beq.n	8003396 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	3350      	adds	r3, #80	; 0x50
 800337a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003384:	79fa      	ldrb	r2, [r7, #7]
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	4613      	mov	r3, r2
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f805 	bl	80033a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003396:	69bb      	ldr	r3, [r7, #24]
	}
 8003398:	4618      	mov	r0, r3
 800339a:	3720      	adds	r7, #32
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d103      	bne.n	80033bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	e002      	b.n	80033c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033ce:	2101      	movs	r1, #1
 80033d0:	69b8      	ldr	r0, [r7, #24]
 80033d2:	f7ff fed1 	bl	8003178 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b08a      	sub	sp, #40	; 0x28
 80033ea:	af02      	add	r7, sp, #8
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d109      	bne.n	800340c <xQueueCreateCountingSemaphoreStatic+0x26>
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	e7fe      	b.n	800340a <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	429a      	cmp	r2, r3
 8003412:	d909      	bls.n	8003428 <xQueueCreateCountingSemaphoreStatic+0x42>
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	617b      	str	r3, [r7, #20]
 8003426:	e7fe      	b.n	8003426 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003428:	2302      	movs	r3, #2
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	2100      	movs	r1, #0
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f7ff ff08 	bl	8003248 <xQueueGenericCreateStatic>
 8003438:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003446:	69fb      	ldr	r3, [r7, #28]
	}
 8003448:	4618      	mov	r0, r3
 800344a:	3720      	adds	r7, #32
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d109      	bne.n	8003474 <xQueueCreateCountingSemaphore+0x24>
 8003460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	613b      	str	r3, [r7, #16]
 8003472:	e7fe      	b.n	8003472 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	429a      	cmp	r2, r3
 800347a:	d909      	bls.n	8003490 <xQueueCreateCountingSemaphore+0x40>
 800347c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003480:	f383 8811 	msr	BASEPRI, r3
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	e7fe      	b.n	800348e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003490:	2202      	movs	r2, #2
 8003492:	2100      	movs	r1, #0
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ff4a 	bl	800332e <xQueueGenericCreate>
 800349a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80034a8:	697b      	ldr	r3, [r7, #20]
	}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08e      	sub	sp, #56	; 0x38
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80034c2:	2300      	movs	r3, #0
 80034c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <xQueueGenericSend+0x30>
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034e2:	e7fe      	b.n	80034e2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d103      	bne.n	80034f2 <xQueueGenericSend+0x3e>
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <xQueueGenericSend+0x42>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <xQueueGenericSend+0x44>
 80034f6:	2300      	movs	r3, #0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <xQueueGenericSend+0x5c>
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	627b      	str	r3, [r7, #36]	; 0x24
 800350e:	e7fe      	b.n	800350e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d103      	bne.n	800351e <xQueueGenericSend+0x6a>
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <xQueueGenericSend+0x6e>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <xQueueGenericSend+0x70>
 8003522:	2300      	movs	r3, #0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d109      	bne.n	800353c <xQueueGenericSend+0x88>
 8003528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800352c:	f383 8811 	msr	BASEPRI, r3
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	623b      	str	r3, [r7, #32]
 800353a:	e7fe      	b.n	800353a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800353c:	f001 fc3e 	bl	8004dbc <xTaskGetSchedulerState>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d102      	bne.n	800354c <xQueueGenericSend+0x98>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <xQueueGenericSend+0x9c>
 800354c:	2301      	movs	r3, #1
 800354e:	e000      	b.n	8003552 <xQueueGenericSend+0x9e>
 8003550:	2300      	movs	r3, #0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <xQueueGenericSend+0xb6>
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	61fb      	str	r3, [r7, #28]
 8003568:	e7fe      	b.n	8003568 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800356a:	f002 fa6f 	bl	8005a4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800356e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003576:	429a      	cmp	r2, r3
 8003578:	d302      	bcc.n	8003580 <xQueueGenericSend+0xcc>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d129      	bne.n	80035d4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003586:	f000 fc4a 	bl	8003e1e <prvCopyDataToQueue>
 800358a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800358c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	2b00      	cmp	r3, #0
 8003592:	d010      	beq.n	80035b6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	3324      	adds	r3, #36	; 0x24
 8003598:	4618      	mov	r0, r3
 800359a:	f001 fa53 	bl	8004a44 <xTaskRemoveFromEventList>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d013      	beq.n	80035cc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80035a4:	4b3f      	ldr	r3, [pc, #252]	; (80036a4 <xQueueGenericSend+0x1f0>)
 80035a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	e00a      	b.n	80035cc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80035bc:	4b39      	ldr	r3, [pc, #228]	; (80036a4 <xQueueGenericSend+0x1f0>)
 80035be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80035cc:	f002 fa6c 	bl	8005aa8 <vPortExitCritical>
				return pdPASS;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e063      	b.n	800369c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d103      	bne.n	80035e2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035da:	f002 fa65 	bl	8005aa8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	e05c      	b.n	800369c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035e8:	f107 0314 	add.w	r3, r7, #20
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 fa8b 	bl	8004b08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035f2:	2301      	movs	r3, #1
 80035f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035f6:	f002 fa57 	bl	8005aa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035fa:	f000 ffff 	bl	80045fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035fe:	f002 fa25 	bl	8005a4c <vPortEnterCritical>
 8003602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003604:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003608:	b25b      	sxtb	r3, r3
 800360a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360e:	d103      	bne.n	8003618 <xQueueGenericSend+0x164>
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800361e:	b25b      	sxtb	r3, r3
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d103      	bne.n	800362e <xQueueGenericSend+0x17a>
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800362e:	f002 fa3b 	bl	8005aa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003632:	1d3a      	adds	r2, r7, #4
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	4611      	mov	r1, r2
 800363a:	4618      	mov	r0, r3
 800363c:	f001 fa7a 	bl	8004b34 <xTaskCheckForTimeOut>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d124      	bne.n	8003690 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003646:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003648:	f000 fce1 	bl	800400e <prvIsQueueFull>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d018      	beq.n	8003684 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	3310      	adds	r3, #16
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	4611      	mov	r1, r2
 800365a:	4618      	mov	r0, r3
 800365c:	f001 f9a4 	bl	80049a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003662:	f000 fc6c 	bl	8003f3e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003666:	f000 ffd7 	bl	8004618 <xTaskResumeAll>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	f47f af7c 	bne.w	800356a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003672:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <xQueueGenericSend+0x1f0>)
 8003674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	e772      	b.n	800356a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003686:	f000 fc5a 	bl	8003f3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800368a:	f000 ffc5 	bl	8004618 <xTaskResumeAll>
 800368e:	e76c      	b.n	800356a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003692:	f000 fc54 	bl	8003f3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003696:	f000 ffbf 	bl	8004618 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800369a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800369c:	4618      	mov	r0, r3
 800369e:	3738      	adds	r7, #56	; 0x38
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	e000ed04 	.word	0xe000ed04

080036a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b090      	sub	sp, #64	; 0x40
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80036ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d109      	bne.n	80036d4 <xQueueGenericSendFromISR+0x2c>
 80036c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036d2:	e7fe      	b.n	80036d2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d103      	bne.n	80036e2 <xQueueGenericSendFromISR+0x3a>
 80036da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <xQueueGenericSendFromISR+0x3e>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <xQueueGenericSendFromISR+0x40>
 80036e6:	2300      	movs	r3, #0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d109      	bne.n	8003700 <xQueueGenericSendFromISR+0x58>
 80036ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
 80036fe:	e7fe      	b.n	80036fe <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d103      	bne.n	800370e <xQueueGenericSendFromISR+0x66>
 8003706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <xQueueGenericSendFromISR+0x6a>
 800370e:	2301      	movs	r3, #1
 8003710:	e000      	b.n	8003714 <xQueueGenericSendFromISR+0x6c>
 8003712:	2300      	movs	r3, #0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d109      	bne.n	800372c <xQueueGenericSendFromISR+0x84>
 8003718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	623b      	str	r3, [r7, #32]
 800372a:	e7fe      	b.n	800372a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800372c:	f002 fa6a 	bl	8005c04 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003730:	f3ef 8211 	mrs	r2, BASEPRI
 8003734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003738:	f383 8811 	msr	BASEPRI, r3
 800373c:	f3bf 8f6f 	isb	sy
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	61fa      	str	r2, [r7, #28]
 8003746:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003748:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800374a:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003754:	429a      	cmp	r2, r3
 8003756:	d302      	bcc.n	800375e <xQueueGenericSendFromISR+0xb6>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d12f      	bne.n	80037be <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800375e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003764:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003774:	f000 fb53 	bl	8003e1e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003778:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003780:	d112      	bne.n	80037a8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	2b00      	cmp	r3, #0
 8003788:	d016      	beq.n	80037b8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800378a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378c:	3324      	adds	r3, #36	; 0x24
 800378e:	4618      	mov	r0, r3
 8003790:	f001 f958 	bl	8004a44 <xTaskRemoveFromEventList>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00e      	beq.n	80037b8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00b      	beq.n	80037b8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	e007      	b.n	80037b8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80037a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80037ac:	3301      	adds	r3, #1
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	b25a      	sxtb	r2, r3
 80037b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80037b8:	2301      	movs	r3, #1
 80037ba:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80037bc:	e001      	b.n	80037c2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80037cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3740      	adds	r7, #64	; 0x40
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b08e      	sub	sp, #56	; 0x38
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
 80037de:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d109      	bne.n	80037fe <xQueueGiveFromISR+0x28>
	__asm volatile
 80037ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	623b      	str	r3, [r7, #32]
 80037fc:	e7fe      	b.n	80037fc <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <xQueueGiveFromISR+0x44>
 8003806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	e7fe      	b.n	8003818 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800381a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d103      	bne.n	800382a <xQueueGiveFromISR+0x54>
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <xQueueGiveFromISR+0x58>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <xQueueGiveFromISR+0x5a>
 800382e:	2300      	movs	r3, #0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d109      	bne.n	8003848 <xQueueGiveFromISR+0x72>
 8003834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	e7fe      	b.n	8003846 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003848:	f002 f9dc 	bl	8005c04 <vPortValidateInterruptPriority>
	__asm volatile
 800384c:	f3ef 8211 	mrs	r2, BASEPRI
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	617a      	str	r2, [r7, #20]
 8003862:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003864:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003874:	429a      	cmp	r2, r3
 8003876:	d22b      	bcs.n	80038d0 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800387e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003884:	1c5a      	adds	r2, r3, #1
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800388a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800388e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003892:	d112      	bne.n	80038ba <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	2b00      	cmp	r3, #0
 800389a:	d016      	beq.n	80038ca <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800389c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389e:	3324      	adds	r3, #36	; 0x24
 80038a0:	4618      	mov	r0, r3
 80038a2:	f001 f8cf 	bl	8004a44 <xTaskRemoveFromEventList>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00e      	beq.n	80038ca <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e007      	b.n	80038ca <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80038ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038be:	3301      	adds	r3, #1
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	b25a      	sxtb	r2, r3
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80038ca:	2301      	movs	r3, #1
 80038cc:	637b      	str	r3, [r7, #52]	; 0x34
 80038ce:	e001      	b.n	80038d4 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	637b      	str	r3, [r7, #52]	; 0x34
 80038d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80038de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3738      	adds	r7, #56	; 0x38
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08c      	sub	sp, #48	; 0x30
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80038f4:	2300      	movs	r3, #0
 80038f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d109      	bne.n	8003916 <xQueueReceive+0x2e>
	__asm volatile
 8003902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003906:	f383 8811 	msr	BASEPRI, r3
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	623b      	str	r3, [r7, #32]
 8003914:	e7fe      	b.n	8003914 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d103      	bne.n	8003924 <xQueueReceive+0x3c>
 800391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <xQueueReceive+0x40>
 8003924:	2301      	movs	r3, #1
 8003926:	e000      	b.n	800392a <xQueueReceive+0x42>
 8003928:	2300      	movs	r3, #0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <xQueueReceive+0x5a>
 800392e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003932:	f383 8811 	msr	BASEPRI, r3
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	61fb      	str	r3, [r7, #28]
 8003940:	e7fe      	b.n	8003940 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003942:	f001 fa3b 	bl	8004dbc <xTaskGetSchedulerState>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d102      	bne.n	8003952 <xQueueReceive+0x6a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <xQueueReceive+0x6e>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <xQueueReceive+0x70>
 8003956:	2300      	movs	r3, #0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d109      	bne.n	8003970 <xQueueReceive+0x88>
 800395c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	61bb      	str	r3, [r7, #24]
 800396e:	e7fe      	b.n	800396e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003970:	f002 f86c 	bl	8005a4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01f      	beq.n	80039c0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003984:	f000 fab5 	bl	8003ef2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	1e5a      	subs	r2, r3, #1
 800398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00f      	beq.n	80039b8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399a:	3310      	adds	r3, #16
 800399c:	4618      	mov	r0, r3
 800399e:	f001 f851 	bl	8004a44 <xTaskRemoveFromEventList>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80039a8:	4b3c      	ldr	r3, [pc, #240]	; (8003a9c <xQueueReceive+0x1b4>)
 80039aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80039b8:	f002 f876 	bl	8005aa8 <vPortExitCritical>
				return pdPASS;
 80039bc:	2301      	movs	r3, #1
 80039be:	e069      	b.n	8003a94 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d103      	bne.n	80039ce <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039c6:	f002 f86f 	bl	8005aa8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80039ca:	2300      	movs	r3, #0
 80039cc:	e062      	b.n	8003a94 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039d4:	f107 0310 	add.w	r3, r7, #16
 80039d8:	4618      	mov	r0, r3
 80039da:	f001 f895 	bl	8004b08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039de:	2301      	movs	r3, #1
 80039e0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039e2:	f002 f861 	bl	8005aa8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039e6:	f000 fe09 	bl	80045fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039ea:	f002 f82f 	bl	8005a4c <vPortEnterCritical>
 80039ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039f4:	b25b      	sxtb	r3, r3
 80039f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fa:	d103      	bne.n	8003a04 <xQueueReceive+0x11c>
 80039fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a0a:	b25b      	sxtb	r3, r3
 8003a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a10:	d103      	bne.n	8003a1a <xQueueReceive+0x132>
 8003a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a1a:	f002 f845 	bl	8005aa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a1e:	1d3a      	adds	r2, r7, #4
 8003a20:	f107 0310 	add.w	r3, r7, #16
 8003a24:	4611      	mov	r1, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f001 f884 	bl	8004b34 <xTaskCheckForTimeOut>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d123      	bne.n	8003a7a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a34:	f000 fad5 	bl	8003fe2 <prvIsQueueEmpty>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d017      	beq.n	8003a6e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a40:	3324      	adds	r3, #36	; 0x24
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	4611      	mov	r1, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 ffae 	bl	80049a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a4e:	f000 fa76 	bl	8003f3e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003a52:	f000 fde1 	bl	8004618 <xTaskResumeAll>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d189      	bne.n	8003970 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003a5c:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <xQueueReceive+0x1b4>)
 8003a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	f3bf 8f4f 	dsb	sy
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	e780      	b.n	8003970 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003a6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a70:	f000 fa65 	bl	8003f3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a74:	f000 fdd0 	bl	8004618 <xTaskResumeAll>
 8003a78:	e77a      	b.n	8003970 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003a7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a7c:	f000 fa5f 	bl	8003f3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a80:	f000 fdca 	bl	8004618 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a86:	f000 faac 	bl	8003fe2 <prvIsQueueEmpty>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f43f af6f 	beq.w	8003970 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003a92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3730      	adds	r7, #48	; 0x30
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	e000ed04 	.word	0xe000ed04

08003aa0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08e      	sub	sp, #56	; 0x38
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d109      	bne.n	8003ad0 <xQueueSemaphoreTake+0x30>
 8003abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	623b      	str	r3, [r7, #32]
 8003ace:	e7fe      	b.n	8003ace <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d009      	beq.n	8003aec <xQueueSemaphoreTake+0x4c>
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	e7fe      	b.n	8003aea <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003aec:	f001 f966 	bl	8004dbc <xTaskGetSchedulerState>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d102      	bne.n	8003afc <xQueueSemaphoreTake+0x5c>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <xQueueSemaphoreTake+0x60>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <xQueueSemaphoreTake+0x62>
 8003b00:	2300      	movs	r3, #0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <xQueueSemaphoreTake+0x7a>
 8003b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	e7fe      	b.n	8003b18 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b1a:	f001 ff97 	bl	8005a4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d024      	beq.n	8003b74 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2c:	1e5a      	subs	r2, r3, #1
 8003b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d104      	bne.n	8003b44 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003b3a:	f001 fab1 	bl	80050a0 <pvTaskIncrementMutexHeldCount>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b42:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00f      	beq.n	8003b6c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	3310      	adds	r3, #16
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 ff77 	bl	8004a44 <xTaskRemoveFromEventList>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d007      	beq.n	8003b6c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b5c:	4b53      	ldr	r3, [pc, #332]	; (8003cac <xQueueSemaphoreTake+0x20c>)
 8003b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b6c:	f001 ff9c 	bl	8005aa8 <vPortExitCritical>
				return pdPASS;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e096      	b.n	8003ca2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d110      	bne.n	8003b9c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d009      	beq.n	8003b94 <xQueueSemaphoreTake+0xf4>
 8003b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	e7fe      	b.n	8003b92 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003b94:	f001 ff88 	bl	8005aa8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	e082      	b.n	8003ca2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d106      	bne.n	8003bb0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ba2:	f107 030c 	add.w	r3, r7, #12
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 ffae 	bl	8004b08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bac:	2301      	movs	r3, #1
 8003bae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bb0:	f001 ff7a 	bl	8005aa8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bb4:	f000 fd22 	bl	80045fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003bb8:	f001 ff48 	bl	8005a4c <vPortEnterCritical>
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bc2:	b25b      	sxtb	r3, r3
 8003bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc8:	d103      	bne.n	8003bd2 <xQueueSemaphoreTake+0x132>
 8003bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bd8:	b25b      	sxtb	r3, r3
 8003bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bde:	d103      	bne.n	8003be8 <xQueueSemaphoreTake+0x148>
 8003be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003be8:	f001 ff5e 	bl	8005aa8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003bec:	463a      	mov	r2, r7
 8003bee:	f107 030c 	add.w	r3, r7, #12
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 ff9d 	bl	8004b34 <xTaskCheckForTimeOut>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d132      	bne.n	8003c66 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c02:	f000 f9ee 	bl	8003fe2 <prvIsQueueEmpty>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d026      	beq.n	8003c5a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d109      	bne.n	8003c28 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003c14:	f001 ff1a 	bl	8005a4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f001 f8eb 	bl	8004df8 <xTaskPriorityInherit>
 8003c22:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003c24:	f001 ff40 	bl	8005aa8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2a:	3324      	adds	r3, #36	; 0x24
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 feb9 	bl	80049a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c38:	f000 f981 	bl	8003f3e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c3c:	f000 fcec 	bl	8004618 <xTaskResumeAll>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f47f af69 	bne.w	8003b1a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003c48:	4b18      	ldr	r3, [pc, #96]	; (8003cac <xQueueSemaphoreTake+0x20c>)
 8003c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	e75f      	b.n	8003b1a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003c5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c5c:	f000 f96f 	bl	8003f3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c60:	f000 fcda 	bl	8004618 <xTaskResumeAll>
 8003c64:	e759      	b.n	8003b1a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003c66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c68:	f000 f969 	bl	8003f3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c6c:	f000 fcd4 	bl	8004618 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c72:	f000 f9b6 	bl	8003fe2 <prvIsQueueEmpty>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f43f af4e 	beq.w	8003b1a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00d      	beq.n	8003ca0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003c84:	f001 fee2 	bl	8005a4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003c88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003c8a:	f000 f8b0 	bl	8003dee <prvGetDisinheritPriorityAfterTimeout>
 8003c8e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c96:	4618      	mov	r0, r3
 8003c98:	f001 f982 	bl	8004fa0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003c9c:	f001 ff04 	bl	8005aa8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ca0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3738      	adds	r7, #56	; 0x38
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	e000ed04 	.word	0xe000ed04

08003cb0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08e      	sub	sp, #56	; 0x38
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d109      	bne.n	8003cda <xQueueReceiveFromISR+0x2a>
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	623b      	str	r3, [r7, #32]
 8003cd8:	e7fe      	b.n	8003cd8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d103      	bne.n	8003ce8 <xQueueReceiveFromISR+0x38>
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <xQueueReceiveFromISR+0x3c>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <xQueueReceiveFromISR+0x3e>
 8003cec:	2300      	movs	r3, #0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d109      	bne.n	8003d06 <xQueueReceiveFromISR+0x56>
 8003cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf6:	f383 8811 	msr	BASEPRI, r3
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	61fb      	str	r3, [r7, #28]
 8003d04:	e7fe      	b.n	8003d04 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d06:	f001 ff7d 	bl	8005c04 <vPortValidateInterruptPriority>
	__asm volatile
 8003d0a:	f3ef 8211 	mrs	r2, BASEPRI
 8003d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d12:	f383 8811 	msr	BASEPRI, r3
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	f3bf 8f4f 	dsb	sy
 8003d1e:	61ba      	str	r2, [r7, #24]
 8003d20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003d22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d02f      	beq.n	8003d92 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d3c:	68b9      	ldr	r1, [r7, #8]
 8003d3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d40:	f000 f8d7 	bl	8003ef2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d46:	1e5a      	subs	r2, r3, #1
 8003d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003d4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d54:	d112      	bne.n	8003d7c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d016      	beq.n	8003d8c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d60:	3310      	adds	r3, #16
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fe6e 	bl	8004a44 <xTaskRemoveFromEventList>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00e      	beq.n	8003d8c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00b      	beq.n	8003d8c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	e007      	b.n	8003d8c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d80:	3301      	adds	r3, #1
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	b25a      	sxtb	r2, r3
 8003d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d90:	e001      	b.n	8003d96 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003d92:	2300      	movs	r3, #0
 8003d94:	637b      	str	r3, [r7, #52]	; 0x34
 8003d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3738      	adds	r7, #56	; 0x38
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b084      	sub	sp, #16
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d109      	bne.n	8003dd0 <vQueueDelete+0x26>
	__asm volatile
 8003dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	e7fe      	b.n	8003dce <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 f95d 	bl	8004090 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f002 f815 	bl	8005e10 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003de6:	bf00      	nop
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003dee:	b480      	push	{r7}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d006      	beq.n	8003e0c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	e001      	b.n	8003e10 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003e10:	68fb      	ldr	r3, [r7, #12]
	}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b086      	sub	sp, #24
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e32:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10d      	bne.n	8003e58 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d14d      	bne.n	8003ee0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 f83d 	bl	8004ec8 <xTaskPriorityDisinherit>
 8003e4e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	609a      	str	r2, [r3, #8]
 8003e56:	e043      	b.n	8003ee0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d119      	bne.n	8003e92 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6858      	ldr	r0, [r3, #4]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	461a      	mov	r2, r3
 8003e68:	68b9      	ldr	r1, [r7, #8]
 8003e6a:	f002 f911 	bl	8006090 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	441a      	add	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d32b      	bcc.n	8003ee0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	605a      	str	r2, [r3, #4]
 8003e90:	e026      	b.n	8003ee0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	68d8      	ldr	r0, [r3, #12]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	68b9      	ldr	r1, [r7, #8]
 8003e9e:	f002 f8f7 	bl	8006090 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	425b      	negs	r3, r3
 8003eac:	441a      	add	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d207      	bcs.n	8003ece <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	425b      	negs	r3, r3
 8003ec8:	441a      	add	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d105      	bne.n	8003ee0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003ee8:	697b      	ldr	r3, [r7, #20]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d018      	beq.n	8003f36 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68da      	ldr	r2, [r3, #12]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	441a      	add	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d303      	bcc.n	8003f26 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68d9      	ldr	r1, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	461a      	mov	r2, r3
 8003f30:	6838      	ldr	r0, [r7, #0]
 8003f32:	f002 f8ad 	bl	8006090 <memcpy>
	}
}
 8003f36:	bf00      	nop
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f46:	f001 fd81 	bl	8005a4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f50:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f52:	e011      	b.n	8003f78 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d012      	beq.n	8003f82 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3324      	adds	r3, #36	; 0x24
 8003f60:	4618      	mov	r0, r3
 8003f62:	f000 fd6f 	bl	8004a44 <xTaskRemoveFromEventList>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f6c:	f000 fe42 	bl	8004bf4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	dce9      	bgt.n	8003f54 <prvUnlockQueue+0x16>
 8003f80:	e000      	b.n	8003f84 <prvUnlockQueue+0x46>
					break;
 8003f82:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	22ff      	movs	r2, #255	; 0xff
 8003f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f8c:	f001 fd8c 	bl	8005aa8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f90:	f001 fd5c 	bl	8005a4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f9a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f9c:	e011      	b.n	8003fc2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d012      	beq.n	8003fcc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3310      	adds	r3, #16
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fd4a 	bl	8004a44 <xTaskRemoveFromEventList>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003fb6:	f000 fe1d 	bl	8004bf4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003fba:	7bbb      	ldrb	r3, [r7, #14]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	dce9      	bgt.n	8003f9e <prvUnlockQueue+0x60>
 8003fca:	e000      	b.n	8003fce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003fcc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	22ff      	movs	r2, #255	; 0xff
 8003fd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003fd6:	f001 fd67 	bl	8005aa8 <vPortExitCritical>
}
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fea:	f001 fd2f 	bl	8005a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d102      	bne.n	8003ffc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	e001      	b.n	8004000 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004000:	f001 fd52 	bl	8005aa8 <vPortExitCritical>

	return xReturn;
 8004004:	68fb      	ldr	r3, [r7, #12]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004016:	f001 fd19 	bl	8005a4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004022:	429a      	cmp	r2, r3
 8004024:	d102      	bne.n	800402c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004026:	2301      	movs	r3, #1
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	e001      	b.n	8004030 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004030:	f001 fd3a 	bl	8005aa8 <vPortExitCritical>

	return xReturn;
 8004034:	68fb      	ldr	r3, [r7, #12]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	e014      	b.n	800407a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004050:	4a0e      	ldr	r2, [pc, #56]	; (800408c <vQueueAddToRegistry+0x4c>)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10b      	bne.n	8004074 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800405c:	490b      	ldr	r1, [pc, #44]	; (800408c <vQueueAddToRegistry+0x4c>)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004066:	4a09      	ldr	r2, [pc, #36]	; (800408c <vQueueAddToRegistry+0x4c>)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	4413      	add	r3, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004072:	e005      	b.n	8004080 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	3301      	adds	r3, #1
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2b07      	cmp	r3, #7
 800407e:	d9e7      	bls.n	8004050 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	20004b04 	.word	0x20004b04

08004090 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004098:	2300      	movs	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	e016      	b.n	80040cc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800409e:	4a10      	ldr	r2, [pc, #64]	; (80040e0 <vQueueUnregisterQueue+0x50>)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4413      	add	r3, r2
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d10b      	bne.n	80040c6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80040ae:	4a0c      	ldr	r2, [pc, #48]	; (80040e0 <vQueueUnregisterQueue+0x50>)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2100      	movs	r1, #0
 80040b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80040b8:	4a09      	ldr	r2, [pc, #36]	; (80040e0 <vQueueUnregisterQueue+0x50>)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	4413      	add	r3, r2
 80040c0:	2200      	movs	r2, #0
 80040c2:	605a      	str	r2, [r3, #4]
				break;
 80040c4:	e005      	b.n	80040d2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	3301      	adds	r3, #1
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2b07      	cmp	r3, #7
 80040d0:	d9e5      	bls.n	800409e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80040d2:	bf00      	nop
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20004b04 	.word	0x20004b04

080040e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80040f4:	f001 fcaa 	bl	8005a4c <vPortEnterCritical>
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040fe:	b25b      	sxtb	r3, r3
 8004100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004104:	d103      	bne.n	800410e <vQueueWaitForMessageRestricted+0x2a>
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004114:	b25b      	sxtb	r3, r3
 8004116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800411a:	d103      	bne.n	8004124 <vQueueWaitForMessageRestricted+0x40>
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004124:	f001 fcc0 	bl	8005aa8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	2b00      	cmp	r3, #0
 800412e:	d106      	bne.n	800413e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	3324      	adds	r3, #36	; 0x24
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	68b9      	ldr	r1, [r7, #8]
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fc59 	bl	80049f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800413e:	6978      	ldr	r0, [r7, #20]
 8004140:	f7ff fefd 	bl	8003f3e <prvUnlockQueue>
	}
 8004144:	bf00      	nop
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08e      	sub	sp, #56	; 0x38
 8004150:	af04      	add	r7, sp, #16
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800415a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415c:	2b00      	cmp	r3, #0
 800415e:	d109      	bne.n	8004174 <xTaskCreateStatic+0x28>
 8004160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	623b      	str	r3, [r7, #32]
 8004172:	e7fe      	b.n	8004172 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004176:	2b00      	cmp	r3, #0
 8004178:	d109      	bne.n	800418e <xTaskCreateStatic+0x42>
 800417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	e7fe      	b.n	800418c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800418e:	23bc      	movs	r3, #188	; 0xbc
 8004190:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2bbc      	cmp	r3, #188	; 0xbc
 8004196:	d009      	beq.n	80041ac <xTaskCreateStatic+0x60>
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	61bb      	str	r3, [r7, #24]
 80041aa:	e7fe      	b.n	80041aa <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80041ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01e      	beq.n	80041f2 <xTaskCreateStatic+0xa6>
 80041b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d01b      	beq.n	80041f2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80041ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80041cc:	2300      	movs	r3, #0
 80041ce:	9303      	str	r3, [sp, #12]
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	9302      	str	r3, [sp, #8]
 80041d4:	f107 0314 	add.w	r3, r7, #20
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f851 	bl	800428c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041ec:	f000 f8f4 	bl	80043d8 <prvAddNewTaskToReadyList>
 80041f0:	e001      	b.n	80041f6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041f6:	697b      	ldr	r3, [r7, #20]
	}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3728      	adds	r7, #40	; 0x28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08c      	sub	sp, #48	; 0x30
 8004204:	af04      	add	r7, sp, #16
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	4613      	mov	r3, r2
 800420e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4618      	mov	r0, r3
 8004216:	f001 fd33 	bl	8005c80 <pvPortMalloc>
 800421a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00e      	beq.n	8004240 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004222:	20bc      	movs	r0, #188	; 0xbc
 8004224:	f001 fd2c 	bl	8005c80 <pvPortMalloc>
 8004228:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	631a      	str	r2, [r3, #48]	; 0x30
 8004236:	e005      	b.n	8004244 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004238:	6978      	ldr	r0, [r7, #20]
 800423a:	f001 fde9 	bl	8005e10 <vPortFree>
 800423e:	e001      	b.n	8004244 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004240:	2300      	movs	r3, #0
 8004242:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d017      	beq.n	800427a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004252:	88fa      	ldrh	r2, [r7, #6]
 8004254:	2300      	movs	r3, #0
 8004256:	9303      	str	r3, [sp, #12]
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	9302      	str	r3, [sp, #8]
 800425c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425e:	9301      	str	r3, [sp, #4]
 8004260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	68b9      	ldr	r1, [r7, #8]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f80f 	bl	800428c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800426e:	69f8      	ldr	r0, [r7, #28]
 8004270:	f000 f8b2 	bl	80043d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004274:	2301      	movs	r3, #1
 8004276:	61bb      	str	r3, [r7, #24]
 8004278:	e002      	b.n	8004280 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800427a:	f04f 33ff 	mov.w	r3, #4294967295
 800427e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004280:	69bb      	ldr	r3, [r7, #24]
	}
 8004282:	4618      	mov	r0, r3
 8004284:	3720      	adds	r7, #32
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	461a      	mov	r2, r3
 80042a4:	21a5      	movs	r1, #165	; 0xa5
 80042a6:	f001 fefe 	bl	80060a6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80042b4:	3b01      	subs	r3, #1
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	f023 0307 	bic.w	r3, r3, #7
 80042c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d009      	beq.n	80042e2 <prvInitialiseNewTask+0x56>
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	e7fe      	b.n	80042e0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d01f      	beq.n	8004328 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042e8:	2300      	movs	r3, #0
 80042ea:	61fb      	str	r3, [r7, #28]
 80042ec:	e012      	b.n	8004314 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	4413      	add	r3, r2
 80042f4:	7819      	ldrb	r1, [r3, #0]
 80042f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	4413      	add	r3, r2
 80042fc:	3334      	adds	r3, #52	; 0x34
 80042fe:	460a      	mov	r2, r1
 8004300:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	4413      	add	r3, r2
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d006      	beq.n	800431c <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	3301      	adds	r3, #1
 8004312:	61fb      	str	r3, [r7, #28]
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	2b0f      	cmp	r3, #15
 8004318:	d9e9      	bls.n	80042ee <prvInitialiseNewTask+0x62>
 800431a:	e000      	b.n	800431e <prvInitialiseNewTask+0x92>
			{
				break;
 800431c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004326:	e003      	b.n	8004330 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	2b37      	cmp	r3, #55	; 0x37
 8004334:	d901      	bls.n	800433a <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004336:	2337      	movs	r3, #55	; 0x37
 8004338:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004344:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	2200      	movs	r2, #0
 800434a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434e:	3304      	adds	r3, #4
 8004350:	4618      	mov	r0, r3
 8004352:	f7fe fe7d 	bl	8003050 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	3318      	adds	r3, #24
 800435a:	4618      	mov	r0, r3
 800435c:	f7fe fe78 	bl	8003050 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004362:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004364:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004368:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004374:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	2200      	movs	r2, #0
 800437a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800437e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004380:	2200      	movs	r2, #0
 8004382:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004388:	3354      	adds	r3, #84	; 0x54
 800438a:	2260      	movs	r2, #96	; 0x60
 800438c:	2100      	movs	r1, #0
 800438e:	4618      	mov	r0, r3
 8004390:	f001 fe89 	bl	80060a6 <memset>
 8004394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004396:	4a0d      	ldr	r2, [pc, #52]	; (80043cc <prvInitialiseNewTask+0x140>)
 8004398:	659a      	str	r2, [r3, #88]	; 0x58
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	4a0c      	ldr	r2, [pc, #48]	; (80043d0 <prvInitialiseNewTask+0x144>)
 800439e:	65da      	str	r2, [r3, #92]	; 0x5c
 80043a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a2:	4a0c      	ldr	r2, [pc, #48]	; (80043d4 <prvInitialiseNewTask+0x148>)
 80043a4:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	68f9      	ldr	r1, [r7, #12]
 80043aa:	69b8      	ldr	r0, [r7, #24]
 80043ac:	f001 fa26 	bl	80057fc <pxPortInitialiseStack>
 80043b0:	4602      	mov	r2, r0
 80043b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80043b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <prvInitialiseNewTask+0x136>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043c2:	bf00      	nop
 80043c4:	3720      	adds	r7, #32
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	080062e4 	.word	0x080062e4
 80043d0:	08006304 	.word	0x08006304
 80043d4:	080062c4 	.word	0x080062c4

080043d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80043e0:	f001 fb34 	bl	8005a4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043e4:	4b2d      	ldr	r3, [pc, #180]	; (800449c <prvAddNewTaskToReadyList+0xc4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3301      	adds	r3, #1
 80043ea:	4a2c      	ldr	r2, [pc, #176]	; (800449c <prvAddNewTaskToReadyList+0xc4>)
 80043ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80043ee:	4b2c      	ldr	r3, [pc, #176]	; (80044a0 <prvAddNewTaskToReadyList+0xc8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043f6:	4a2a      	ldr	r2, [pc, #168]	; (80044a0 <prvAddNewTaskToReadyList+0xc8>)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043fc:	4b27      	ldr	r3, [pc, #156]	; (800449c <prvAddNewTaskToReadyList+0xc4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d110      	bne.n	8004426 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004404:	f000 fc1a 	bl	8004c3c <prvInitialiseTaskLists>
 8004408:	e00d      	b.n	8004426 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800440a:	4b26      	ldr	r3, [pc, #152]	; (80044a4 <prvAddNewTaskToReadyList+0xcc>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d109      	bne.n	8004426 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004412:	4b23      	ldr	r3, [pc, #140]	; (80044a0 <prvAddNewTaskToReadyList+0xc8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	429a      	cmp	r2, r3
 800441e:	d802      	bhi.n	8004426 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004420:	4a1f      	ldr	r2, [pc, #124]	; (80044a0 <prvAddNewTaskToReadyList+0xc8>)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004426:	4b20      	ldr	r3, [pc, #128]	; (80044a8 <prvAddNewTaskToReadyList+0xd0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3301      	adds	r3, #1
 800442c:	4a1e      	ldr	r2, [pc, #120]	; (80044a8 <prvAddNewTaskToReadyList+0xd0>)
 800442e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004430:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <prvAddNewTaskToReadyList+0xd0>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443c:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <prvAddNewTaskToReadyList+0xd4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d903      	bls.n	800444c <prvAddNewTaskToReadyList+0x74>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004448:	4a18      	ldr	r2, [pc, #96]	; (80044ac <prvAddNewTaskToReadyList+0xd4>)
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4a15      	ldr	r2, [pc, #84]	; (80044b0 <prvAddNewTaskToReadyList+0xd8>)
 800445a:	441a      	add	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3304      	adds	r3, #4
 8004460:	4619      	mov	r1, r3
 8004462:	4610      	mov	r0, r2
 8004464:	f7fe fe01 	bl	800306a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004468:	f001 fb1e 	bl	8005aa8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800446c:	4b0d      	ldr	r3, [pc, #52]	; (80044a4 <prvAddNewTaskToReadyList+0xcc>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00e      	beq.n	8004492 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004474:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <prvAddNewTaskToReadyList+0xc8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	429a      	cmp	r2, r3
 8004480:	d207      	bcs.n	8004492 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004482:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <prvAddNewTaskToReadyList+0xdc>)
 8004484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20000ce4 	.word	0x20000ce4
 80044a0:	20000810 	.word	0x20000810
 80044a4:	20000cf0 	.word	0x20000cf0
 80044a8:	20000d00 	.word	0x20000d00
 80044ac:	20000cec 	.word	0x20000cec
 80044b0:	20000814 	.word	0x20000814
 80044b4:	e000ed04 	.word	0xe000ed04

080044b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d016      	beq.n	80044f8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80044ca:	4b13      	ldr	r3, [pc, #76]	; (8004518 <vTaskDelay+0x60>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <vTaskDelay+0x2e>
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	e7fe      	b.n	80044e4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80044e6:	f000 f889 	bl	80045fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80044ea:	2100      	movs	r1, #0
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fdeb 	bl	80050c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80044f2:	f000 f891 	bl	8004618 <xTaskResumeAll>
 80044f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d107      	bne.n	800450e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80044fe:	4b07      	ldr	r3, [pc, #28]	; (800451c <vTaskDelay+0x64>)
 8004500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000d0c 	.word	0x20000d0c
 800451c:	e000ed04 	.word	0xe000ed04

08004520 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08a      	sub	sp, #40	; 0x28
 8004524:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800452a:	2300      	movs	r3, #0
 800452c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800452e:	463a      	mov	r2, r7
 8004530:	1d39      	adds	r1, r7, #4
 8004532:	f107 0308 	add.w	r3, r7, #8
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe fd36 	bl	8002fa8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800453c:	6839      	ldr	r1, [r7, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	9202      	str	r2, [sp, #8]
 8004544:	9301      	str	r3, [sp, #4]
 8004546:	2300      	movs	r3, #0
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	2300      	movs	r3, #0
 800454c:	460a      	mov	r2, r1
 800454e:	4923      	ldr	r1, [pc, #140]	; (80045dc <vTaskStartScheduler+0xbc>)
 8004550:	4823      	ldr	r0, [pc, #140]	; (80045e0 <vTaskStartScheduler+0xc0>)
 8004552:	f7ff fdfb 	bl	800414c <xTaskCreateStatic>
 8004556:	4602      	mov	r2, r0
 8004558:	4b22      	ldr	r3, [pc, #136]	; (80045e4 <vTaskStartScheduler+0xc4>)
 800455a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800455c:	4b21      	ldr	r3, [pc, #132]	; (80045e4 <vTaskStartScheduler+0xc4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004564:	2301      	movs	r3, #1
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	e001      	b.n	800456e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d102      	bne.n	800457a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004574:	f000 fdfc 	bl	8005170 <xTimerCreateTimerTask>
 8004578:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d11a      	bne.n	80045b6 <vTaskStartScheduler+0x96>
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	613b      	str	r3, [r7, #16]
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004592:	4b15      	ldr	r3, [pc, #84]	; (80045e8 <vTaskStartScheduler+0xc8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3354      	adds	r3, #84	; 0x54
 8004598:	4a14      	ldr	r2, [pc, #80]	; (80045ec <vTaskStartScheduler+0xcc>)
 800459a:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800459c:	4b14      	ldr	r3, [pc, #80]	; (80045f0 <vTaskStartScheduler+0xd0>)
 800459e:	f04f 32ff 	mov.w	r2, #4294967295
 80045a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80045a4:	4b13      	ldr	r3, [pc, #76]	; (80045f4 <vTaskStartScheduler+0xd4>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80045aa:	4b13      	ldr	r3, [pc, #76]	; (80045f8 <vTaskStartScheduler+0xd8>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80045b0:	f001 f9ae 	bl	8005910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80045b4:	e00d      	b.n	80045d2 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045bc:	d109      	bne.n	80045d2 <vTaskStartScheduler+0xb2>
 80045be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	e7fe      	b.n	80045d0 <vTaskStartScheduler+0xb0>
}
 80045d2:	bf00      	nop
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	08006260 	.word	0x08006260
 80045e0:	08004c0d 	.word	0x08004c0d
 80045e4:	20000d08 	.word	0x20000d08
 80045e8:	20000810 	.word	0x20000810
 80045ec:	20000010 	.word	0x20000010
 80045f0:	20000d04 	.word	0x20000d04
 80045f4:	20000cf0 	.word	0x20000cf0
 80045f8:	20000ce8 	.word	0x20000ce8

080045fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004600:	4b04      	ldr	r3, [pc, #16]	; (8004614 <vTaskSuspendAll+0x18>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3301      	adds	r3, #1
 8004606:	4a03      	ldr	r2, [pc, #12]	; (8004614 <vTaskSuspendAll+0x18>)
 8004608:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800460a:	bf00      	nop
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	20000d0c 	.word	0x20000d0c

08004618 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004622:	2300      	movs	r3, #0
 8004624:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004626:	4b41      	ldr	r3, [pc, #260]	; (800472c <xTaskResumeAll+0x114>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d109      	bne.n	8004642 <xTaskResumeAll+0x2a>
 800462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	e7fe      	b.n	8004640 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004642:	f001 fa03 	bl	8005a4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004646:	4b39      	ldr	r3, [pc, #228]	; (800472c <xTaskResumeAll+0x114>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3b01      	subs	r3, #1
 800464c:	4a37      	ldr	r2, [pc, #220]	; (800472c <xTaskResumeAll+0x114>)
 800464e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004650:	4b36      	ldr	r3, [pc, #216]	; (800472c <xTaskResumeAll+0x114>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d162      	bne.n	800471e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004658:	4b35      	ldr	r3, [pc, #212]	; (8004730 <xTaskResumeAll+0x118>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d05e      	beq.n	800471e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004660:	e02f      	b.n	80046c2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004662:	4b34      	ldr	r3, [pc, #208]	; (8004734 <xTaskResumeAll+0x11c>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	3318      	adds	r3, #24
 800466e:	4618      	mov	r0, r3
 8004670:	f7fe fd58 	bl	8003124 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3304      	adds	r3, #4
 8004678:	4618      	mov	r0, r3
 800467a:	f7fe fd53 	bl	8003124 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004682:	4b2d      	ldr	r3, [pc, #180]	; (8004738 <xTaskResumeAll+0x120>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d903      	bls.n	8004692 <xTaskResumeAll+0x7a>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	4a2a      	ldr	r2, [pc, #168]	; (8004738 <xTaskResumeAll+0x120>)
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4a27      	ldr	r2, [pc, #156]	; (800473c <xTaskResumeAll+0x124>)
 80046a0:	441a      	add	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	3304      	adds	r3, #4
 80046a6:	4619      	mov	r1, r3
 80046a8:	4610      	mov	r0, r2
 80046aa:	f7fe fcde 	bl	800306a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046b2:	4b23      	ldr	r3, [pc, #140]	; (8004740 <xTaskResumeAll+0x128>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d302      	bcc.n	80046c2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80046bc:	4b21      	ldr	r3, [pc, #132]	; (8004744 <xTaskResumeAll+0x12c>)
 80046be:	2201      	movs	r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046c2:	4b1c      	ldr	r3, [pc, #112]	; (8004734 <xTaskResumeAll+0x11c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1cb      	bne.n	8004662 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80046d0:	f000 fb54 	bl	8004d7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80046d4:	4b1c      	ldr	r3, [pc, #112]	; (8004748 <xTaskResumeAll+0x130>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d010      	beq.n	8004702 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80046e0:	f000 f846 	bl	8004770 <xTaskIncrementTick>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80046ea:	4b16      	ldr	r3, [pc, #88]	; (8004744 <xTaskResumeAll+0x12c>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1f1      	bne.n	80046e0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80046fc:	4b12      	ldr	r3, [pc, #72]	; (8004748 <xTaskResumeAll+0x130>)
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004702:	4b10      	ldr	r3, [pc, #64]	; (8004744 <xTaskResumeAll+0x12c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d009      	beq.n	800471e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800470a:	2301      	movs	r3, #1
 800470c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800470e:	4b0f      	ldr	r3, [pc, #60]	; (800474c <xTaskResumeAll+0x134>)
 8004710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800471e:	f001 f9c3 	bl	8005aa8 <vPortExitCritical>

	return xAlreadyYielded;
 8004722:	68bb      	ldr	r3, [r7, #8]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20000d0c 	.word	0x20000d0c
 8004730:	20000ce4 	.word	0x20000ce4
 8004734:	20000ca4 	.word	0x20000ca4
 8004738:	20000cec 	.word	0x20000cec
 800473c:	20000814 	.word	0x20000814
 8004740:	20000810 	.word	0x20000810
 8004744:	20000cf8 	.word	0x20000cf8
 8004748:	20000cf4 	.word	0x20000cf4
 800474c:	e000ed04 	.word	0xe000ed04

08004750 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004756:	4b05      	ldr	r3, [pc, #20]	; (800476c <xTaskGetTickCount+0x1c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800475c:	687b      	ldr	r3, [r7, #4]
}
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	20000ce8 	.word	0x20000ce8

08004770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800477a:	4b4e      	ldr	r3, [pc, #312]	; (80048b4 <xTaskIncrementTick+0x144>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	f040 808e 	bne.w	80048a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004784:	4b4c      	ldr	r3, [pc, #304]	; (80048b8 <xTaskIncrementTick+0x148>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3301      	adds	r3, #1
 800478a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800478c:	4a4a      	ldr	r2, [pc, #296]	; (80048b8 <xTaskIncrementTick+0x148>)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d11f      	bne.n	80047d8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004798:	4b48      	ldr	r3, [pc, #288]	; (80048bc <xTaskIncrementTick+0x14c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <xTaskIncrementTick+0x46>
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	e7fe      	b.n	80047b4 <xTaskIncrementTick+0x44>
 80047b6:	4b41      	ldr	r3, [pc, #260]	; (80048bc <xTaskIncrementTick+0x14c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	4b40      	ldr	r3, [pc, #256]	; (80048c0 <xTaskIncrementTick+0x150>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a3e      	ldr	r2, [pc, #248]	; (80048bc <xTaskIncrementTick+0x14c>)
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	4a3e      	ldr	r2, [pc, #248]	; (80048c0 <xTaskIncrementTick+0x150>)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	4b3e      	ldr	r3, [pc, #248]	; (80048c4 <xTaskIncrementTick+0x154>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3301      	adds	r3, #1
 80047d0:	4a3c      	ldr	r2, [pc, #240]	; (80048c4 <xTaskIncrementTick+0x154>)
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	f000 fad2 	bl	8004d7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80047d8:	4b3b      	ldr	r3, [pc, #236]	; (80048c8 <xTaskIncrementTick+0x158>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d349      	bcc.n	8004876 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047e2:	4b36      	ldr	r3, [pc, #216]	; (80048bc <xTaskIncrementTick+0x14c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d104      	bne.n	80047f6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ec:	4b36      	ldr	r3, [pc, #216]	; (80048c8 <xTaskIncrementTick+0x158>)
 80047ee:	f04f 32ff 	mov.w	r2, #4294967295
 80047f2:	601a      	str	r2, [r3, #0]
					break;
 80047f4:	e03f      	b.n	8004876 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f6:	4b31      	ldr	r3, [pc, #196]	; (80048bc <xTaskIncrementTick+0x14c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	429a      	cmp	r2, r3
 800480c:	d203      	bcs.n	8004816 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800480e:	4a2e      	ldr	r2, [pc, #184]	; (80048c8 <xTaskIncrementTick+0x158>)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004814:	e02f      	b.n	8004876 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	3304      	adds	r3, #4
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe fc82 	bl	8003124 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	2b00      	cmp	r3, #0
 8004826:	d004      	beq.n	8004832 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	3318      	adds	r3, #24
 800482c:	4618      	mov	r0, r3
 800482e:	f7fe fc79 	bl	8003124 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004836:	4b25      	ldr	r3, [pc, #148]	; (80048cc <xTaskIncrementTick+0x15c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d903      	bls.n	8004846 <xTaskIncrementTick+0xd6>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	4a22      	ldr	r2, [pc, #136]	; (80048cc <xTaskIncrementTick+0x15c>)
 8004844:	6013      	str	r3, [r2, #0]
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	4a1f      	ldr	r2, [pc, #124]	; (80048d0 <xTaskIncrementTick+0x160>)
 8004854:	441a      	add	r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	3304      	adds	r3, #4
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f7fe fc04 	bl	800306a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004866:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <xTaskIncrementTick+0x164>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	429a      	cmp	r2, r3
 800486e:	d3b8      	bcc.n	80047e2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004870:	2301      	movs	r3, #1
 8004872:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004874:	e7b5      	b.n	80047e2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004876:	4b17      	ldr	r3, [pc, #92]	; (80048d4 <xTaskIncrementTick+0x164>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487c:	4914      	ldr	r1, [pc, #80]	; (80048d0 <xTaskIncrementTick+0x160>)
 800487e:	4613      	mov	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	4413      	add	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	440b      	add	r3, r1
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d901      	bls.n	8004892 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800488e:	2301      	movs	r3, #1
 8004890:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004892:	4b11      	ldr	r3, [pc, #68]	; (80048d8 <xTaskIncrementTick+0x168>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800489a:	2301      	movs	r3, #1
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	e004      	b.n	80048aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80048a0:	4b0e      	ldr	r3, [pc, #56]	; (80048dc <xTaskIncrementTick+0x16c>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3301      	adds	r3, #1
 80048a6:	4a0d      	ldr	r2, [pc, #52]	; (80048dc <xTaskIncrementTick+0x16c>)
 80048a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80048aa:	697b      	ldr	r3, [r7, #20]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20000d0c 	.word	0x20000d0c
 80048b8:	20000ce8 	.word	0x20000ce8
 80048bc:	20000c9c 	.word	0x20000c9c
 80048c0:	20000ca0 	.word	0x20000ca0
 80048c4:	20000cfc 	.word	0x20000cfc
 80048c8:	20000d04 	.word	0x20000d04
 80048cc:	20000cec 	.word	0x20000cec
 80048d0:	20000814 	.word	0x20000814
 80048d4:	20000810 	.word	0x20000810
 80048d8:	20000cf8 	.word	0x20000cf8
 80048dc:	20000cf4 	.word	0x20000cf4

080048e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80048e6:	4b2a      	ldr	r3, [pc, #168]	; (8004990 <vTaskSwitchContext+0xb0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80048ee:	4b29      	ldr	r3, [pc, #164]	; (8004994 <vTaskSwitchContext+0xb4>)
 80048f0:	2201      	movs	r2, #1
 80048f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80048f4:	e045      	b.n	8004982 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80048f6:	4b27      	ldr	r3, [pc, #156]	; (8004994 <vTaskSwitchContext+0xb4>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048fc:	4b26      	ldr	r3, [pc, #152]	; (8004998 <vTaskSwitchContext+0xb8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	e00f      	b.n	8004924 <vTaskSwitchContext+0x44>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d109      	bne.n	800491e <vTaskSwitchContext+0x3e>
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	607b      	str	r3, [r7, #4]
 800491c:	e7fe      	b.n	800491c <vTaskSwitchContext+0x3c>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3b01      	subs	r3, #1
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	491d      	ldr	r1, [pc, #116]	; (800499c <vTaskSwitchContext+0xbc>)
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0e5      	beq.n	8004904 <vTaskSwitchContext+0x24>
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4613      	mov	r3, r2
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	4413      	add	r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4a16      	ldr	r2, [pc, #88]	; (800499c <vTaskSwitchContext+0xbc>)
 8004944:	4413      	add	r3, r2
 8004946:	60bb      	str	r3, [r7, #8]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	605a      	str	r2, [r3, #4]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	3308      	adds	r3, #8
 800495a:	429a      	cmp	r2, r3
 800495c:	d104      	bne.n	8004968 <vTaskSwitchContext+0x88>
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	605a      	str	r2, [r3, #4]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	4a0c      	ldr	r2, [pc, #48]	; (80049a0 <vTaskSwitchContext+0xc0>)
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	4a09      	ldr	r2, [pc, #36]	; (8004998 <vTaskSwitchContext+0xb8>)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004978:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <vTaskSwitchContext+0xc0>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3354      	adds	r3, #84	; 0x54
 800497e:	4a09      	ldr	r2, [pc, #36]	; (80049a4 <vTaskSwitchContext+0xc4>)
 8004980:	6013      	str	r3, [r2, #0]
}
 8004982:	bf00      	nop
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20000d0c 	.word	0x20000d0c
 8004994:	20000cf8 	.word	0x20000cf8
 8004998:	20000cec 	.word	0x20000cec
 800499c:	20000814 	.word	0x20000814
 80049a0:	20000810 	.word	0x20000810
 80049a4:	20000010 	.word	0x20000010

080049a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d109      	bne.n	80049cc <vTaskPlaceOnEventList+0x24>
 80049b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	e7fe      	b.n	80049ca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049cc:	4b07      	ldr	r3, [pc, #28]	; (80049ec <vTaskPlaceOnEventList+0x44>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3318      	adds	r3, #24
 80049d2:	4619      	mov	r1, r3
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7fe fb6c 	bl	80030b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049da:	2101      	movs	r1, #1
 80049dc:	6838      	ldr	r0, [r7, #0]
 80049de:	f000 fb73 	bl	80050c8 <prvAddCurrentTaskToDelayedList>
}
 80049e2:	bf00      	nop
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20000810 	.word	0x20000810

080049f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d109      	bne.n	8004a16 <vTaskPlaceOnEventListRestricted+0x26>
 8004a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a06:	f383 8811 	msr	BASEPRI, r3
 8004a0a:	f3bf 8f6f 	isb	sy
 8004a0e:	f3bf 8f4f 	dsb	sy
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	e7fe      	b.n	8004a14 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a16:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <vTaskPlaceOnEventListRestricted+0x50>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3318      	adds	r3, #24
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f7fe fb23 	bl	800306a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	68b8      	ldr	r0, [r7, #8]
 8004a34:	f000 fb48 	bl	80050c8 <prvAddCurrentTaskToDelayedList>
	}
 8004a38:	bf00      	nop
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	20000810 	.word	0x20000810

08004a44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <xTaskRemoveFromEventList+0x2a>
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	e7fe      	b.n	8004a6c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	3318      	adds	r3, #24
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fe fb56 	bl	8003124 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a78:	4b1d      	ldr	r3, [pc, #116]	; (8004af0 <xTaskRemoveFromEventList+0xac>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d11d      	bne.n	8004abc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	3304      	adds	r3, #4
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fe fb4d 	bl	8003124 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8e:	4b19      	ldr	r3, [pc, #100]	; (8004af4 <xTaskRemoveFromEventList+0xb0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d903      	bls.n	8004a9e <xTaskRemoveFromEventList+0x5a>
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9a:	4a16      	ldr	r2, [pc, #88]	; (8004af4 <xTaskRemoveFromEventList+0xb0>)
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4413      	add	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4a13      	ldr	r2, [pc, #76]	; (8004af8 <xTaskRemoveFromEventList+0xb4>)
 8004aac:	441a      	add	r2, r3
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	f7fe fad8 	bl	800306a <vListInsertEnd>
 8004aba:	e005      	b.n	8004ac8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	3318      	adds	r3, #24
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	480e      	ldr	r0, [pc, #56]	; (8004afc <xTaskRemoveFromEventList+0xb8>)
 8004ac4:	f7fe fad1 	bl	800306a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004acc:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <xTaskRemoveFromEventList+0xbc>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d905      	bls.n	8004ae2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ada:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <xTaskRemoveFromEventList+0xc0>)
 8004adc:	2201      	movs	r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	e001      	b.n	8004ae6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ae6:	697b      	ldr	r3, [r7, #20]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	20000d0c 	.word	0x20000d0c
 8004af4:	20000cec 	.word	0x20000cec
 8004af8:	20000814 	.word	0x20000814
 8004afc:	20000ca4 	.word	0x20000ca4
 8004b00:	20000810 	.word	0x20000810
 8004b04:	20000cf8 	.word	0x20000cf8

08004b08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b10:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <vTaskInternalSetTimeOutState+0x24>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b18:	4b05      	ldr	r3, [pc, #20]	; (8004b30 <vTaskInternalSetTimeOutState+0x28>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	605a      	str	r2, [r3, #4]
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	20000cfc 	.word	0x20000cfc
 8004b30:	20000ce8 	.word	0x20000ce8

08004b34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d109      	bne.n	8004b58 <xTaskCheckForTimeOut+0x24>
 8004b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	e7fe      	b.n	8004b56 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d109      	bne.n	8004b72 <xTaskCheckForTimeOut+0x3e>
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	e7fe      	b.n	8004b70 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004b72:	f000 ff6b 	bl	8005a4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b76:	4b1d      	ldr	r3, [pc, #116]	; (8004bec <xTaskCheckForTimeOut+0xb8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8e:	d102      	bne.n	8004b96 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b90:	2300      	movs	r3, #0
 8004b92:	61fb      	str	r3, [r7, #28]
 8004b94:	e023      	b.n	8004bde <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <xTaskCheckForTimeOut+0xbc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d007      	beq.n	8004bb2 <xTaskCheckForTimeOut+0x7e>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d302      	bcc.n	8004bb2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004bac:	2301      	movs	r3, #1
 8004bae:	61fb      	str	r3, [r7, #28]
 8004bb0:	e015      	b.n	8004bde <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d20b      	bcs.n	8004bd4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	1ad2      	subs	r2, r2, r3
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7ff ff9d 	bl	8004b08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61fb      	str	r3, [r7, #28]
 8004bd2:	e004      	b.n	8004bde <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004bde:	f000 ff63 	bl	8005aa8 <vPortExitCritical>

	return xReturn;
 8004be2:	69fb      	ldr	r3, [r7, #28]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3720      	adds	r7, #32
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	20000ce8 	.word	0x20000ce8
 8004bf0:	20000cfc 	.word	0x20000cfc

08004bf4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004bf8:	4b03      	ldr	r3, [pc, #12]	; (8004c08 <vTaskMissedYield+0x14>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]
}
 8004bfe:	bf00      	nop
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	20000cf8 	.word	0x20000cf8

08004c0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c14:	f000 f852 	bl	8004cbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c18:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <prvIdleTask+0x28>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d9f9      	bls.n	8004c14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <prvIdleTask+0x2c>)
 8004c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c30:	e7f0      	b.n	8004c14 <prvIdleTask+0x8>
 8004c32:	bf00      	nop
 8004c34:	20000814 	.word	0x20000814
 8004c38:	e000ed04 	.word	0xe000ed04

08004c3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c42:	2300      	movs	r3, #0
 8004c44:	607b      	str	r3, [r7, #4]
 8004c46:	e00c      	b.n	8004c62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4a12      	ldr	r2, [pc, #72]	; (8004c9c <prvInitialiseTaskLists+0x60>)
 8004c54:	4413      	add	r3, r2
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fe f9da 	bl	8003010 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	607b      	str	r3, [r7, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2b37      	cmp	r3, #55	; 0x37
 8004c66:	d9ef      	bls.n	8004c48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c68:	480d      	ldr	r0, [pc, #52]	; (8004ca0 <prvInitialiseTaskLists+0x64>)
 8004c6a:	f7fe f9d1 	bl	8003010 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c6e:	480d      	ldr	r0, [pc, #52]	; (8004ca4 <prvInitialiseTaskLists+0x68>)
 8004c70:	f7fe f9ce 	bl	8003010 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c74:	480c      	ldr	r0, [pc, #48]	; (8004ca8 <prvInitialiseTaskLists+0x6c>)
 8004c76:	f7fe f9cb 	bl	8003010 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c7a:	480c      	ldr	r0, [pc, #48]	; (8004cac <prvInitialiseTaskLists+0x70>)
 8004c7c:	f7fe f9c8 	bl	8003010 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c80:	480b      	ldr	r0, [pc, #44]	; (8004cb0 <prvInitialiseTaskLists+0x74>)
 8004c82:	f7fe f9c5 	bl	8003010 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c86:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <prvInitialiseTaskLists+0x78>)
 8004c88:	4a05      	ldr	r2, [pc, #20]	; (8004ca0 <prvInitialiseTaskLists+0x64>)
 8004c8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <prvInitialiseTaskLists+0x7c>)
 8004c8e:	4a05      	ldr	r2, [pc, #20]	; (8004ca4 <prvInitialiseTaskLists+0x68>)
 8004c90:	601a      	str	r2, [r3, #0]
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000814 	.word	0x20000814
 8004ca0:	20000c74 	.word	0x20000c74
 8004ca4:	20000c88 	.word	0x20000c88
 8004ca8:	20000ca4 	.word	0x20000ca4
 8004cac:	20000cb8 	.word	0x20000cb8
 8004cb0:	20000cd0 	.word	0x20000cd0
 8004cb4:	20000c9c 	.word	0x20000c9c
 8004cb8:	20000ca0 	.word	0x20000ca0

08004cbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cc2:	e019      	b.n	8004cf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004cc4:	f000 fec2 	bl	8005a4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cc8:	4b0f      	ldr	r3, [pc, #60]	; (8004d08 <prvCheckTasksWaitingTermination+0x4c>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fe fa25 	bl	8003124 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004cda:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <prvCheckTasksWaitingTermination+0x50>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	4a0a      	ldr	r2, [pc, #40]	; (8004d0c <prvCheckTasksWaitingTermination+0x50>)
 8004ce2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <prvCheckTasksWaitingTermination+0x54>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	4a09      	ldr	r2, [pc, #36]	; (8004d10 <prvCheckTasksWaitingTermination+0x54>)
 8004cec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004cee:	f000 fedb 	bl	8005aa8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f80e 	bl	8004d14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cf8:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <prvCheckTasksWaitingTermination+0x54>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e1      	bne.n	8004cc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	20000cb8 	.word	0x20000cb8
 8004d0c:	20000ce4 	.word	0x20000ce4
 8004d10:	20000ccc 	.word	0x20000ccc

08004d14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	3354      	adds	r3, #84	; 0x54
 8004d20:	4618      	mov	r0, r3
 8004d22:	f001 f9d5 	bl	80060d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d108      	bne.n	8004d42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d34:	4618      	mov	r0, r3
 8004d36:	f001 f86b 	bl	8005e10 <vPortFree>
				vPortFree( pxTCB );
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f001 f868 	bl	8005e10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d40:	e017      	b.n	8004d72 <prvDeleteTCB+0x5e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d103      	bne.n	8004d54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f001 f85f 	bl	8005e10 <vPortFree>
	}
 8004d52:	e00e      	b.n	8004d72 <prvDeleteTCB+0x5e>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d009      	beq.n	8004d72 <prvDeleteTCB+0x5e>
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	e7fe      	b.n	8004d70 <prvDeleteTCB+0x5c>
	}
 8004d72:	bf00      	nop
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d82:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <prvResetNextTaskUnblockTime+0x38>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d104      	bne.n	8004d96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <prvResetNextTaskUnblockTime+0x3c>)
 8004d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d94:	e008      	b.n	8004da8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d96:	4b07      	ldr	r3, [pc, #28]	; (8004db4 <prvResetNextTaskUnblockTime+0x38>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	4a04      	ldr	r2, [pc, #16]	; (8004db8 <prvResetNextTaskUnblockTime+0x3c>)
 8004da6:	6013      	str	r3, [r2, #0]
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	20000c9c 	.word	0x20000c9c
 8004db8:	20000d04 	.word	0x20000d04

08004dbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004dc2:	4b0b      	ldr	r3, [pc, #44]	; (8004df0 <xTaskGetSchedulerState+0x34>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d102      	bne.n	8004dd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	607b      	str	r3, [r7, #4]
 8004dce:	e008      	b.n	8004de2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dd0:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <xTaskGetSchedulerState+0x38>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d102      	bne.n	8004dde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004dd8:	2302      	movs	r3, #2
 8004dda:	607b      	str	r3, [r7, #4]
 8004ddc:	e001      	b.n	8004de2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004dde:	2300      	movs	r3, #0
 8004de0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004de2:	687b      	ldr	r3, [r7, #4]
	}
 8004de4:	4618      	mov	r0, r3
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	20000cf0 	.word	0x20000cf0
 8004df4:	20000d0c 	.word	0x20000d0c

08004df8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004e04:	2300      	movs	r3, #0
 8004e06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d051      	beq.n	8004eb2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e12:	4b2a      	ldr	r3, [pc, #168]	; (8004ebc <xTaskPriorityInherit+0xc4>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d241      	bcs.n	8004ea0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	db06      	blt.n	8004e32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e24:	4b25      	ldr	r3, [pc, #148]	; (8004ebc <xTaskPriorityInherit+0xc4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	6959      	ldr	r1, [r3, #20]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4a1f      	ldr	r2, [pc, #124]	; (8004ec0 <xTaskPriorityInherit+0xc8>)
 8004e44:	4413      	add	r3, r2
 8004e46:	4299      	cmp	r1, r3
 8004e48:	d122      	bne.n	8004e90 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fe f968 	bl	8003124 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e54:	4b19      	ldr	r3, [pc, #100]	; (8004ebc <xTaskPriorityInherit+0xc4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e62:	4b18      	ldr	r3, [pc, #96]	; (8004ec4 <xTaskPriorityInherit+0xcc>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d903      	bls.n	8004e72 <xTaskPriorityInherit+0x7a>
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6e:	4a15      	ldr	r2, [pc, #84]	; (8004ec4 <xTaskPriorityInherit+0xcc>)
 8004e70:	6013      	str	r3, [r2, #0]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4a10      	ldr	r2, [pc, #64]	; (8004ec0 <xTaskPriorityInherit+0xc8>)
 8004e80:	441a      	add	r2, r3
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	3304      	adds	r3, #4
 8004e86:	4619      	mov	r1, r3
 8004e88:	4610      	mov	r0, r2
 8004e8a:	f7fe f8ee 	bl	800306a <vListInsertEnd>
 8004e8e:	e004      	b.n	8004e9a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e90:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <xTaskPriorityInherit+0xc4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	60fb      	str	r3, [r7, #12]
 8004e9e:	e008      	b.n	8004eb2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ea4:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <xTaskPriorityInherit+0xc4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d201      	bcs.n	8004eb2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
	}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	20000810 	.word	0x20000810
 8004ec0:	20000814 	.word	0x20000814
 8004ec4:	20000cec 	.word	0x20000cec

08004ec8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d054      	beq.n	8004f88 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004ede:	4b2d      	ldr	r3, [pc, #180]	; (8004f94 <xTaskPriorityDisinherit+0xcc>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d009      	beq.n	8004efc <xTaskPriorityDisinherit+0x34>
 8004ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	e7fe      	b.n	8004efa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d109      	bne.n	8004f18 <xTaskPriorityDisinherit+0x50>
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	60bb      	str	r3, [r7, #8]
 8004f16:	e7fe      	b.n	8004f16 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1c:	1e5a      	subs	r2, r3, #1
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d02c      	beq.n	8004f88 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d128      	bne.n	8004f88 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fe f8f2 	bl	8003124 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f58:	4b0f      	ldr	r3, [pc, #60]	; (8004f98 <xTaskPriorityDisinherit+0xd0>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d903      	bls.n	8004f68 <xTaskPriorityDisinherit+0xa0>
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	4a0c      	ldr	r2, [pc, #48]	; (8004f98 <xTaskPriorityDisinherit+0xd0>)
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4a09      	ldr	r2, [pc, #36]	; (8004f9c <xTaskPriorityDisinherit+0xd4>)
 8004f76:	441a      	add	r2, r3
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	3304      	adds	r3, #4
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	f7fe f873 	bl	800306a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f84:	2301      	movs	r3, #1
 8004f86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f88:	697b      	ldr	r3, [r7, #20]
	}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000810 	.word	0x20000810
 8004f98:	20000cec 	.word	0x20000cec
 8004f9c:	20000814 	.word	0x20000814

08004fa0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d068      	beq.n	800508a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d109      	bne.n	8004fd4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	e7fe      	b.n	8004fd2 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d902      	bls.n	8004fe4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	61fb      	str	r3, [r7, #28]
 8004fe2:	e002      	b.n	8004fea <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	69fa      	ldr	r2, [r7, #28]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d04a      	beq.n	800508a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d145      	bne.n	800508a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004ffe:	4b25      	ldr	r3, [pc, #148]	; (8005094 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	429a      	cmp	r2, r3
 8005006:	d109      	bne.n	800501c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	60bb      	str	r3, [r7, #8]
 800501a:	e7fe      	b.n	800501a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	69fa      	ldr	r2, [r7, #28]
 8005026:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	2b00      	cmp	r3, #0
 800502e:	db04      	blt.n	800503a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	6959      	ldr	r1, [r3, #20]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4a13      	ldr	r2, [pc, #76]	; (8005098 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800504a:	4413      	add	r3, r2
 800504c:	4299      	cmp	r1, r3
 800504e:	d11c      	bne.n	800508a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	3304      	adds	r3, #4
 8005054:	4618      	mov	r0, r3
 8005056:	f7fe f865 	bl	8003124 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505e:	4b0f      	ldr	r3, [pc, #60]	; (800509c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d903      	bls.n	800506e <vTaskPriorityDisinheritAfterTimeout+0xce>
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506a:	4a0c      	ldr	r2, [pc, #48]	; (800509c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4a07      	ldr	r2, [pc, #28]	; (8005098 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800507c:	441a      	add	r2, r3
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	3304      	adds	r3, #4
 8005082:	4619      	mov	r1, r3
 8005084:	4610      	mov	r0, r2
 8005086:	f7fd fff0 	bl	800306a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800508a:	bf00      	nop
 800508c:	3720      	adds	r7, #32
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000810 	.word	0x20000810
 8005098:	20000814 	.word	0x20000814
 800509c:	20000cec 	.word	0x20000cec

080050a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80050a4:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d004      	beq.n	80050b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80050ac:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80050b2:	3201      	adds	r2, #1
 80050b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80050b6:	4b03      	ldr	r3, [pc, #12]	; (80050c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80050b8:	681b      	ldr	r3, [r3, #0]
	}
 80050ba:	4618      	mov	r0, r3
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	20000810 	.word	0x20000810

080050c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050d2:	4b21      	ldr	r3, [pc, #132]	; (8005158 <prvAddCurrentTaskToDelayedList+0x90>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050d8:	4b20      	ldr	r3, [pc, #128]	; (800515c <prvAddCurrentTaskToDelayedList+0x94>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3304      	adds	r3, #4
 80050de:	4618      	mov	r0, r3
 80050e0:	f7fe f820 	bl	8003124 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ea:	d10a      	bne.n	8005102 <prvAddCurrentTaskToDelayedList+0x3a>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d007      	beq.n	8005102 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050f2:	4b1a      	ldr	r3, [pc, #104]	; (800515c <prvAddCurrentTaskToDelayedList+0x94>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3304      	adds	r3, #4
 80050f8:	4619      	mov	r1, r3
 80050fa:	4819      	ldr	r0, [pc, #100]	; (8005160 <prvAddCurrentTaskToDelayedList+0x98>)
 80050fc:	f7fd ffb5 	bl	800306a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005100:	e026      	b.n	8005150 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4413      	add	r3, r2
 8005108:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800510a:	4b14      	ldr	r3, [pc, #80]	; (800515c <prvAddCurrentTaskToDelayedList+0x94>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	429a      	cmp	r2, r3
 8005118:	d209      	bcs.n	800512e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800511a:	4b12      	ldr	r3, [pc, #72]	; (8005164 <prvAddCurrentTaskToDelayedList+0x9c>)
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	4b0f      	ldr	r3, [pc, #60]	; (800515c <prvAddCurrentTaskToDelayedList+0x94>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3304      	adds	r3, #4
 8005124:	4619      	mov	r1, r3
 8005126:	4610      	mov	r0, r2
 8005128:	f7fd ffc3 	bl	80030b2 <vListInsert>
}
 800512c:	e010      	b.n	8005150 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800512e:	4b0e      	ldr	r3, [pc, #56]	; (8005168 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	4b0a      	ldr	r3, [pc, #40]	; (800515c <prvAddCurrentTaskToDelayedList+0x94>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	3304      	adds	r3, #4
 8005138:	4619      	mov	r1, r3
 800513a:	4610      	mov	r0, r2
 800513c:	f7fd ffb9 	bl	80030b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005140:	4b0a      	ldr	r3, [pc, #40]	; (800516c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	429a      	cmp	r2, r3
 8005148:	d202      	bcs.n	8005150 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800514a:	4a08      	ldr	r2, [pc, #32]	; (800516c <prvAddCurrentTaskToDelayedList+0xa4>)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	6013      	str	r3, [r2, #0]
}
 8005150:	bf00      	nop
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20000ce8 	.word	0x20000ce8
 800515c:	20000810 	.word	0x20000810
 8005160:	20000cd0 	.word	0x20000cd0
 8005164:	20000ca0 	.word	0x20000ca0
 8005168:	20000c9c 	.word	0x20000c9c
 800516c:	20000d04 	.word	0x20000d04

08005170 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08a      	sub	sp, #40	; 0x28
 8005174:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800517a:	f000 faff 	bl	800577c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800517e:	4b1c      	ldr	r3, [pc, #112]	; (80051f0 <xTimerCreateTimerTask+0x80>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d021      	beq.n	80051ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005186:	2300      	movs	r3, #0
 8005188:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800518a:	2300      	movs	r3, #0
 800518c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800518e:	1d3a      	adds	r2, r7, #4
 8005190:	f107 0108 	add.w	r1, r7, #8
 8005194:	f107 030c 	add.w	r3, r7, #12
 8005198:	4618      	mov	r0, r3
 800519a:	f7fd ff1f 	bl	8002fdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800519e:	6879      	ldr	r1, [r7, #4]
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	9202      	str	r2, [sp, #8]
 80051a6:	9301      	str	r3, [sp, #4]
 80051a8:	2302      	movs	r3, #2
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	2300      	movs	r3, #0
 80051ae:	460a      	mov	r2, r1
 80051b0:	4910      	ldr	r1, [pc, #64]	; (80051f4 <xTimerCreateTimerTask+0x84>)
 80051b2:	4811      	ldr	r0, [pc, #68]	; (80051f8 <xTimerCreateTimerTask+0x88>)
 80051b4:	f7fe ffca 	bl	800414c <xTaskCreateStatic>
 80051b8:	4602      	mov	r2, r0
 80051ba:	4b10      	ldr	r3, [pc, #64]	; (80051fc <xTimerCreateTimerTask+0x8c>)
 80051bc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80051be:	4b0f      	ldr	r3, [pc, #60]	; (80051fc <xTimerCreateTimerTask+0x8c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80051c6:	2301      	movs	r3, #1
 80051c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d109      	bne.n	80051e4 <xTimerCreateTimerTask+0x74>
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	613b      	str	r3, [r7, #16]
 80051e2:	e7fe      	b.n	80051e2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80051e4:	697b      	ldr	r3, [r7, #20]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20000d40 	.word	0x20000d40
 80051f4:	08006268 	.word	0x08006268
 80051f8:	08005331 	.word	0x08005331
 80051fc:	20000d44 	.word	0x20000d44

08005200 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08a      	sub	sp, #40	; 0x28
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800520e:	2300      	movs	r3, #0
 8005210:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d109      	bne.n	800522c <xTimerGenericCommand+0x2c>
 8005218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	623b      	str	r3, [r7, #32]
 800522a:	e7fe      	b.n	800522a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800522c:	4b19      	ldr	r3, [pc, #100]	; (8005294 <xTimerGenericCommand+0x94>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d02a      	beq.n	800528a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b05      	cmp	r3, #5
 8005244:	dc18      	bgt.n	8005278 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005246:	f7ff fdb9 	bl	8004dbc <xTaskGetSchedulerState>
 800524a:	4603      	mov	r3, r0
 800524c:	2b02      	cmp	r3, #2
 800524e:	d109      	bne.n	8005264 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005250:	4b10      	ldr	r3, [pc, #64]	; (8005294 <xTimerGenericCommand+0x94>)
 8005252:	6818      	ldr	r0, [r3, #0]
 8005254:	f107 0110 	add.w	r1, r7, #16
 8005258:	2300      	movs	r3, #0
 800525a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800525c:	f7fe f92a 	bl	80034b4 <xQueueGenericSend>
 8005260:	6278      	str	r0, [r7, #36]	; 0x24
 8005262:	e012      	b.n	800528a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005264:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <xTimerGenericCommand+0x94>)
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	f107 0110 	add.w	r1, r7, #16
 800526c:	2300      	movs	r3, #0
 800526e:	2200      	movs	r2, #0
 8005270:	f7fe f920 	bl	80034b4 <xQueueGenericSend>
 8005274:	6278      	str	r0, [r7, #36]	; 0x24
 8005276:	e008      	b.n	800528a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005278:	4b06      	ldr	r3, [pc, #24]	; (8005294 <xTimerGenericCommand+0x94>)
 800527a:	6818      	ldr	r0, [r3, #0]
 800527c:	f107 0110 	add.w	r1, r7, #16
 8005280:	2300      	movs	r3, #0
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	f7fe fa10 	bl	80036a8 <xQueueGenericSendFromISR>
 8005288:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800528c:	4618      	mov	r0, r3
 800528e:	3728      	adds	r7, #40	; 0x28
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20000d40 	.word	0x20000d40

08005298 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af02      	add	r7, sp, #8
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052a2:	4b22      	ldr	r3, [pc, #136]	; (800532c <prvProcessExpiredTimer+0x94>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	3304      	adds	r3, #4
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fd ff37 	bl	8003124 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d021      	beq.n	8005308 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	699a      	ldr	r2, [r3, #24]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	18d1      	adds	r1, r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	6978      	ldr	r0, [r7, #20]
 80052d2:	f000 f8d1 	bl	8005478 <prvInsertTimerInActiveList>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01e      	beq.n	800531a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052dc:	2300      	movs	r3, #0
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	2300      	movs	r3, #0
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	2100      	movs	r1, #0
 80052e6:	6978      	ldr	r0, [r7, #20]
 80052e8:	f7ff ff8a 	bl	8005200 <xTimerGenericCommand>
 80052ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d112      	bne.n	800531a <prvProcessExpiredTimer+0x82>
 80052f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	e7fe      	b.n	8005306 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800530e:	f023 0301 	bic.w	r3, r3, #1
 8005312:	b2da      	uxtb	r2, r3
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	6978      	ldr	r0, [r7, #20]
 8005320:	4798      	blx	r3
}
 8005322:	bf00      	nop
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20000d38 	.word	0x20000d38

08005330 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005338:	f107 0308 	add.w	r3, r7, #8
 800533c:	4618      	mov	r0, r3
 800533e:	f000 f857 	bl	80053f0 <prvGetNextExpireTime>
 8005342:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4619      	mov	r1, r3
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f803 	bl	8005354 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800534e:	f000 f8d5 	bl	80054fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005352:	e7f1      	b.n	8005338 <prvTimerTask+0x8>

08005354 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800535e:	f7ff f94d 	bl	80045fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005362:	f107 0308 	add.w	r3, r7, #8
 8005366:	4618      	mov	r0, r3
 8005368:	f000 f866 	bl	8005438 <prvSampleTimeNow>
 800536c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d130      	bne.n	80053d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10a      	bne.n	8005390 <prvProcessTimerOrBlockTask+0x3c>
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	429a      	cmp	r2, r3
 8005380:	d806      	bhi.n	8005390 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005382:	f7ff f949 	bl	8004618 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005386:	68f9      	ldr	r1, [r7, #12]
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7ff ff85 	bl	8005298 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800538e:	e024      	b.n	80053da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d008      	beq.n	80053a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005396:	4b13      	ldr	r3, [pc, #76]	; (80053e4 <prvProcessTimerOrBlockTask+0x90>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <prvProcessTimerOrBlockTask+0x50>
 80053a0:	2301      	movs	r3, #1
 80053a2:	e000      	b.n	80053a6 <prvProcessTimerOrBlockTask+0x52>
 80053a4:	2300      	movs	r3, #0
 80053a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80053a8:	4b0f      	ldr	r3, [pc, #60]	; (80053e8 <prvProcessTimerOrBlockTask+0x94>)
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	4619      	mov	r1, r3
 80053b6:	f7fe fe95 	bl	80040e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80053ba:	f7ff f92d 	bl	8004618 <xTaskResumeAll>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80053c4:	4b09      	ldr	r3, [pc, #36]	; (80053ec <prvProcessTimerOrBlockTask+0x98>)
 80053c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ca:	601a      	str	r2, [r3, #0]
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	f3bf 8f6f 	isb	sy
}
 80053d4:	e001      	b.n	80053da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80053d6:	f7ff f91f 	bl	8004618 <xTaskResumeAll>
}
 80053da:	bf00      	nop
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20000d3c 	.word	0x20000d3c
 80053e8:	20000d40 	.word	0x20000d40
 80053ec:	e000ed04 	.word	0xe000ed04

080053f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053f8:	4b0e      	ldr	r3, [pc, #56]	; (8005434 <prvGetNextExpireTime+0x44>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <prvGetNextExpireTime+0x16>
 8005402:	2201      	movs	r2, #1
 8005404:	e000      	b.n	8005408 <prvGetNextExpireTime+0x18>
 8005406:	2200      	movs	r2, #0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d105      	bne.n	8005420 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005414:	4b07      	ldr	r3, [pc, #28]	; (8005434 <prvGetNextExpireTime+0x44>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	60fb      	str	r3, [r7, #12]
 800541e:	e001      	b.n	8005424 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005424:	68fb      	ldr	r3, [r7, #12]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	20000d38 	.word	0x20000d38

08005438 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005440:	f7ff f986 	bl	8004750 <xTaskGetTickCount>
 8005444:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005446:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <prvSampleTimeNow+0x3c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	429a      	cmp	r2, r3
 800544e:	d205      	bcs.n	800545c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005450:	f000 f930 	bl	80056b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	e002      	b.n	8005462 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005462:	4a04      	ldr	r2, [pc, #16]	; (8005474 <prvSampleTimeNow+0x3c>)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005468:	68fb      	ldr	r3, [r7, #12]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20000d48 	.word	0x20000d48

08005478 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	429a      	cmp	r2, r3
 800549c:	d812      	bhi.n	80054c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	1ad2      	subs	r2, r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d302      	bcc.n	80054b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80054ac:	2301      	movs	r3, #1
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	e01b      	b.n	80054ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80054b2:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <prvInsertTimerInActiveList+0x7c>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	3304      	adds	r3, #4
 80054ba:	4619      	mov	r1, r3
 80054bc:	4610      	mov	r0, r2
 80054be:	f7fd fdf8 	bl	80030b2 <vListInsert>
 80054c2:	e012      	b.n	80054ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d206      	bcs.n	80054da <prvInsertTimerInActiveList+0x62>
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d302      	bcc.n	80054da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80054d4:	2301      	movs	r3, #1
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	e007      	b.n	80054ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054da:	4b07      	ldr	r3, [pc, #28]	; (80054f8 <prvInsertTimerInActiveList+0x80>)
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3304      	adds	r3, #4
 80054e2:	4619      	mov	r1, r3
 80054e4:	4610      	mov	r0, r2
 80054e6:	f7fd fde4 	bl	80030b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80054ea:	697b      	ldr	r3, [r7, #20]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	20000d3c 	.word	0x20000d3c
 80054f8:	20000d38 	.word	0x20000d38

080054fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08e      	sub	sp, #56	; 0x38
 8005500:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005502:	e0c6      	b.n	8005692 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	da17      	bge.n	800553a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800550a:	1d3b      	adds	r3, r7, #4
 800550c:	3304      	adds	r3, #4
 800550e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	2b00      	cmp	r3, #0
 8005514:	d109      	bne.n	800552a <prvProcessReceivedCommands+0x2e>
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	e7fe      	b.n	8005528 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800552a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005530:	6850      	ldr	r0, [r2, #4]
 8005532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005534:	6892      	ldr	r2, [r2, #8]
 8005536:	4611      	mov	r1, r2
 8005538:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	f2c0 80a7 	blt.w	8005690 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d004      	beq.n	8005558 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	3304      	adds	r3, #4
 8005552:	4618      	mov	r0, r3
 8005554:	f7fd fde6 	bl	8003124 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005558:	463b      	mov	r3, r7
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff ff6c 	bl	8005438 <prvSampleTimeNow>
 8005560:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b09      	cmp	r3, #9
 8005566:	f200 8094 	bhi.w	8005692 <prvProcessReceivedCommands+0x196>
 800556a:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <prvProcessReceivedCommands+0x74>)
 800556c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005570:	08005599 	.word	0x08005599
 8005574:	08005599 	.word	0x08005599
 8005578:	08005599 	.word	0x08005599
 800557c:	0800560b 	.word	0x0800560b
 8005580:	0800561f 	.word	0x0800561f
 8005584:	08005667 	.word	0x08005667
 8005588:	08005599 	.word	0x08005599
 800558c:	08005599 	.word	0x08005599
 8005590:	0800560b 	.word	0x0800560b
 8005594:	0800561f 	.word	0x0800561f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	18d1      	adds	r1, r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055b8:	f7ff ff5e 	bl	8005478 <prvInsertTimerInActiveList>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d067      	beq.n	8005692 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d05c      	beq.n	8005692 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	441a      	add	r2, r3
 80055e0:	2300      	movs	r3, #0
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	2300      	movs	r3, #0
 80055e6:	2100      	movs	r1, #0
 80055e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ea:	f7ff fe09 	bl	8005200 <xTimerGenericCommand>
 80055ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d14d      	bne.n	8005692 <prvProcessReceivedCommands+0x196>
 80055f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	61bb      	str	r3, [r7, #24]
 8005608:	e7fe      	b.n	8005608 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005610:	f023 0301 	bic.w	r3, r3, #1
 8005614:	b2da      	uxtb	r2, r3
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800561c:	e039      	b.n	8005692 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005624:	f043 0301 	orr.w	r3, r3, #1
 8005628:	b2da      	uxtb	r2, r3
 800562a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005634:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d109      	bne.n	8005652 <prvProcessReceivedCommands+0x156>
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	e7fe      	b.n	8005650 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005654:	699a      	ldr	r2, [r3, #24]
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	18d1      	adds	r1, r2, r3
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800565e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005660:	f7ff ff0a 	bl	8005478 <prvInsertTimerInActiveList>
					break;
 8005664:	e015      	b.n	8005692 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d103      	bne.n	800567c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8005674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005676:	f000 fbcb 	bl	8005e10 <vPortFree>
 800567a:	e00a      	b.n	8005692 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005682:	f023 0301 	bic.w	r3, r3, #1
 8005686:	b2da      	uxtb	r2, r3
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800568e:	e000      	b.n	8005692 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005690:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005692:	4b07      	ldr	r3, [pc, #28]	; (80056b0 <prvProcessReceivedCommands+0x1b4>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	1d39      	adds	r1, r7, #4
 8005698:	2200      	movs	r2, #0
 800569a:	4618      	mov	r0, r3
 800569c:	f7fe f924 	bl	80038e8 <xQueueReceive>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f47f af2e 	bne.w	8005504 <prvProcessReceivedCommands+0x8>
	}
}
 80056a8:	bf00      	nop
 80056aa:	3730      	adds	r7, #48	; 0x30
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20000d40 	.word	0x20000d40

080056b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056ba:	e047      	b.n	800574c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056bc:	4b2d      	ldr	r3, [pc, #180]	; (8005774 <prvSwitchTimerLists+0xc0>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056c6:	4b2b      	ldr	r3, [pc, #172]	; (8005774 <prvSwitchTimerLists+0xc0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3304      	adds	r3, #4
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fd fd25 	bl	8003124 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d02d      	beq.n	800574c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4413      	add	r3, r2
 80056f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d90e      	bls.n	8005720 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800570e:	4b19      	ldr	r3, [pc, #100]	; (8005774 <prvSwitchTimerLists+0xc0>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3304      	adds	r3, #4
 8005716:	4619      	mov	r1, r3
 8005718:	4610      	mov	r0, r2
 800571a:	f7fd fcca 	bl	80030b2 <vListInsert>
 800571e:	e015      	b.n	800574c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005720:	2300      	movs	r3, #0
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	2300      	movs	r3, #0
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	2100      	movs	r1, #0
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f7ff fd68 	bl	8005200 <xTimerGenericCommand>
 8005730:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d109      	bne.n	800574c <prvSwitchTimerLists+0x98>
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	603b      	str	r3, [r7, #0]
 800574a:	e7fe      	b.n	800574a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800574c:	4b09      	ldr	r3, [pc, #36]	; (8005774 <prvSwitchTimerLists+0xc0>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1b2      	bne.n	80056bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005756:	4b07      	ldr	r3, [pc, #28]	; (8005774 <prvSwitchTimerLists+0xc0>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800575c:	4b06      	ldr	r3, [pc, #24]	; (8005778 <prvSwitchTimerLists+0xc4>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a04      	ldr	r2, [pc, #16]	; (8005774 <prvSwitchTimerLists+0xc0>)
 8005762:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005764:	4a04      	ldr	r2, [pc, #16]	; (8005778 <prvSwitchTimerLists+0xc4>)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	6013      	str	r3, [r2, #0]
}
 800576a:	bf00      	nop
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000d38 	.word	0x20000d38
 8005778:	20000d3c 	.word	0x20000d3c

0800577c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005782:	f000 f963 	bl	8005a4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005786:	4b15      	ldr	r3, [pc, #84]	; (80057dc <prvCheckForValidListAndQueue+0x60>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d120      	bne.n	80057d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800578e:	4814      	ldr	r0, [pc, #80]	; (80057e0 <prvCheckForValidListAndQueue+0x64>)
 8005790:	f7fd fc3e 	bl	8003010 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005794:	4813      	ldr	r0, [pc, #76]	; (80057e4 <prvCheckForValidListAndQueue+0x68>)
 8005796:	f7fd fc3b 	bl	8003010 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800579a:	4b13      	ldr	r3, [pc, #76]	; (80057e8 <prvCheckForValidListAndQueue+0x6c>)
 800579c:	4a10      	ldr	r2, [pc, #64]	; (80057e0 <prvCheckForValidListAndQueue+0x64>)
 800579e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80057a0:	4b12      	ldr	r3, [pc, #72]	; (80057ec <prvCheckForValidListAndQueue+0x70>)
 80057a2:	4a10      	ldr	r2, [pc, #64]	; (80057e4 <prvCheckForValidListAndQueue+0x68>)
 80057a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80057a6:	2300      	movs	r3, #0
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	4b11      	ldr	r3, [pc, #68]	; (80057f0 <prvCheckForValidListAndQueue+0x74>)
 80057ac:	4a11      	ldr	r2, [pc, #68]	; (80057f4 <prvCheckForValidListAndQueue+0x78>)
 80057ae:	2110      	movs	r1, #16
 80057b0:	200a      	movs	r0, #10
 80057b2:	f7fd fd49 	bl	8003248 <xQueueGenericCreateStatic>
 80057b6:	4602      	mov	r2, r0
 80057b8:	4b08      	ldr	r3, [pc, #32]	; (80057dc <prvCheckForValidListAndQueue+0x60>)
 80057ba:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80057bc:	4b07      	ldr	r3, [pc, #28]	; (80057dc <prvCheckForValidListAndQueue+0x60>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80057c4:	4b05      	ldr	r3, [pc, #20]	; (80057dc <prvCheckForValidListAndQueue+0x60>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	490b      	ldr	r1, [pc, #44]	; (80057f8 <prvCheckForValidListAndQueue+0x7c>)
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fe fc38 	bl	8004040 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057d0:	f000 f96a 	bl	8005aa8 <vPortExitCritical>
}
 80057d4:	bf00      	nop
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	20000d40 	.word	0x20000d40
 80057e0:	20000d10 	.word	0x20000d10
 80057e4:	20000d24 	.word	0x20000d24
 80057e8:	20000d38 	.word	0x20000d38
 80057ec:	20000d3c 	.word	0x20000d3c
 80057f0:	20000dec 	.word	0x20000dec
 80057f4:	20000d4c 	.word	0x20000d4c
 80057f8:	08006270 	.word	0x08006270

080057fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3b04      	subs	r3, #4
 800580c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005814:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3b04      	subs	r3, #4
 800581a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	f023 0201 	bic.w	r2, r3, #1
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3b04      	subs	r3, #4
 800582a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800582c:	4a0c      	ldr	r2, [pc, #48]	; (8005860 <pxPortInitialiseStack+0x64>)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3b14      	subs	r3, #20
 8005836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3b04      	subs	r3, #4
 8005842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f06f 0202 	mvn.w	r2, #2
 800584a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3b20      	subs	r3, #32
 8005850:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005852:	68fb      	ldr	r3, [r7, #12]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	08005865 	.word	0x08005865

08005864 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800586e:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <prvTaskExitError+0x50>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005876:	d009      	beq.n	800588c <prvTaskExitError+0x28>
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	e7fe      	b.n	800588a <prvTaskExitError+0x26>
 800588c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005890:	f383 8811 	msr	BASEPRI, r3
 8005894:	f3bf 8f6f 	isb	sy
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800589e:	bf00      	nop
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0fc      	beq.n	80058a0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058a6:	bf00      	nop
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	2000000c 	.word	0x2000000c
	...

080058c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058c0:	4b07      	ldr	r3, [pc, #28]	; (80058e0 <pxCurrentTCBConst2>)
 80058c2:	6819      	ldr	r1, [r3, #0]
 80058c4:	6808      	ldr	r0, [r1, #0]
 80058c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ca:	f380 8809 	msr	PSP, r0
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f04f 0000 	mov.w	r0, #0
 80058d6:	f380 8811 	msr	BASEPRI, r0
 80058da:	4770      	bx	lr
 80058dc:	f3af 8000 	nop.w

080058e0 <pxCurrentTCBConst2>:
 80058e0:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop

080058e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058e8:	4808      	ldr	r0, [pc, #32]	; (800590c <prvPortStartFirstTask+0x24>)
 80058ea:	6800      	ldr	r0, [r0, #0]
 80058ec:	6800      	ldr	r0, [r0, #0]
 80058ee:	f380 8808 	msr	MSP, r0
 80058f2:	f04f 0000 	mov.w	r0, #0
 80058f6:	f380 8814 	msr	CONTROL, r0
 80058fa:	b662      	cpsie	i
 80058fc:	b661      	cpsie	f
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	f3bf 8f6f 	isb	sy
 8005906:	df00      	svc	0
 8005908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800590a:	bf00      	nop
 800590c:	e000ed08 	.word	0xe000ed08

08005910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005916:	4b44      	ldr	r3, [pc, #272]	; (8005a28 <xPortStartScheduler+0x118>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a44      	ldr	r2, [pc, #272]	; (8005a2c <xPortStartScheduler+0x11c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d109      	bne.n	8005934 <xPortStartScheduler+0x24>
 8005920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	613b      	str	r3, [r7, #16]
 8005932:	e7fe      	b.n	8005932 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005934:	4b3c      	ldr	r3, [pc, #240]	; (8005a28 <xPortStartScheduler+0x118>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a3d      	ldr	r2, [pc, #244]	; (8005a30 <xPortStartScheduler+0x120>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d109      	bne.n	8005952 <xPortStartScheduler+0x42>
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	e7fe      	b.n	8005950 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005952:	4b38      	ldr	r3, [pc, #224]	; (8005a34 <xPortStartScheduler+0x124>)
 8005954:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	b2db      	uxtb	r3, r3
 800595c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	22ff      	movs	r2, #255	; 0xff
 8005962:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	b2db      	uxtb	r3, r3
 800596a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800596c:	78fb      	ldrb	r3, [r7, #3]
 800596e:	b2db      	uxtb	r3, r3
 8005970:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005974:	b2da      	uxtb	r2, r3
 8005976:	4b30      	ldr	r3, [pc, #192]	; (8005a38 <xPortStartScheduler+0x128>)
 8005978:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800597a:	4b30      	ldr	r3, [pc, #192]	; (8005a3c <xPortStartScheduler+0x12c>)
 800597c:	2207      	movs	r2, #7
 800597e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005980:	e009      	b.n	8005996 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005982:	4b2e      	ldr	r3, [pc, #184]	; (8005a3c <xPortStartScheduler+0x12c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3b01      	subs	r3, #1
 8005988:	4a2c      	ldr	r2, [pc, #176]	; (8005a3c <xPortStartScheduler+0x12c>)
 800598a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	b2db      	uxtb	r3, r3
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	b2db      	uxtb	r3, r3
 8005994:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	b2db      	uxtb	r3, r3
 800599a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800599e:	2b80      	cmp	r3, #128	; 0x80
 80059a0:	d0ef      	beq.n	8005982 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059a2:	4b26      	ldr	r3, [pc, #152]	; (8005a3c <xPortStartScheduler+0x12c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f1c3 0307 	rsb	r3, r3, #7
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d009      	beq.n	80059c2 <xPortStartScheduler+0xb2>
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	60bb      	str	r3, [r7, #8]
 80059c0:	e7fe      	b.n	80059c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059c2:	4b1e      	ldr	r3, [pc, #120]	; (8005a3c <xPortStartScheduler+0x12c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	021b      	lsls	r3, r3, #8
 80059c8:	4a1c      	ldr	r2, [pc, #112]	; (8005a3c <xPortStartScheduler+0x12c>)
 80059ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059cc:	4b1b      	ldr	r3, [pc, #108]	; (8005a3c <xPortStartScheduler+0x12c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059d4:	4a19      	ldr	r2, [pc, #100]	; (8005a3c <xPortStartScheduler+0x12c>)
 80059d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059e0:	4b17      	ldr	r3, [pc, #92]	; (8005a40 <xPortStartScheduler+0x130>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a16      	ldr	r2, [pc, #88]	; (8005a40 <xPortStartScheduler+0x130>)
 80059e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059ec:	4b14      	ldr	r3, [pc, #80]	; (8005a40 <xPortStartScheduler+0x130>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a13      	ldr	r2, [pc, #76]	; (8005a40 <xPortStartScheduler+0x130>)
 80059f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80059f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059f8:	f000 f8d6 	bl	8005ba8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059fc:	4b11      	ldr	r3, [pc, #68]	; (8005a44 <xPortStartScheduler+0x134>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a02:	f000 f8f5 	bl	8005bf0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a06:	4b10      	ldr	r3, [pc, #64]	; (8005a48 <xPortStartScheduler+0x138>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a0f      	ldr	r2, [pc, #60]	; (8005a48 <xPortStartScheduler+0x138>)
 8005a0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a12:	f7ff ff69 	bl	80058e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a16:	f7fe ff63 	bl	80048e0 <vTaskSwitchContext>
	prvTaskExitError();
 8005a1a:	f7ff ff23 	bl	8005864 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	e000ed00 	.word	0xe000ed00
 8005a2c:	410fc271 	.word	0x410fc271
 8005a30:	410fc270 	.word	0x410fc270
 8005a34:	e000e400 	.word	0xe000e400
 8005a38:	20000e3c 	.word	0x20000e3c
 8005a3c:	20000e40 	.word	0x20000e40
 8005a40:	e000ed20 	.word	0xe000ed20
 8005a44:	2000000c 	.word	0x2000000c
 8005a48:	e000ef34 	.word	0xe000ef34

08005a4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a64:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <vPortEnterCritical+0x54>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	4a0d      	ldr	r2, [pc, #52]	; (8005aa0 <vPortEnterCritical+0x54>)
 8005a6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a6e:	4b0c      	ldr	r3, [pc, #48]	; (8005aa0 <vPortEnterCritical+0x54>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d10e      	bne.n	8005a94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a76:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <vPortEnterCritical+0x58>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d009      	beq.n	8005a94 <vPortEnterCritical+0x48>
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	603b      	str	r3, [r7, #0]
 8005a92:	e7fe      	b.n	8005a92 <vPortEnterCritical+0x46>
	}
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	2000000c 	.word	0x2000000c
 8005aa4:	e000ed04 	.word	0xe000ed04

08005aa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005aae:	4b11      	ldr	r3, [pc, #68]	; (8005af4 <vPortExitCritical+0x4c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d109      	bne.n	8005aca <vPortExitCritical+0x22>
 8005ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	607b      	str	r3, [r7, #4]
 8005ac8:	e7fe      	b.n	8005ac8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005aca:	4b0a      	ldr	r3, [pc, #40]	; (8005af4 <vPortExitCritical+0x4c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	4a08      	ldr	r2, [pc, #32]	; (8005af4 <vPortExitCritical+0x4c>)
 8005ad2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ad4:	4b07      	ldr	r3, [pc, #28]	; (8005af4 <vPortExitCritical+0x4c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <vPortExitCritical+0x3e>
 8005adc:	2300      	movs	r3, #0
 8005ade:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	2000000c 	.word	0x2000000c
	...

08005b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b00:	f3ef 8009 	mrs	r0, PSP
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	4b15      	ldr	r3, [pc, #84]	; (8005b60 <pxCurrentTCBConst>)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	f01e 0f10 	tst.w	lr, #16
 8005b10:	bf08      	it	eq
 8005b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1a:	6010      	str	r0, [r2, #0]
 8005b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b24:	f380 8811 	msr	BASEPRI, r0
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f7fe fed6 	bl	80048e0 <vTaskSwitchContext>
 8005b34:	f04f 0000 	mov.w	r0, #0
 8005b38:	f380 8811 	msr	BASEPRI, r0
 8005b3c:	bc09      	pop	{r0, r3}
 8005b3e:	6819      	ldr	r1, [r3, #0]
 8005b40:	6808      	ldr	r0, [r1, #0]
 8005b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b46:	f01e 0f10 	tst.w	lr, #16
 8005b4a:	bf08      	it	eq
 8005b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b50:	f380 8809 	msr	PSP, r0
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	f3af 8000 	nop.w

08005b60 <pxCurrentTCBConst>:
 8005b60:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop

08005b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b80:	f7fe fdf6 	bl	8004770 <xTaskIncrementTick>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <xPortSysTickHandler+0x3c>)
 8005b8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	2300      	movs	r3, #0
 8005b94:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b9c:	bf00      	nop
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	e000ed04 	.word	0xe000ed04

08005ba8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005bac:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <vPortSetupTimerInterrupt+0x34>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005bb2:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <vPortSetupTimerInterrupt+0x38>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bb8:	4b0a      	ldr	r3, [pc, #40]	; (8005be4 <vPortSetupTimerInterrupt+0x3c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a0a      	ldr	r2, [pc, #40]	; (8005be8 <vPortSetupTimerInterrupt+0x40>)
 8005bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc2:	099b      	lsrs	r3, r3, #6
 8005bc4:	4a09      	ldr	r2, [pc, #36]	; (8005bec <vPortSetupTimerInterrupt+0x44>)
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bca:	4b04      	ldr	r3, [pc, #16]	; (8005bdc <vPortSetupTimerInterrupt+0x34>)
 8005bcc:	2207      	movs	r2, #7
 8005bce:	601a      	str	r2, [r3, #0]
}
 8005bd0:	bf00      	nop
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	e000e010 	.word	0xe000e010
 8005be0:	e000e018 	.word	0xe000e018
 8005be4:	20000000 	.word	0x20000000
 8005be8:	10624dd3 	.word	0x10624dd3
 8005bec:	e000e014 	.word	0xe000e014

08005bf0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bf0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c00 <vPortEnableVFP+0x10>
 8005bf4:	6801      	ldr	r1, [r0, #0]
 8005bf6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005bfa:	6001      	str	r1, [r0, #0]
 8005bfc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005bfe:	bf00      	nop
 8005c00:	e000ed88 	.word	0xe000ed88

08005c04 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c0a:	f3ef 8305 	mrs	r3, IPSR
 8005c0e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b0f      	cmp	r3, #15
 8005c14:	d913      	bls.n	8005c3e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c16:	4a16      	ldr	r2, [pc, #88]	; (8005c70 <vPortValidateInterruptPriority+0x6c>)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c20:	4b14      	ldr	r3, [pc, #80]	; (8005c74 <vPortValidateInterruptPriority+0x70>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	7afa      	ldrb	r2, [r7, #11]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d209      	bcs.n	8005c3e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	607b      	str	r3, [r7, #4]
 8005c3c:	e7fe      	b.n	8005c3c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c3e:	4b0e      	ldr	r3, [pc, #56]	; (8005c78 <vPortValidateInterruptPriority+0x74>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c46:	4b0d      	ldr	r3, [pc, #52]	; (8005c7c <vPortValidateInterruptPriority+0x78>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d909      	bls.n	8005c62 <vPortValidateInterruptPriority+0x5e>
 8005c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	603b      	str	r3, [r7, #0]
 8005c60:	e7fe      	b.n	8005c60 <vPortValidateInterruptPriority+0x5c>
	}
 8005c62:	bf00      	nop
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	e000e3f0 	.word	0xe000e3f0
 8005c74:	20000e3c 	.word	0x20000e3c
 8005c78:	e000ed0c 	.word	0xe000ed0c
 8005c7c:	20000e40 	.word	0x20000e40

08005c80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08a      	sub	sp, #40	; 0x28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c8c:	f7fe fcb6 	bl	80045fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c90:	4b59      	ldr	r3, [pc, #356]	; (8005df8 <pvPortMalloc+0x178>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c98:	f000 f91a 	bl	8005ed0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c9c:	4b57      	ldr	r3, [pc, #348]	; (8005dfc <pvPortMalloc+0x17c>)
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f040 8091 	bne.w	8005dcc <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d01c      	beq.n	8005cea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005cb0:	2208      	movs	r2, #8
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d013      	beq.n	8005cea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f023 0307 	bic.w	r3, r3, #7
 8005cc8:	3308      	adds	r3, #8
 8005cca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d009      	beq.n	8005cea <pvPortMalloc+0x6a>
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	e7fe      	b.n	8005ce8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d06d      	beq.n	8005dcc <pvPortMalloc+0x14c>
 8005cf0:	4b43      	ldr	r3, [pc, #268]	; (8005e00 <pvPortMalloc+0x180>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d868      	bhi.n	8005dcc <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cfa:	4b42      	ldr	r3, [pc, #264]	; (8005e04 <pvPortMalloc+0x184>)
 8005cfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cfe:	4b41      	ldr	r3, [pc, #260]	; (8005e04 <pvPortMalloc+0x184>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d04:	e004      	b.n	8005d10 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d903      	bls.n	8005d22 <pvPortMalloc+0xa2>
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f1      	bne.n	8005d06 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d22:	4b35      	ldr	r3, [pc, #212]	; (8005df8 <pvPortMalloc+0x178>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d04f      	beq.n	8005dcc <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d2c:	6a3b      	ldr	r3, [r7, #32]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2208      	movs	r2, #8
 8005d32:	4413      	add	r3, r2
 8005d34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	1ad2      	subs	r2, r2, r3
 8005d46:	2308      	movs	r3, #8
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d91e      	bls.n	8005d8c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4413      	add	r3, r2
 8005d54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d009      	beq.n	8005d74 <pvPortMalloc+0xf4>
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	613b      	str	r3, [r7, #16]
 8005d72:	e7fe      	b.n	8005d72 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	1ad2      	subs	r2, r2, r3
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d86:	69b8      	ldr	r0, [r7, #24]
 8005d88:	f000 f904 	bl	8005f94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d8c:	4b1c      	ldr	r3, [pc, #112]	; (8005e00 <pvPortMalloc+0x180>)
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	4a1a      	ldr	r2, [pc, #104]	; (8005e00 <pvPortMalloc+0x180>)
 8005d98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d9a:	4b19      	ldr	r3, [pc, #100]	; (8005e00 <pvPortMalloc+0x180>)
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	4b1a      	ldr	r3, [pc, #104]	; (8005e08 <pvPortMalloc+0x188>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d203      	bcs.n	8005dae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005da6:	4b16      	ldr	r3, [pc, #88]	; (8005e00 <pvPortMalloc+0x180>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a17      	ldr	r2, [pc, #92]	; (8005e08 <pvPortMalloc+0x188>)
 8005dac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	4b12      	ldr	r3, [pc, #72]	; (8005dfc <pvPortMalloc+0x17c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005dc2:	4b12      	ldr	r3, [pc, #72]	; (8005e0c <pvPortMalloc+0x18c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	4a10      	ldr	r2, [pc, #64]	; (8005e0c <pvPortMalloc+0x18c>)
 8005dca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005dcc:	f7fe fc24 	bl	8004618 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d009      	beq.n	8005dee <pvPortMalloc+0x16e>
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	e7fe      	b.n	8005dec <pvPortMalloc+0x16c>
	return pvReturn;
 8005dee:	69fb      	ldr	r3, [r7, #28]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3728      	adds	r7, #40	; 0x28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	20004a4c 	.word	0x20004a4c
 8005dfc:	20004a60 	.word	0x20004a60
 8005e00:	20004a50 	.word	0x20004a50
 8005e04:	20004a44 	.word	0x20004a44
 8005e08:	20004a54 	.word	0x20004a54
 8005e0c:	20004a58 	.word	0x20004a58

08005e10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d04b      	beq.n	8005eba <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e22:	2308      	movs	r3, #8
 8005e24:	425b      	negs	r3, r3
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4413      	add	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	4b23      	ldr	r3, [pc, #140]	; (8005ec4 <vPortFree+0xb4>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4013      	ands	r3, r2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d109      	bne.n	8005e52 <vPortFree+0x42>
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	e7fe      	b.n	8005e50 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d009      	beq.n	8005e6e <vPortFree+0x5e>
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	60bb      	str	r3, [r7, #8]
 8005e6c:	e7fe      	b.n	8005e6c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <vPortFree+0xb4>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4013      	ands	r3, r2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d01e      	beq.n	8005eba <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d11a      	bne.n	8005eba <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	4b0e      	ldr	r3, [pc, #56]	; (8005ec4 <vPortFree+0xb4>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	401a      	ands	r2, r3
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e94:	f7fe fbb2 	bl	80045fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <vPortFree+0xb8>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	4a09      	ldr	r2, [pc, #36]	; (8005ec8 <vPortFree+0xb8>)
 8005ea4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ea6:	6938      	ldr	r0, [r7, #16]
 8005ea8:	f000 f874 	bl	8005f94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005eac:	4b07      	ldr	r3, [pc, #28]	; (8005ecc <vPortFree+0xbc>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	4a06      	ldr	r2, [pc, #24]	; (8005ecc <vPortFree+0xbc>)
 8005eb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005eb6:	f7fe fbaf 	bl	8004618 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005eba:	bf00      	nop
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20004a60 	.word	0x20004a60
 8005ec8:	20004a50 	.word	0x20004a50
 8005ecc:	20004a5c 	.word	0x20004a5c

08005ed0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ed6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005eda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005edc:	4b27      	ldr	r3, [pc, #156]	; (8005f7c <prvHeapInit+0xac>)
 8005ede:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00c      	beq.n	8005f04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3307      	adds	r3, #7
 8005eee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f023 0307 	bic.w	r3, r3, #7
 8005ef6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	4a1f      	ldr	r2, [pc, #124]	; (8005f7c <prvHeapInit+0xac>)
 8005f00:	4413      	add	r3, r2
 8005f02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f08:	4a1d      	ldr	r2, [pc, #116]	; (8005f80 <prvHeapInit+0xb0>)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f0e:	4b1c      	ldr	r3, [pc, #112]	; (8005f80 <prvHeapInit+0xb0>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68ba      	ldr	r2, [r7, #8]
 8005f18:	4413      	add	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f1c:	2208      	movs	r2, #8
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0307 	bic.w	r3, r3, #7
 8005f2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4a15      	ldr	r2, [pc, #84]	; (8005f84 <prvHeapInit+0xb4>)
 8005f30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f32:	4b14      	ldr	r3, [pc, #80]	; (8005f84 <prvHeapInit+0xb4>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2200      	movs	r2, #0
 8005f38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f3a:	4b12      	ldr	r3, [pc, #72]	; (8005f84 <prvHeapInit+0xb4>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	1ad2      	subs	r2, r2, r3
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f50:	4b0c      	ldr	r3, [pc, #48]	; (8005f84 <prvHeapInit+0xb4>)
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	4a0a      	ldr	r2, [pc, #40]	; (8005f88 <prvHeapInit+0xb8>)
 8005f5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	4a09      	ldr	r2, [pc, #36]	; (8005f8c <prvHeapInit+0xbc>)
 8005f66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f68:	4b09      	ldr	r3, [pc, #36]	; (8005f90 <prvHeapInit+0xc0>)
 8005f6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005f6e:	601a      	str	r2, [r3, #0]
}
 8005f70:	bf00      	nop
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr
 8005f7c:	20000e44 	.word	0x20000e44
 8005f80:	20004a44 	.word	0x20004a44
 8005f84:	20004a4c 	.word	0x20004a4c
 8005f88:	20004a54 	.word	0x20004a54
 8005f8c:	20004a50 	.word	0x20004a50
 8005f90:	20004a60 	.word	0x20004a60

08005f94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f9c:	4b28      	ldr	r3, [pc, #160]	; (8006040 <prvInsertBlockIntoFreeList+0xac>)
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	e002      	b.n	8005fa8 <prvInsertBlockIntoFreeList+0x14>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d8f7      	bhi.n	8005fa2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d108      	bne.n	8005fd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	441a      	add	r2, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	441a      	add	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d118      	bne.n	800601c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	4b15      	ldr	r3, [pc, #84]	; (8006044 <prvInsertBlockIntoFreeList+0xb0>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d00d      	beq.n	8006012 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	441a      	add	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	e008      	b.n	8006024 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006012:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <prvInsertBlockIntoFreeList+0xb0>)
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e003      	b.n	8006024 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	429a      	cmp	r2, r3
 800602a:	d002      	beq.n	8006032 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006032:	bf00      	nop
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	20004a44 	.word	0x20004a44
 8006044:	20004a4c 	.word	0x20004a4c

08006048 <__libc_init_array>:
 8006048:	b570      	push	{r4, r5, r6, lr}
 800604a:	4e0d      	ldr	r6, [pc, #52]	; (8006080 <__libc_init_array+0x38>)
 800604c:	4c0d      	ldr	r4, [pc, #52]	; (8006084 <__libc_init_array+0x3c>)
 800604e:	1ba4      	subs	r4, r4, r6
 8006050:	10a4      	asrs	r4, r4, #2
 8006052:	2500      	movs	r5, #0
 8006054:	42a5      	cmp	r5, r4
 8006056:	d109      	bne.n	800606c <__libc_init_array+0x24>
 8006058:	4e0b      	ldr	r6, [pc, #44]	; (8006088 <__libc_init_array+0x40>)
 800605a:	4c0c      	ldr	r4, [pc, #48]	; (800608c <__libc_init_array+0x44>)
 800605c:	f000 f8e4 	bl	8006228 <_init>
 8006060:	1ba4      	subs	r4, r4, r6
 8006062:	10a4      	asrs	r4, r4, #2
 8006064:	2500      	movs	r5, #0
 8006066:	42a5      	cmp	r5, r4
 8006068:	d105      	bne.n	8006076 <__libc_init_array+0x2e>
 800606a:	bd70      	pop	{r4, r5, r6, pc}
 800606c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006070:	4798      	blx	r3
 8006072:	3501      	adds	r5, #1
 8006074:	e7ee      	b.n	8006054 <__libc_init_array+0xc>
 8006076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800607a:	4798      	blx	r3
 800607c:	3501      	adds	r5, #1
 800607e:	e7f2      	b.n	8006066 <__libc_init_array+0x1e>
 8006080:	0800632c 	.word	0x0800632c
 8006084:	0800632c 	.word	0x0800632c
 8006088:	0800632c 	.word	0x0800632c
 800608c:	08006330 	.word	0x08006330

08006090 <memcpy>:
 8006090:	b510      	push	{r4, lr}
 8006092:	1e43      	subs	r3, r0, #1
 8006094:	440a      	add	r2, r1
 8006096:	4291      	cmp	r1, r2
 8006098:	d100      	bne.n	800609c <memcpy+0xc>
 800609a:	bd10      	pop	{r4, pc}
 800609c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060a4:	e7f7      	b.n	8006096 <memcpy+0x6>

080060a6 <memset>:
 80060a6:	4402      	add	r2, r0
 80060a8:	4603      	mov	r3, r0
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d100      	bne.n	80060b0 <memset+0xa>
 80060ae:	4770      	bx	lr
 80060b0:	f803 1b01 	strb.w	r1, [r3], #1
 80060b4:	e7f9      	b.n	80060aa <memset+0x4>

080060b6 <cleanup_glue>:
 80060b6:	b538      	push	{r3, r4, r5, lr}
 80060b8:	460c      	mov	r4, r1
 80060ba:	6809      	ldr	r1, [r1, #0]
 80060bc:	4605      	mov	r5, r0
 80060be:	b109      	cbz	r1, 80060c4 <cleanup_glue+0xe>
 80060c0:	f7ff fff9 	bl	80060b6 <cleanup_glue>
 80060c4:	4621      	mov	r1, r4
 80060c6:	4628      	mov	r0, r5
 80060c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060cc:	f000 b85e 	b.w	800618c <_free_r>

080060d0 <_reclaim_reent>:
 80060d0:	4b2c      	ldr	r3, [pc, #176]	; (8006184 <_reclaim_reent+0xb4>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4283      	cmp	r3, r0
 80060d6:	b570      	push	{r4, r5, r6, lr}
 80060d8:	4604      	mov	r4, r0
 80060da:	d051      	beq.n	8006180 <_reclaim_reent+0xb0>
 80060dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80060de:	b143      	cbz	r3, 80060f2 <_reclaim_reent+0x22>
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d14a      	bne.n	800617c <_reclaim_reent+0xac>
 80060e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060e8:	6819      	ldr	r1, [r3, #0]
 80060ea:	b111      	cbz	r1, 80060f2 <_reclaim_reent+0x22>
 80060ec:	4620      	mov	r0, r4
 80060ee:	f000 f84d 	bl	800618c <_free_r>
 80060f2:	6961      	ldr	r1, [r4, #20]
 80060f4:	b111      	cbz	r1, 80060fc <_reclaim_reent+0x2c>
 80060f6:	4620      	mov	r0, r4
 80060f8:	f000 f848 	bl	800618c <_free_r>
 80060fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80060fe:	b111      	cbz	r1, 8006106 <_reclaim_reent+0x36>
 8006100:	4620      	mov	r0, r4
 8006102:	f000 f843 	bl	800618c <_free_r>
 8006106:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006108:	b111      	cbz	r1, 8006110 <_reclaim_reent+0x40>
 800610a:	4620      	mov	r0, r4
 800610c:	f000 f83e 	bl	800618c <_free_r>
 8006110:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006112:	b111      	cbz	r1, 800611a <_reclaim_reent+0x4a>
 8006114:	4620      	mov	r0, r4
 8006116:	f000 f839 	bl	800618c <_free_r>
 800611a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800611c:	b111      	cbz	r1, 8006124 <_reclaim_reent+0x54>
 800611e:	4620      	mov	r0, r4
 8006120:	f000 f834 	bl	800618c <_free_r>
 8006124:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006126:	b111      	cbz	r1, 800612e <_reclaim_reent+0x5e>
 8006128:	4620      	mov	r0, r4
 800612a:	f000 f82f 	bl	800618c <_free_r>
 800612e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006130:	b111      	cbz	r1, 8006138 <_reclaim_reent+0x68>
 8006132:	4620      	mov	r0, r4
 8006134:	f000 f82a 	bl	800618c <_free_r>
 8006138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800613a:	b111      	cbz	r1, 8006142 <_reclaim_reent+0x72>
 800613c:	4620      	mov	r0, r4
 800613e:	f000 f825 	bl	800618c <_free_r>
 8006142:	69a3      	ldr	r3, [r4, #24]
 8006144:	b1e3      	cbz	r3, 8006180 <_reclaim_reent+0xb0>
 8006146:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006148:	4620      	mov	r0, r4
 800614a:	4798      	blx	r3
 800614c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800614e:	b1b9      	cbz	r1, 8006180 <_reclaim_reent+0xb0>
 8006150:	4620      	mov	r0, r4
 8006152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006156:	f7ff bfae 	b.w	80060b6 <cleanup_glue>
 800615a:	5949      	ldr	r1, [r1, r5]
 800615c:	b941      	cbnz	r1, 8006170 <_reclaim_reent+0xa0>
 800615e:	3504      	adds	r5, #4
 8006160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006162:	2d80      	cmp	r5, #128	; 0x80
 8006164:	68d9      	ldr	r1, [r3, #12]
 8006166:	d1f8      	bne.n	800615a <_reclaim_reent+0x8a>
 8006168:	4620      	mov	r0, r4
 800616a:	f000 f80f 	bl	800618c <_free_r>
 800616e:	e7ba      	b.n	80060e6 <_reclaim_reent+0x16>
 8006170:	680e      	ldr	r6, [r1, #0]
 8006172:	4620      	mov	r0, r4
 8006174:	f000 f80a 	bl	800618c <_free_r>
 8006178:	4631      	mov	r1, r6
 800617a:	e7ef      	b.n	800615c <_reclaim_reent+0x8c>
 800617c:	2500      	movs	r5, #0
 800617e:	e7ef      	b.n	8006160 <_reclaim_reent+0x90>
 8006180:	bd70      	pop	{r4, r5, r6, pc}
 8006182:	bf00      	nop
 8006184:	20000010 	.word	0x20000010

08006188 <__malloc_lock>:
 8006188:	4770      	bx	lr

0800618a <__malloc_unlock>:
 800618a:	4770      	bx	lr

0800618c <_free_r>:
 800618c:	b538      	push	{r3, r4, r5, lr}
 800618e:	4605      	mov	r5, r0
 8006190:	2900      	cmp	r1, #0
 8006192:	d045      	beq.n	8006220 <_free_r+0x94>
 8006194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006198:	1f0c      	subs	r4, r1, #4
 800619a:	2b00      	cmp	r3, #0
 800619c:	bfb8      	it	lt
 800619e:	18e4      	addlt	r4, r4, r3
 80061a0:	f7ff fff2 	bl	8006188 <__malloc_lock>
 80061a4:	4a1f      	ldr	r2, [pc, #124]	; (8006224 <_free_r+0x98>)
 80061a6:	6813      	ldr	r3, [r2, #0]
 80061a8:	4610      	mov	r0, r2
 80061aa:	b933      	cbnz	r3, 80061ba <_free_r+0x2e>
 80061ac:	6063      	str	r3, [r4, #4]
 80061ae:	6014      	str	r4, [r2, #0]
 80061b0:	4628      	mov	r0, r5
 80061b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061b6:	f7ff bfe8 	b.w	800618a <__malloc_unlock>
 80061ba:	42a3      	cmp	r3, r4
 80061bc:	d90c      	bls.n	80061d8 <_free_r+0x4c>
 80061be:	6821      	ldr	r1, [r4, #0]
 80061c0:	1862      	adds	r2, r4, r1
 80061c2:	4293      	cmp	r3, r2
 80061c4:	bf04      	itt	eq
 80061c6:	681a      	ldreq	r2, [r3, #0]
 80061c8:	685b      	ldreq	r3, [r3, #4]
 80061ca:	6063      	str	r3, [r4, #4]
 80061cc:	bf04      	itt	eq
 80061ce:	1852      	addeq	r2, r2, r1
 80061d0:	6022      	streq	r2, [r4, #0]
 80061d2:	6004      	str	r4, [r0, #0]
 80061d4:	e7ec      	b.n	80061b0 <_free_r+0x24>
 80061d6:	4613      	mov	r3, r2
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	b10a      	cbz	r2, 80061e0 <_free_r+0x54>
 80061dc:	42a2      	cmp	r2, r4
 80061de:	d9fa      	bls.n	80061d6 <_free_r+0x4a>
 80061e0:	6819      	ldr	r1, [r3, #0]
 80061e2:	1858      	adds	r0, r3, r1
 80061e4:	42a0      	cmp	r0, r4
 80061e6:	d10b      	bne.n	8006200 <_free_r+0x74>
 80061e8:	6820      	ldr	r0, [r4, #0]
 80061ea:	4401      	add	r1, r0
 80061ec:	1858      	adds	r0, r3, r1
 80061ee:	4282      	cmp	r2, r0
 80061f0:	6019      	str	r1, [r3, #0]
 80061f2:	d1dd      	bne.n	80061b0 <_free_r+0x24>
 80061f4:	6810      	ldr	r0, [r2, #0]
 80061f6:	6852      	ldr	r2, [r2, #4]
 80061f8:	605a      	str	r2, [r3, #4]
 80061fa:	4401      	add	r1, r0
 80061fc:	6019      	str	r1, [r3, #0]
 80061fe:	e7d7      	b.n	80061b0 <_free_r+0x24>
 8006200:	d902      	bls.n	8006208 <_free_r+0x7c>
 8006202:	230c      	movs	r3, #12
 8006204:	602b      	str	r3, [r5, #0]
 8006206:	e7d3      	b.n	80061b0 <_free_r+0x24>
 8006208:	6820      	ldr	r0, [r4, #0]
 800620a:	1821      	adds	r1, r4, r0
 800620c:	428a      	cmp	r2, r1
 800620e:	bf04      	itt	eq
 8006210:	6811      	ldreq	r1, [r2, #0]
 8006212:	6852      	ldreq	r2, [r2, #4]
 8006214:	6062      	str	r2, [r4, #4]
 8006216:	bf04      	itt	eq
 8006218:	1809      	addeq	r1, r1, r0
 800621a:	6021      	streq	r1, [r4, #0]
 800621c:	605c      	str	r4, [r3, #4]
 800621e:	e7c7      	b.n	80061b0 <_free_r+0x24>
 8006220:	bd38      	pop	{r3, r4, r5, pc}
 8006222:	bf00      	nop
 8006224:	20004a64 	.word	0x20004a64

08006228 <_init>:
 8006228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622a:	bf00      	nop
 800622c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622e:	bc08      	pop	{r3}
 8006230:	469e      	mov	lr, r3
 8006232:	4770      	bx	lr

08006234 <_fini>:
 8006234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006236:	bf00      	nop
 8006238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623a:	bc08      	pop	{r3}
 800623c:	469e      	mov	lr, r3
 800623e:	4770      	bx	lr
